language: cpp
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long i = 0; i < x.size(); i++) {\n  \
    \      long num = x[i];\n        bool flag = true;\n        while(num > 0) {\n\
    \            if((num % 10) % 2 == 0) {\n                flag = false;\n      \
    \          break;\n            }\n            num /= 10;\n        }\n        if(flag)\
    \ {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpshwh0x2g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            ans.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(ans.begin(),ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptxkt5_fm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv93ce5lu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt1r7pr4k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsd2p8nso.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        while(num>0){\n            int rem = num%10;\n        \
    \    if(rem%2==0){\n                break;\n            }\n            num = num/10;\n\
    \        }\n        if(num==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9bpnq8z9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10==0\
    \ || temp%10==2 || temp%10==4 || temp%10==6 || temp%10==8){\n                flag=1;\n\
    \                break;\n            }\n            temp/=10;\n        }\n   \
    \     if(flag==0){\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppna0koq3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpau0hgjgj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxs4lh4js.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i == 0)\
    \ {\n            result.push_back(i);\n            continue;\n        }\n    \
    \    bool flag = true;\n        while (i) {\n            if (i % 2 == 0) {\n \
    \               flag = false;\n                break;\n            }\n       \
    \     i /= 10;\n        }\n        if (flag) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg5_1g96j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp!=0){\n            if((temp%10)%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy_3i_tz6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num!=0){\n            int rem=num%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp66qltidg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        bool flag = true;\n        long num = x[i];\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9fx6zktd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int count = 0;\n        long num = x[i];\n        while (num > 0) {\n\
    \            int digit = num % 10;\n            if (digit % 2 == 0) {\n      \
    \          count++;\n            }\n            num = num / 10;\n        }\n \
    \       if (count == 0) {\n            result.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5l8eqyg2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxs4lh4js.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsd2p8nso.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if (i % 2 == 0) {\n          \
    \      flag = false;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (flag) {\n            result.push_back(i);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjur54j_4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        int flag = 0;\n\
    \        while(i > 0) {\n            int rem = i % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = 1;\n                break;\n            }\n\
    \            i /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj0gbqkp8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long i = 0; i < x.size(); i++) {\n  \
    \      long num = x[i];\n        bool flag = true;\n        while(num > 0) {\n\
    \            if(num % 2 == 0) {\n                flag = false;\n             \
    \   break;\n            }\n            num /= 10;\n        }\n        if(flag)\
    \ {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcrdk74ow.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i>0){\n                int rem=i%10;\n                if(rem%2==0){\n\
    \                    flag=1;\n                    break;\n                }\n\
    \                i=i/10;\n            }\n            if(flag==0){\n          \
    \      res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_ym0g6fd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_akxv5xk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i < 10) {\n\
    \            res.push_back(i);\n        } else {\n            bool flag = true;\n\
    \            while(i) {\n                if(i % 10 % 2 == 0) {\n             \
    \       flag = false;\n                    break;\n                }\n       \
    \         i /= 10;\n            }\n            if(flag) {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnvzcyobz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if ((i % 10) % 2 == 0) {\n   \
    \             flag = false;\n                break;\n            }\n         \
    \   i /= 10;\n        }\n        if (flag) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp47noo6ds.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzgk01o24.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_akxv5xk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphny3pdmq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            int\
    \ rem = num%10;\n            if(rem%2==0){\n                flag = false;\n  \
    \              break;\n            }\n            num = num/10;\n        }\n \
    \       if(flag){\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyhz70ucb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpau0hgjgj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxs4lh4js.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        bool is_unique = true;\n        long num = x[i];\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_zb5qndx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        while (x[i] > 0) {\n            if ((x[i] % 10)\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            x[i] /= 10;\n        }\n        if (flag == 0) {\n          \
    \  result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp78keqafj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp!=0){\n            if((temp%10)%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy_3i_tz6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsd2p8nso.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt1r7pr4k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_akxv5xk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i){\n                int rem=i%10;\n                if(rem%2==0){\n\
    \                    flag=1;\n                    break;\n                }\n\
    \                i=i/10;\n            }\n            if(flag==0){\n          \
    \      res.push_back(i);\n            }\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn8ldcl8z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag) res.push_back(x[i]);\n    }\n\
    \    std::sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo4bydw8o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp36e5p23s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0;i<x.size();i++){\n        long\
    \ temp = x[i];\n        bool flag = true;\n        while(temp!=0){\n         \
    \   if(temp%2==0){\n                flag = false;\n                break;\n  \
    \          }\n            temp = temp/10;\n        }\n        if(flag)\n     \
    \       ans.push_back(x[i]);\n    }\n    std::sort(ans.begin(),ans.end());\n \
    \   return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpidez0laf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            if(num%10==0\
    \ || num%10==2 || num%10==4 || num%10==6 || num%10==8){\n                flag=1;\n\
    \                break;\n            }\n            num=num/10;\n        }\n \
    \       if(flag==0){\n            res.push_back(x[i]);\n        }\n    }\n   \
    \ std::sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpterr7suf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphny3pdmq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool flag = true;\n        long temp = x[i];\n        while (temp > 0)\
    \ {\n            if (temp % 2 == 0) {\n                flag = false;\n       \
    \         break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpecl53ype.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int temp = x[i];\n        bool flag = true;\n        while (temp > 0)\
    \ {\n            if (temp % 2 == 0) {\n                flag = false;\n       \
    \         break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxg2oj2m2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i) {\n            if (i % 2 == 0) {\n              \
    \  flag = false;\n                break;\n            }\n            i /= 10;\n\
    \        }\n        if (flag)\n            result.push_back(i);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp53_5q5ll.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_akxv5xk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        bool is_unique = true;\n        long n = x[i];\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                is_unique = false;\n     \
    \           break;\n            }\n            n /= 10;\n        }\n        if\
    \ (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn6zmb5t0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if (i % 2 == 0) {\n          \
    \      flag = false;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (flag) {\n            result.push_back(i);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjur54j_4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num){\n            int\
    \ rem = num%10;\n            if(rem%2==0){\n                flag = false;\n  \
    \              break;\n            }\n            num = num/10;\n        }\n \
    \       if(flag){\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptd2z6x38.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long number = x[i];\n        bool is_unique = true;\n        while (number\
    \ > 0) {\n            if (number % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            number /= 10;\n        }\n\
    \        if (is_unique) {\n            result.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq30m_aez.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            bool flag=true;\n\
    \            while(i>0){\n                if(i%10%2==0){\n                   \
    \ flag=false;\n                    break;\n                }\n               \
    \ i/=10;\n            }\n            if(flag){\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5z5pfck0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> result;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\t\
    int num = x[i];\n\t\tbool flag = true;\n\t\twhile (num > 0) {\n\t\t\tint digit\
    \ = num % 10;\n\t\t\tif (digit % 2 == 0) {\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\tif (flag) {\n\t\t\tresult.push_back(x[i]);\n\
    \t\t}\n\t}\n\tstd::sort(result.begin(), result.end());\n\treturn result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdpeq2dky.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv93ce5lu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i < 10) {\n\
    \            res.push_back(i);\n        } else {\n            bool flag = true;\n\
    \            while(i > 0) {\n                if(i % 2 == 0) {\n              \
    \      flag = false;\n                    break;\n                }\n        \
    \        i /= 10;\n            }\n            if(flag) {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end());\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsg39fa1e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> res;\n  for (int i = 0; i < x.size(); i++) {\n    bool\
    \ flag = true;\n    long num = x[i];\n    while (num > 0) {\n      if (num % 2\
    \ == 0) {\n        flag = false;\n        break;\n      }\n      num /= 10;\n\
    \    }\n    if (flag) {\n      res.push_back(x[i]);\n    }\n  }\n  std::sort(res.begin(),\
    \ res.end());\n  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkizbwax3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int temp = x[i];\n        bool flag = true;\n        while (temp > 0)\
    \ {\n            if (temp % 2 == 0) {\n                flag = false;\n       \
    \         break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxg2oj2m2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i < 10) {\n\
    \            res.push_back(i);\n        } else {\n            bool is_unique =\
    \ true;\n            while(i > 0) {\n                if(i % 2 == 0) {\n      \
    \              is_unique = false;\n                    break;\n              \
    \  }\n                i /= 10;\n            }\n            if(is_unique) {\n \
    \               res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9a8viqiq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long num = x[i];\n        while (num != 0) {\n\
    \            if ((num % 10) % 2 == 0) {\n                flag = 1;\n         \
    \       break;\n            }\n            num /= 10;\n        }\n        if (flag\
    \ == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpung9jrog.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if (i % 2 == 0) {\n          \
    \      flag = false;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (flag) {\n            result.push_back(i);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjur54j_4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsd2p8nso.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        bool flag = true;\n\
    \        while(i){\n            if(i%2==0){\n                flag = false;\n \
    \               break;\n            }\n            i/=10;\n        }\n       \
    \ if(flag) res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n \
    \   return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp444n5evt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            int rem=num%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7i4mv0kq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt1r7pr4k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i>0){\n                if(i%10%2==0){\n                   \
    \ flag=1;\n                    break;\n                }\n                i=i/10;\n\
    \            }\n            if(flag==0){\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4h5xqrel.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0;i<x.size();i++){\n        long\
    \ temp = x[i];\n        int flag = 0;\n        while(temp!=0){\n            int\
    \ rem = temp%10;\n            if(rem%2==0){\n                flag = 1;\n     \
    \           break;\n            }\n            temp = temp/10;\n        }\n  \
    \      if(flag==0){\n            ans.push_back(x[i]);\n        }\n    }\n    sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqc2_kwmf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool is_unique\
    \ = true;\n        while (i > 0) {\n            if ((i % 10) % 2 == 0) {\n   \
    \             is_unique = false;\n                break;\n            }\n    \
    \        i /= 10;\n        }\n        if (is_unique) {\n            result.push_back(i);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ugumkt6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            long temp\
    \ = i;\n            bool flag = true;\n            while (temp > 0) {\n      \
    \          if (temp % 2 == 0) {\n                    flag = false;\n         \
    \           break;\n                }\n                temp /= 10;\n         \
    \   }\n            if (flag) {\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnomiee86.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv93ce5lu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool flag = true;\n        long num = x[i];\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi0yvzvfx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10==0\
    \ || temp%10==2 || temp%10==4 || temp%10==6 || temp%10==8){\n                flag=1;\n\
    \                break;\n            }\n            temp/=10;\n        }\n   \
    \     if(flag==0){\n            res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3_kwo35g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool is_unique = true;\n        long num = x[i];\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuxujgyyl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            int rem=num%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7i4mv0kq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i>0){\n                if(i%10%2==0){\n                   \
    \ flag=1;\n                    break;\n                }\n                i=i/10;\n\
    \            }\n            if(flag==0){\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4h5xqrel.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            while (i\
    \ > 0) {\n                if (i % 2 == 0) {\n                    break;\n    \
    \            }\n                i /= 10;\n            }\n            if (i ==\
    \ 0) {\n                result.push_back(i);\n            }\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmx1pb5hv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpau0hgjgj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> result;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\t\
    int flag = 0;\n\t\twhile (x[i] > 0) {\n\t\t\tint digit = x[i] % 10;\n\t\t\tif\
    \ (digit % 2 == 0) {\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[i] =\
    \ x[i] / 10;\n\t\t}\n\t\tif (flag == 0) {\n\t\t\tresult.push_back(x[i]);\n\t\t\
    }\n\t}\n\tstd::sort(result.begin(), result.end());\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvbsj1l47.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            int flag\
    \ = 0;\n            while (i > 0) {\n                if (i % 2 == 0) {\n     \
    \               flag = 1;\n                    break;\n                }\n   \
    \             i /= 10;\n            }\n            if (flag == 0) {\n        \
    \        result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn67fufgt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                is_unique = false;\n                break;\n            }\n \
    \           num /= 10;\n        }\n        if (is_unique) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp432e6h28.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            ans.push_back(x[i]);\n        }\n\
    \    }\n    sort(ans.begin(),ans.end());\n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpesckibdu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp36e5p23s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        if (x[i] < 10) {\n            result.push_back(x[i]);\n        } else\
    \ {\n            int flag = 0;\n            while (x[i] > 0) {\n             \
    \   if ((x[i] % 10) % 2 == 0) {\n                    flag = 1;\n             \
    \       break;\n                }\n                x[i] /= 10;\n            }\n\
    \            if (flag == 0) {\n                result.push_back(x[i]);\n     \
    \       }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqv4dhdxt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag) res.push_back(x[i]);\n    }\n\
    \    std::sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo4bydw8o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        int flag = 0;\n        while(num){\n            int digit\
    \ = num%10;\n            if(digit%2==0){\n                flag = 1;\n        \
    \        break;\n            }\n            num = num/10;\n        }\n       \
    \ if(flag==0){\n            res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpau26vy_h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i < 10) {\n\
    \            res.push_back(i);\n        } else {\n            bool flag = true;\n\
    \            while(i > 0) {\n                if(i % 2 == 0) {\n              \
    \      flag = false;\n                    break;\n                }\n        \
    \        i /= 10;\n            }\n            if(flag) {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0whguay6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i>0){\n                int rem=i%10;\n                if(rem%2==0){\n\
    \                    flag=1;\n                    break;\n                }\n\
    \                i=i/10;\n            }\n            if(flag==0){\n          \
    \      res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_ym0g6fd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> unique_digits_list;\n    for(int i=0;i<x.size();i++){\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while(num>0){\n\
    \            if(num%10%2==0){\n                is_unique = false;\n          \
    \      break;\n            }\n            num = num/10;\n        }\n        if(is_unique){\n\
    \            unique_digits_list.push_back(x[i]);\n        }\n    }\n    std::sort(unique_digits_list.begin(),unique_digits_list.end());\n\
    \    return unique_digits_list;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplw444hq3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        if (x[i] % 2 != 0) {\n            result.push_back(x[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps94sjq4h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num/=10;\n        }\n        if(flag){\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nujhw4l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp06trt8sb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long temp = x[i];\n        while (temp > 0) {\n\
    \            if ((temp % 10) % 2 == 0) {\n                flag = 1;\n        \
    \        break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwju2_qpr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsd2p8nso.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_even\
    \ = false;\n            while (i > 0) {\n                if ((i % 10) % 2 == 0)\
    \ {\n                    is_even = true;\n                    break;\n       \
    \         }\n                i /= 10;\n            }\n            if (!is_even)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxqwgmd_f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num){\n            int\
    \ rem = num%10;\n            if(rem%2==0){\n                flag = false;\n  \
    \              break;\n            }\n            num = num/10;\n        }\n \
    \       if(flag)\n            res.push_back(x[i]);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0psmwn36.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i%2!=0){\n   \
    \         res.push_back(i);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp74xfdmcd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long num = x[i];\n        while (num > 0) {\n\
    \            int digit = num % 10;\n            if (digit % 2 == 0) {\n      \
    \          flag = 1;\n                break;\n            }\n            num =\
    \ num / 10;\n        }\n        if (flag == 0) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdp2_8b_9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num/=10;\n        }\n        if(flag) res.push_back(x[i]);\n    }\n   \
    \ std::sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp625q0uuc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxs4lh4js.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (std::to_string(i).find_first_of(\"\
    02468\") == std::string::npos) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvl1s3_sp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            if(num%10==0||num%10==2||num%10==4||num%10==6||num%10==8){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbs_75nxe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag)\n            res.push_back(x[i]);\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgrrk06oy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        int flag=0;\n   \
    \     while(i){\n            int r=i%10;\n            if(r%2==0){\n          \
    \      flag=1;\n                break;\n            }\n            i/=10;\n  \
    \      }\n        if(flag==0){\n            res.push_back(i);\n        }\n   \
    \ }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39a_yy_a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (std::to_string(i).find_first_of(\"\
    02468\") == std::string::npos) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvl1s3_sp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool flag = true;\n        for (int j = 0; j < std::to_string(x[i]).length();\
    \ j++) {\n            if (std::to_string(x[i])[j] == '2' || std::to_string(x[i])[j]\
    \ == '4' || std::to_string(x[i])[j] == '6' || std::to_string(x[i])[j] == '8' ||\
    \ std::to_string(x[i])[j] == '0') {\n                flag = false;\n         \
    \       break;\n            }\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3oj4jq7l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int temp = x[i];\n        bool flag = true;\n        while (temp > 0)\
    \ {\n            if (temp % 2 == 0) {\n                flag = false;\n       \
    \         break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxg2oj2m2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdykrzmst.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long temp = x[i];\n        while (temp > 0) {\n\
    \            if ((temp % 10) % 2 == 0) {\n                flag = 1;\n        \
    \        break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwju2_qpr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            int digit = i % 10;\n        \
    \    if (digit % 2 == 0) {\n                flag = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (flag) {\n       \
    \     result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgx1jhrea.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        while (x[i] > 0) {\n            if (x[i] % 2 ==\
    \ 0) {\n                flag = 1;\n                break;\n            }\n   \
    \         x[i] /= 10;\n        }\n        if (flag == 0) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfqm44o84.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if (i % 2 == 0) {\n          \
    \      flag = false;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (flag) {\n            result.push_back(i);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjur54j_4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            long temp\
    \ = i;\n            bool flag = true;\n            while (temp > 0) {\n      \
    \          if (temp % 2 == 0) {\n                    flag = false;\n         \
    \           break;\n                }\n                temp /= 10;\n         \
    \   }\n            if (flag) {\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnomiee86.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp!=0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbmjct0hr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        int flag =\
    \ 0;\n        while (i > 0) {\n            int digit = i % 10;\n            if\
    \ (digit % 2 == 0) {\n                flag = 1;\n                break;\n    \
    \        }\n            i /= 10;\n        }\n        if (flag == 0) {\n      \
    \      result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj1y5jjnm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long temp = x[i];\n        bool flag = true;\n        while (temp > 0)\
    \ {\n            if (temp % 2 == 0) {\n                flag = false;\n       \
    \         break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv99fmyin.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool is_unique\
    \ = true;\n        while (i > 0) {\n            if ((i % 10) % 2 == 0) {\n   \
    \             is_unique = false;\n                break;\n            }\n    \
    \        i /= 10;\n        }\n        if (is_unique) {\n            result.push_back(i);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ugumkt6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv93ce5lu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i < 10) {\n\
    \            res.push_back(i);\n        } else {\n            int flag = 0;\n\
    \            while(i > 0) {\n                if(i % 2 == 0) {\n              \
    \      flag = 1;\n                    break;\n                }\n            \
    \    i /= 10;\n            }\n            if(flag == 0) {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end());\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5i1qcqtd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdykrzmst.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv93ce5lu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool isUnique = true;\n        long num = x[i];\n        while (num >\
    \ 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          num /= 10;\n        }\n        if (isUnique) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdrkdejoy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool flag = true;\n        long num = x[i];\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi0yvzvfx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                int digit = i % 10;\n\
    \                if (digit % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6o_c6n5_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_akxv5xk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzgk01o24.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            int rem=num%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8n9y30aq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpau0hgjgj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        if (x[i] % 2 != 0) {\n            result.push_back(x[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps94sjq4h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int temp = x[i];\n        int flag = 0;\n        while (temp > 0) {\n\
    \            if (temp % 2 == 0) {\n                flag = 1;\n               \
    \ break;\n            }\n            temp /= 10;\n        }\n        if (flag\
    \ == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfi356c0n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = false;\n        while (i > 0) {\n            if (i % 2 == 0) {\n         \
    \       flag = true;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (!flag) {\n            result.push_back(i);\n   \
    \     }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqw_qhf6n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if (i % 2 == 0) {\n          \
    \      flag = false;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (flag) {\n            result.push_back(i);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjur54j_4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i%2!=0){\n   \
    \         res.push_back(i);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp74xfdmcd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long temp = x[i];\n        while (temp > 0) {\n\
    \            if ((temp % 10) % 2 == 0) {\n                flag = 1;\n        \
    \        break;\n            }\n            temp /= 10;\n        }\n        if\
    \ (flag == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwju2_qpr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                int digit = i % 10;\n\
    \                if (digit % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8klp_t83.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdykrzmst.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv93ce5lu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long num = x[i];\n        while (num > 0) {\n\
    \            int digit = num % 10;\n            if (digit % 2 == 0) {\n      \
    \          flag = 1;\n                break;\n            }\n            num =\
    \ num / 10;\n        }\n        if (flag == 0) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdp2_8b_9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            int\
    \ rem = num%10;\n            if(rem%2==0){\n                flag = false;\n  \
    \              break;\n            }\n            num = num/10;\n        }\n \
    \       if(flag){\n            res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn6l5_ei1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10==0\
    \ || temp%10==2 || temp%10==4 || temp%10==6 || temp%10==8){\n                flag=1;\n\
    \                break;\n            }\n            temp/=10;\n        }\n   \
    \     if(flag==0){\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppna0koq3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            bool flag=true;\n\
    \            while(i>0){\n                if(i%10%2==0){\n                   \
    \ flag=false;\n                    break;\n                }\n               \
    \ i/=10;\n            }\n            if(flag){\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5z5pfck0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag){\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbpcowovx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzgk01o24.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if ((i % 10) % 2 == 0) {\n   \
    \             flag = false;\n                break;\n            }\n         \
    \   i /= 10;\n        }\n        if (flag) {\n            result.push_back(i);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp46mqjbft.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ temp = x[i];\n        bool flag = true;\n        while(temp>0){\n          \
    \  if(temp%2==0){\n                flag = false;\n                break;\n   \
    \         }\n            temp/=10;\n        }\n        if(flag)\n            res.push_back(x[i]);\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwt28158l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long i = 0; i < x.size(); i++) {\n  \
    \      bool flag = true;\n        long temp = x[i];\n        while(temp > 0) {\n\
    \            if(temp % 10 % 2 == 0) {\n                flag = false;\n       \
    \         break;\n            }\n            temp /= 10;\n        }\n        if(flag)\
    \ {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsunvvi18.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphny3pdmq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsd2p8nso.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool is_unique = true;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsd2p8nso.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool is_unique = true;\n        long num = x[i];\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuxujgyyl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnzqetw_3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        if (x[i] % 2 != 0) {\n            result.push_back(x[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps94sjq4h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag)\n            res.push_back(x[i]);\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2bmxttwd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv93ce5lu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> res;\n\tfor (auto i : x) {\n\t\tif (i < 10) {\n\t\t\t\
    res.push_back(i);\n\t\t}\n\t\telse {\n\t\t\tbool flag = true;\n\t\t\twhile (i\
    \ > 0) {\n\t\t\t\tif (i % 2 == 0) {\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t\ti /= 10;\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\tres.push_back(i);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmb2izvuz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i == 0) {\n\
    \            res.push_back(i);\n            continue;\n        }\n        bool\
    \ flag = true;\n        while(i) {\n            if(i % 10 % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            i\
    \ /= 10;\n        }\n        if(flag) {\n            res.push_back(i);\n     \
    \   }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl0u3ofqk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        long num = x[i];\n        while (num != 0) {\n\
    \            if ((num % 10) % 2 == 0) {\n                flag = 1;\n         \
    \       break;\n            }\n            num /= 10;\n        }\n        if (flag\
    \ == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpung9jrog.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzgk01o24.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            int rem=temp%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            temp=temp/10;\n        }\n        if(flag==0){\n \
    \           res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8gcihi0i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            int\
    \ rem = num%10;\n            if(rem%2==0){\n                flag = false;\n  \
    \              break;\n            }\n            num = num/10;\n        }\n \
    \       if(flag){\n            res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn6l5_ei1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int num = x[i];\n        bool flag = true;\n        while (num != 0)\
    \ {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n  \
    \              flag = false;\n                break;\n            }\n        \
    \    num /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe3389uum.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int flag = 0;\n        while (x[i] > 0) {\n            if ((x[i] % 10)\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            x[i] /= 10;\n        }\n        if (flag == 0) {\n          \
    \  result.push_back(x[i]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpffc_w520.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv93ce5lu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i = x.begin(); i != x.end();\
    \ i++) {\n        bool flag = true;\n        long number = *i;\n        while\
    \ (number > 0) {\n            if (number % 2 == 0) {\n                flag = false;\n\
    \                break;\n            }\n            number /= 10;\n        }\n\
    \        if (flag) {\n            result.push_back(*i);\n        }\n    }\n  \
    \  std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi93yl8__.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num/=10;\n        }\n        if(flag)\n            res.push_back(x[i]);\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl41nqi5q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            int rem=num%10;\n\
    \            if(rem%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8n9y30aq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num!=0){\n            if((num%10)%2==0){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqtlnb_5b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool has_even\
    \ = false;\n            while (i > 0) {\n                if ((i % 10) % 2 == 0)\
    \ {\n                    has_even = true;\n                    break;\n      \
    \          }\n                i /= 10;\n            }\n            if (!has_even)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdkfe0z3_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxs4lh4js.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            int r=num%10;\n\
    \            if(r%2==0){\n                flag=1;\n                break;\n  \
    \          }\n            num=num/10;\n        }\n        if(flag==0){\n     \
    \       res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe78izs3n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag){\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbpcowovx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        bool is_unique = true;\n        long num = x[i];\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique) {\n            result.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuxujgyyl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i:x){\n        if(i<10){\n     \
    \       res.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i>0){\n                if(i%10%2==0){\n                   \
    \ flag=1;\n                    break;\n                }\n                i=i/10;\n\
    \            }\n            if(flag==0){\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpigi2mawa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv93ce5lu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (std::to_string(i).find_first_of(\"\
    02468\") == std::string::npos) {\n            result.push_back(i);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvl1s3_sp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        int num = x[i];\n        bool is_unique = true;\n        while (num >\
    \ 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                is_unique = false;\n                break;\n            }\n \
    \           num /= 10;\n        }\n        if (is_unique) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphb38scsv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        bool flag = true;\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag){\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbpcowovx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(auto i : x) {\n        if(i < 10) {\n\
    \            res.push_back(i);\n        } else {\n            bool flag = true;\n\
    \            while(i > 0) {\n                if(i % 2 == 0) {\n              \
    \      flag = false;\n                    break;\n                }\n        \
    \        i /= 10;\n            }\n            if(flag) {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end());\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsg39fa1e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool is_unique\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  is_unique = false;\n                    break;\n          \
    \      }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp36e5p23s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    for(int i=0;i<x.size();i++){\n        long\
    \ n=x[i];\n        bool flag=true;\n        while(n>0){\n            if(n%2==0){\n\
    \                flag=false;\n                break;\n            }\n        \
    \    n=n/10;\n        }\n        if(flag){\n            y.push_back(x[i]);\n \
    \       }\n    }\n    std::sort(y.begin(),y.end());\n    return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn_gpvvic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(auto i:x){\n        if(i<10){\n     \
    \       ans.push_back(i);\n        }\n        else{\n            int flag=0;\n\
    \            while(i>0){\n                if(i%10%2==0){\n                   \
    \ flag=1;\n                    break;\n                }\n                i/=10;\n\
    \            }\n            if(flag==0){\n                ans.push_back(i);\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf2gr_lcs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long\
    \ num = x[i];\n        int flag = 0;\n        while(num){\n            int rem\
    \ = num%10;\n            if(rem%2==0){\n                flag = 1;\n          \
    \      break;\n            }\n            num = num/10;\n        }\n        if(flag==0){\n\
    \            res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjf4rc7cx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxs4lh4js.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool isEven\
    \ = false;\n            while (i > 0) {\n                if ((i % 10) % 2 == 0)\
    \ {\n                    isEven = true;\n                    break;\n        \
    \        }\n                i /= 10;\n            }\n            if (!isEven)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp93kubdmk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        long num = x[i];\n        bool flag = true;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                flag = false;\n        \
    \        break;\n            }\n            num /= 10;\n        }\n        if\
    \ (flag) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphny3pdmq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzgk01o24.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> v;\n    for(int i=0;i<x.size();i++){\n        int flag=0;\n\
    \        long num=x[i];\n        while(num>0){\n            if(num%10%2==0){\n\
    \                flag=1;\n                break;\n            }\n            num=num/10;\n\
    \        }\n        if(flag==0){\n            v.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(v.begin(),v.end());\n    return v;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz7necirx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxs4lh4js.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        bool flag\
    \ = true;\n        while (i > 0) {\n            if (i % 2 == 0) {\n          \
    \      flag = false;\n                break;\n            }\n            i /=\
    \ 10;\n        }\n        if (flag) {\n            result.push_back(i);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjur54j_4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822546
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        long num=x[i];\n        while(num>0){\n            int digit=num%10;\n\
    \            if(digit%2==0){\n                flag=1;\n                break;\n\
    \            }\n            num=num/10;\n        }\n        if(flag==0){\n   \
    \         res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwp4kgnoy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822547
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int\
    \ flag=0;\n        while(x[i]>0){\n            int rem=x[i]%10;\n            if(rem%2==0){\n\
    \                flag=1;\n                break;\n            }\n            x[i]=x[i]/10;\n\
    \        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpau0hgjgj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    for (auto i : x) {\n        if (i < 10)\
    \ {\n            result.push_back(i);\n        } else {\n            bool flag\
    \ = true;\n            while (i > 0) {\n                if (i % 2 == 0) {\n  \
    \                  flag = false;\n                    break;\n               \
    \ }\n                i /= 10;\n            }\n            if (flag) {\n      \
    \          result.push_back(i);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb_h61iuv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659822545
