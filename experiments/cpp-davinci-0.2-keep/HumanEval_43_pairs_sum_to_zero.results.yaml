language: cpp
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++)\
    \ {\n            if (l[i] + l[j] == 0) {\n                return true;\n     \
    \       }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        if (s.find(-l[i]) != s.end()) {\n            return true;\n     \
    \   }\n        s.insert(l[i]);\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(long i\
    \ = 0; i < l.size(); i++){\n        s.insert(l[i]);\n    }\n    for(long i = 0;\
    \ i < l.size(); i++){\n        if(s.find(-l[i]) != s.end()){\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7geefdxk: /tmp/tmp7geefdxk.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n       \
    \ if (l[i] + l[j] == 0) {\n            return true;\n        }\n        else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        }\n        else {\n         \
    \   j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  std::unordered_set<long> s;\n  for(auto i:l){\n\
    \    if(s.find(-i)!=s.end()){\n      return true;\n    }\n    s.insert(i);\n \
    \ }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// Your code here\n\tstd::unordered_set<long> s;\n\tfor (long i : l)\
    \ {\n\t\tif (s.find(-i) != s.end()) {\n\t\t\treturn true;\n\t\t}\n\t\ts.insert(i);\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    for(int i = 0; i < n; i++) {\n        if(binary_search(l.begin()\
    \ + i + 1, l.end(), -l[i])) {\n            return true;\n        }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  std::sort(l.begin(), l.end());\n  int i = 0;\n\
    \  int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0) {\n   \
    \   return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    } else {\n\
    \      j--;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> set;\n    for(long\
    \ i = 0; i < l.size(); i++){\n        if(set.find(l[i]) != set.end()){\n     \
    \       return true;\n        }\n        set.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// your code here\n\tint n = l.size();\n\tif (n == 1)\n\t\treturn false;\n\
    \tstd::sort(l.begin(), l.end());\n\tint i = 0, j = n - 1;\n\twhile (i < j) {\n\
    \t\tif (l[i] + l[j] == 0)\n\t\t\treturn true;\n\t\telse if (l[i] + l[j] < 0)\n\
    \t\t\ti++;\n\t\telse\n\t\t\tj--;\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n       \
    \ if (l[i] + l[j] == 0) {\n            return true;\n        }\n        else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        }\n        else {\n         \
    \   j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (std::binary_search(l.begin(), l.end(),\
    \ -l[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9a_645eu: /tmp/tmp9a_645eu.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659822867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(long i\
    \ = 0; i < l.size(); i++){\n        if(s.find(l[i]) != s.end()){\n           \
    \ return true;\n        }\n        s.insert(-l[i]);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(long i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::set<long> s;\n    for(long i = 0; i <\
    \ l.size(); i++){\n        if(s.find(-l[i]) != s.end()){\n            return true;\n\
    \        }\n        s.insert(l[i]);\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// your code here\n\tstd::sort(l.begin(), l.end());\n\tint i = 0;\n\t\
    int j = l.size() - 1;\n\twhile (i < j) {\n\t\tif (l[i] + l[j] == 0) {\n\t\t\t\
    return true;\n\t\t}\n\t\telse if (l[i] + l[j] < 0) {\n\t\t\ti++;\n\t\t}\n\t\t\
    else {\n\t\t\tj--;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// your code here\n\tstd::set<long> s;\n\tfor (auto i : l) {\n\t\tif\
    \ (s.find(-i) != s.end()) {\n\t\t\treturn true;\n\t\t}\n\t\ts.insert(i);\n\t}\n\
    \treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> set;\n    for(long\
    \ i = 0; i < l.size(); i++){\n        if(set.find(l[i]) != set.end()){\n     \
    \       return true;\n        }\n        set.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// your code here\n\tstd::unordered_set<long> s;\n\tfor (long i : l)\
    \ {\n\t\tif (s.find(-i) != s.end()) {\n\t\t\treturn true;\n\t\t}\n\t\ts.insert(i);\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++)\
    \ {\n            if (l[i] + l[j] == 0) {\n                return true;\n     \
    \       }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    for(int i = 0; i < n; i++) {\n        int left = i + 1;\n   \
    \     int right = n - 1;\n        while(left < right) {\n            if(l[i] +\
    \ l[left] + l[right] == 0) {\n                return true;\n            }\n  \
    \          else if(l[i] + l[left] + l[right] < 0) {\n                left++;\n\
    \            }\n            else {\n                right--;\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3hch0it1: /tmp/tmp3hch0it1.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)-2, (long)1}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // your code here\n  std::unordered_set<long> s;\n  for(long i = 0;\
    \ i < l.size(); i++){\n    if(s.find(l[i]) != s.end()){\n      return true;\n\
    \    }\n    s.insert(-l[i]);\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // your code here\n  std::unordered_set<long> s;\n  for(int i=0;i<l.size();i++){\n\
    \    if(s.find(l[i])!=s.end()){\n      return true;\n    }\n    s.insert(-l[i]);\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto x:\
    \ l){\n        if(s.find(-x) != s.end()){\n            return true;\n        }\n\
    \        s.insert(x);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto x : l) {\n        if (s.find(-x)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(x);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(long i\
    \ = 0; i < l.size(); i++){\n        if(s.find(l[i]) != s.end()){\n           \
    \ return true;\n        }\n        s.insert(-l[i]);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    int n = l.size();\n    if(n<2)\n    {\n   \
    \     return false;\n    }\n    std::sort(l.begin(),l.end());\n    int i = 0;\n\
    \    int j = n-1;\n    while(i<j)\n    {\n        if(l[i]+l[j]==0)\n        {\n\
    \            return true;\n        }\n        else if(l[i]+l[j]<0)\n        {\n\
    \            i++;\n        }\n        else\n        {\n            j--;\n    \
    \    }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n       \
    \ if (l[i] + l[j] == 0) {\n            return true;\n        }\n        else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        }\n        else {\n         \
    \   j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     else{\n            s.insert(-l[i]);\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // TODO: implement this function\n  std::unordered_set<long> s;\n  for(long\
    \ i=0;i<l.size();i++){\n    if(s.find(-l[i])!=s.end()){\n      return true;\n\
    \    }\n    s.insert(l[i]);\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n       \
    \ if (l[i] + l[j] == 0) {\n            return true;\n        } else if (l[i] +\
    \ l[j] < 0) {\n            i++;\n        } else {\n            j--;\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n\
    \    for (it = l.begin(); it != l.end(); it++) {\n        for (it2 = l.begin();\
    \ it2 != l.end(); it2++) {\n            if (*it + *it2 == 0 && it != it2) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  std::unordered_set<long> s;\n  for(int i=0;i<l.size();i++){\n\
    \    if(s.find(l[i])!=s.end()){\n      return true;\n    }\n    s.insert(-l[i]);\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n       \
    \ if (l[i] + l[j] == 0) {\n            return true;\n        }\n        else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        }\n        else {\n         \
    \   j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  std::unordered_set<long> s;\n  for(int i=0;i<l.size();i++){\n\
    \    if(s.find(l[i])!=s.end()){\n      return true;\n    }\n    s.insert(-l[i]);\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    for(int i = 0; i < n; i++) {\n        int j = i + 1;\n      \
    \  int k = n - 1;\n        while(j < k) {\n            if(l[i] + l[j] + l[k] ==\
    \ 0) {\n                return true;\n            }\n            else if(l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            }\n            else\
    \ {\n                k--;\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpb14rj591: /tmp/tmpb14rj591.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)-2, (long)1}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n       \
    \ if (l[i] + l[j] == 0) {\n            return true;\n        } else if (l[i] +\
    \ l[j] < 0) {\n            i++;\n        } else {\n            j--;\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n       \
    \ if (l[i] + l[j] == 0) {\n            return true;\n        }\n        else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        }\n        else {\n         \
    \   j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  std::unordered_set<long> s;\n  for(auto i:l){\n\
    \    if(s.find(-i)!=s.end()){\n      return true;\n    }\n    s.insert(i);\n \
    \ }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::set<long> s;\n    for(long i : l){\n \
    \       if(s.find(-i) != s.end()){\n            return true;\n        }\n    \
    \    s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::set<long> s;\n    for(auto i:l){\n   \
    \     if(s.find(-i)!=s.end()){\n            return true;\n        }\n        s.insert(i);\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     else{\n            s.insert(-l[i]);\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    for(int i = 0; i < n; i++) {\n        if(l[i] > 0) {\n      \
    \      return false;\n        }\n        for(int j = i + 1; j < n; j++) {\n  \
    \          if(l[i] + l[j] == 0) {\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (std::binary_search(l.begin(), l.end(), -l[i])) {\n     \
    \       return true;\n        }\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp4n_z39d: /tmp/tmpp4n_z39d.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n       \
    \ if (l[i] + l[j] == 0) {\n            return true;\n        }\n        else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        }\n        else {\n         \
    \   j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (s.find(-l[i]) != s.end()) {\n            return true;\n     \
    \   }\n        s.insert(l[i]);\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            break;\n \
    \       }\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i]\
    \ + l[j] == 0) {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto x:\
    \ l){\n        if(s.find(-x) != s.end()){\n            return true;\n        }\n\
    \        s.insert(x);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     else{\n            s.insert(-l[i]);\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// YOUR CODE HERE\n\tstd::unordered_set<long> s;\n\tfor (auto i : l)\
    \ {\n\t\tif (s.find(-i) != s.end()) {\n\t\t\treturn true;\n\t\t}\n\t\ts.insert(i);\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n       \
    \ if (l[i] + l[j] == 0) {\n            return true;\n        } else if (l[i] +\
    \ l[j] < 0) {\n            i++;\n        } else {\n            j--;\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     else{\n            s.insert(-l[i]);\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // YOUR CODE HERE\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgy7nkwus: /tmp/tmpgy7nkwus.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (long i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (long i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  std::unordered_set<long> s;\n  for(auto i:l){\n\
    \    if(s.find(-i)!=s.end()){\n      return true;\n    }\n    s.insert(i);\n \
    \ }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    for(int i = 0; i < n; i++) {\n        int j = i + 1;\n      \
    \  int k = n - 1;\n        while(j < k) {\n            if(l[i] + l[j] + l[k] ==\
    \ 0) {\n                return true;\n            }\n            else if(l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            }\n            else\
    \ {\n                k--;\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqhxisepj: /tmp/tmpqhxisepj.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)-2, (long)1}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (std::binary_search(l.begin(), l.end(),\
    \ -l[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9a_645eu: /tmp/tmp9a_645eu.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659822867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    int n = l.size();\n    if(n<2)\n        return\
    \ false;\n    std::sort(l.begin(),l.end());\n    int i=0,j=n-1;\n    while(i<j)\n\
    \    {\n        if(l[i]+l[j]==0)\n            return true;\n        else if(l[i]+l[j]<0)\n\
    \            i++;\n        else\n            j--;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::set<long> s;\n    for(auto i:l){\n   \
    \     if(s.find(-i)!=s.end())\n            return true;\n        s.insert(i);\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (std::binary_search(l.begin(), l.end(),\
    \ -l[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9a_645eu: /tmp/tmp9a_645eu.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659822867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  std::unordered_set<long> s;\n  for(auto i : l){\n\
    \    if(s.find(-i) != s.end()){\n      return true;\n    }\n    s.insert(i);\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        if (s.find(-l[i]) != s.end()) {\n            return true;\n     \
    \   }\n        s.insert(l[i]);\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// Write your code here\n\t// To print results to the standard output\
    \ you can use std::cout\n\t// Example: std::cout << \"Hello world!\";\n\tstd::sort(l.begin(),\
    \ l.end());\n\tint i = 0;\n\tint j = l.size() - 1;\n\twhile (i < j) {\n\t\tif\
    \ (l[i] + l[j] == 0) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (l[i] + l[j] <\
    \ 0) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj--;\n\t\t}\n\t}\n\treturn false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++)\
    \ {\n            if (l[i] + l[j] == 0) {\n                return true;\n     \
    \       }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    for(int i = 0; i < n; i++) {\n        if(binary_search(l.begin()\
    \ + i + 1, l.end(), -l[i])) {\n            return true;\n        }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n\
    \  int i = 0;\n  int j = n - 1;\n  while (i < j) {\n    if (l[i] + l[j] == 0)\
    \ {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n    }\
    \ else {\n      j--;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto x:\
    \ l){\n        if(s.find(-x) != s.end()){\n            return true;\n        }\n\
    \        s.insert(x);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n       \
    \ if (l[i] + l[j] == 0) {\n            return true;\n        }\n        else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        }\n        else {\n         \
    \   j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (long i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++)\
    \ {\n            if (l[i] + l[j] == 0) {\n                return true;\n     \
    \       }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// Your code here\n\tstd::sort(l.begin(), l.end());\n\tint n = l.size();\n\
    \tfor (int i = 0; i < n; i++) {\n\t\tif (l[i] == 0) {\n\t\t\tif (i + 1 < n &&\
    \ l[i + 1] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tint\
    \ low = i + 1;\n\t\t\tint high = n - 1;\n\t\t\twhile (low <= high) {\n\t\t\t\t\
    int mid = (low + high) / 2;\n\t\t\t\tif (l[i] + l[mid] == 0) {\n\t\t\t\t\treturn\
    \ true;\n\t\t\t\t}\n\t\t\t\telse if (l[i] + l[mid] > 0) {\n\t\t\t\t\thigh = mid\
    \ - 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlow = mid + 1;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// your code here\n\tstd::sort(l.begin(), l.end());\n\tint i = 0;\n\t\
    int j = l.size() - 1;\n\twhile (i < j) {\n\t\tif (l[i] + l[j] == 0) {\n\t\t\t\
    return true;\n\t\t}\n\t\telse if (l[i] + l[j] < 0) {\n\t\t\ti++;\n\t\t}\n\t\t\
    else {\n\t\t\tj--;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto x:\
    \ l){\n        if(s.find(-x) != s.end()){\n            return true;\n        }\n\
    \        s.insert(x);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     else{\n            s.insert(-l[i]);\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822870
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(long i\
    \ : l){\n        if(s.find(-i) != s.end()){\n            return true;\n      \
    \  }\n        s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// your code here\n\tstd::sort(l.begin(), l.end());\n\tint i = 0;\n\t\
    int j = l.size() - 1;\n\twhile (i < j) {\n\t\tif (l[i] + l[j] == 0) {\n\t\t\t\
    return true;\n\t\t}\n\t\telse if (l[i] + l[j] < 0) {\n\t\t\ti++;\n\t\t}\n\t\t\
    else {\n\t\t\tj--;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822867
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (std::binary_search(l.begin(), l.end(),\
    \ -l[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpb5w9pvt1: /tmp/tmpb5w9pvt1.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(long i\
    \ = 0; i < l.size(); i++){\n        if(s.find(-l[i]) != s.end()){\n          \
    \  return true;\n        }\n        s.insert(l[i]);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // TODO: implement this function\n    std::unordered_set<long> s;\n\
    \    for(int i=0;i<l.size();i++){\n        if(s.find(-l[i])!=s.end()){\n     \
    \       return true;\n        }\n        s.insert(l[i]);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // TODO: implement this function.\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (std::binary_search(l.begin(),\
    \ l.end(), -l[i])) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpakt50v0j: /tmp/tmpakt50v0j.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // TODO: implement this function\n  std::sort(l.begin(), l.end());\n\
    \  int i = 0;\n  int j = l.size() - 1;\n  while (i < j) {\n    if (l[i] + l[j]\
    \ == 0) {\n      return true;\n    } else if (l[i] + l[j] < 0) {\n      i++;\n\
    \    } else {\n      j--;\n    }\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822872
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int n =\
    \ l.size();\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j <\
    \ n; j++) {\n            if(l[i] + l[j] == 0) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822873
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto i:l){\n\
    \        if(s.find(-i)!=s.end()){\n            return true;\n        }\n     \
    \   s.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822868
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return\
    \ true;\n        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else\
    \ {\n            j--;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822873
