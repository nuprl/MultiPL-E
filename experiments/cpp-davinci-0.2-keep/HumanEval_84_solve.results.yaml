name: HumanEval_84_solve
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp8258weit: /tmp/tmp8258weit.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string binary\
    \ = \"\";\n    while(N > 0) {\n        binary += std::to_string(N % 2);\n    \
    \    N /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpzbez_nc9: /tmp/tmpzbez_nc9.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N != 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpr3apgksd: /tmp/tmpr3apgksd.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpbr78s2ma: /tmp/tmpbr78s2ma.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string bin;\n\
    \    while(N)\n    {\n        bin += std::to_string(N%2);\n        N /= 2;\n \
    \   }\n    std::reverse(bin.begin(), bin.end());\n    return bin;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n\
    \    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"\
    1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpx5hcz3nu: /tmp/tmpx5hcz3nu.cpp:26: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    int sum = 0;\n\
    \    while (N > 0) {\n        int rem = N % 2;\n        binary = std::to_string(rem)\
    \ + binary;\n        sum += rem;\n        N /= 2;\n    }\n    return std::to_string(sum);\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) ==\
    \ (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpt6qcod1h: /tmp/tmpt6qcod1h.cpp:26: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpxf86v8wx: /tmp/tmpxf86v8wx.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpnh3lcreu: /tmp/tmpnh3lcreu.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmptv82q95m: /tmp/tmptv82q95m.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmph0jdhv1u: /tmp/tmph0jdhv1u.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary = std::to_string(N % 2) + binary;\n        N /= 2;\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp33ay9cv5: /tmp/tmp33ay9cv5.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpul33an8h: /tmp/tmpul33an8h.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string binary\
    \ = \"\";\n    while(N > 0) {\n        binary += std::to_string(N % 2);\n    \
    \    N /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpdoz1v5d9: /tmp/tmpdoz1v5d9.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), (N % 2) + '0');\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpw2lm3k87: /tmp/tmpw2lm3k87.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpv48cvlbj: /tmp/tmpv48cvlbj.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string str;\n    while(N>0){\n        str.push_back(N%2+'0');\n\
    \        N/=2;\n    }\n    std::reverse(str.begin(),str.end());\n    return str;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) ==\
    \ (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp9ta5a45r: /tmp/tmp9ta5a45r.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    int sum = 0;\n    while\
    \ (N > 0) {\n        sum += N % 2;\n        N /= 2;\n    }\n    result = std::to_string(sum);\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpf6mkhvbg: /tmp/tmpf6mkhvbg.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n  std::string result;\n  while (N > 0) {\n    result\
    \ = std::to_string(N % 2) + result;\n    N /= 2;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"\
    ));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) ==\
    \ (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp6d11uwlu: /tmp/tmp6d11uwlu.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp4606m_pc: /tmp/tmp4606m_pc.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmphzxyji1_: /tmp/tmphzxyji1_.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string str = \"\";\n    while(N > 0) {\n\
    \        str = std::to_string(N % 2) + str;\n        N /= 2;\n    }\n    return\
    \ str;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpfwlahecw: /tmp/tmpfwlahecw.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    int sum = 0;\n    while\
    \ (N > 0) {\n        sum += N % 2;\n        N /= 2;\n    }\n    result = std::to_string(sum);\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpwno300od: /tmp/tmpwno300od.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpcvkd2wxb: /tmp/tmpcvkd2wxb.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpyhajdd5e: /tmp/tmpyhajdd5e.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary = std::to_string(N % 2) + binary;\n        N /= 2;\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpzxbptu4w: /tmp/tmpzxbptu4w.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmphj7v5ywy: /tmp/tmphj7v5ywy.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary = std::to_string(N % 2) + binary;\n        N /= 2;\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpmjygukp0: /tmp/tmpmjygukp0.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N = N / 2;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpp49lrqno: /tmp/tmpp49lrqno.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpiox3g77a: /tmp/tmpiox3g77a.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpsrr17f45: /tmp/tmpsrr17f45.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp2z36kag_: /tmp/tmp2z36kag_.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpy6rz1nfu: /tmp/tmpy6rz1nfu.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp4x6lca28: /tmp/tmp4x6lca28.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp6bn2qs1t: /tmp/tmp6bn2qs1t.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string s = \"\";\n    while(N > 0) {\n \
    \       s += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"\
    ));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp33vj_5i6: /tmp/tmp33vj_5i6.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N = N / 2;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpqr_jysx_: /tmp/tmpqr_jysx_.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpz6ljoo3t: /tmp/tmpz6ljoo3t.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary;\n    int sum = 0;\n    while\
    \ (N > 0) {\n        int rem = N % 2;\n        sum += rem;\n        binary.push_back(rem\
    \ + '0');\n        N /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n\
    \    return std::to_string(sum);\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpvx3rn_t2: /tmp/tmpvx3rn_t2.cpp:27: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpovwd9hn1: /tmp/tmpovwd9hn1.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string bin = \"\";\n    int sum = 0;\n \
    \   while (N > 0) {\n        bin = std::to_string(N % 2) + bin;\n        sum +=\
    \ N % 2;\n        N /= 2;\n    }\n    return std::to_string(sum);\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n\
    \    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"\
    1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmppaqh6z0d: /tmp/tmppaqh6z0d.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string result;\n\
    \    while(N) {\n        result += std::to_string(N % 2);\n        N /= 2;\n \
    \   }\n    std::reverse(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"\
    1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpfxy40y9i: /tmp/tmpfxy40y9i.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string binary\
    \ = \"\";\n    while(N > 0) {\n        binary += std::to_string(N % 2);\n    \
    \    N /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp5d6gaw8b: /tmp/tmp5d6gaw8b.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpkmwydv7j: /tmp/tmpkmwydv7j.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpfp4qte1q: /tmp/tmpfp4qte1q.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    int sum = 0;\n\
    \    while (N > 0) {\n        int rem = N % 2;\n        sum += rem;\n        binary\
    \ = std::to_string(rem) + binary;\n        N /= 2;\n    }\n    return std::to_string(sum);\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) ==\
    \ (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp2az6rb2z: /tmp/tmp2az6rb2z.cpp:26: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpkfa1d2mc: /tmp/tmpkfa1d2mc.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpqmg_ngb2: /tmp/tmpqmg_ngb2.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string binary\
    \ = \"\";\n    int sum = 0;\n    while(N > 0){\n        int rem = N % 2;\n   \
    \     sum += rem;\n        binary = std::to_string(rem) + binary;\n        N /=\
    \ 2;\n    }\n    return std::to_string(sum);\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150))\
    \ == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp9ga5jroi: /tmp/tmp9ga5jroi.cpp:27: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    int sum = 0;\n    std::string binary = \"\";\n\
    \    while(N > 0) {\n        sum += N % 2;\n        binary += std::to_string(N\
    \ % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n\
    \    return std::to_string(sum);\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpgv6dspfs: /tmp/tmpgv6dspfs.cpp:26: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpc3fpm9ju: /tmp/tmpc3fpm9ju.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    int sum = 0;\n\
    \    while (N > 0) {\n        int remainder = N % 2;\n        sum += remainder;\n\
    \        binary = std::to_string(remainder) + binary;\n        N /= 2;\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpeldw92_0: /tmp/tmpeldw92_0.cpp:26: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpflt7ui7y: /tmp/tmpflt7ui7y.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpkpr2b9at: /tmp/tmpkpr2b9at.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string s;\n    while(N) {\n        s +=\
    \ std::to_string(N%2);\n        N /= 2;\n    }\n    std::reverse(s.begin(), s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpm6o8s4ju: /tmp/tmpm6o8s4ju.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp9ha2o3uq: /tmp/tmp9ha2o3uq.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmptj_orx64: /tmp/tmptj_orx64.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp00czcfrg: /tmp/tmp00czcfrg.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpw39jpa1p: /tmp/tmpw39jpa1p.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = (N % 2 == 0 ? \"0\" : \"1\") + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpzgwnb2xk: /tmp/tmpzgwnb2xk.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp7jjrtneg: /tmp/tmp7jjrtneg.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N & 1));\n        N >>= 1;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpr9hl3eys: /tmp/tmpr9hl3eys.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpky7ays1g: /tmp/tmpky7ays1g.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpjylepqnd: /tmp/tmpjylepqnd.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpz6z5mg0d: /tmp/tmpz6z5mg0d.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary = std::to_string(N % 2) + binary;\n        N /= 2;\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpwbf3i9nf: /tmp/tmpwbf3i9nf.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary = std::to_string(N % 2) + binary;\n        N /= 2;\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpeo7fus9e: /tmp/tmpeo7fus9e.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string str\
    \ = \"\";\n    while(N > 0) {\n        str += std::to_string(N % 2);\n       \
    \ N /= 2;\n    }\n    std::reverse(str.begin(), str.end());\n    return str;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) ==\
    \ (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpy1qm55fo: /tmp/tmpy1qm55fo.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string binary\
    \ = \"\";\n    while(N > 0) {\n        binary += std::to_string(N % 2);\n    \
    \    N /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpreapb40b: /tmp/tmpreapb40b.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary = std::to_string(N % 2) + binary;\n        N /= 2;\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpvzy8o3lu: /tmp/tmpvzy8o3lu.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    int sum = 0;\n \
    \   std::string result = \"\";\n    while(N > 0) {\n        sum += N % 2;\n  \
    \      N /= 2;\n    }\n    result = std::to_string(sum);\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) ==\
    \ (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp9wqbvb5v: /tmp/tmp9wqbvb5v.cpp:26: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string binary\
    \ = \"\";\n    while(N > 0) {\n        binary = std::to_string(N % 2) + binary;\n\
    \        N /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150))\
    \ == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmprpsp3j_j: /tmp/tmprpsp3j_j.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpblvea7xe: /tmp/tmpblvea7xe.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp4p2i2rej: /tmp/tmp4p2i2rej.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N & 1));\n        N >>= 1;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp93b7ba9m: /tmp/tmp93b7ba9m.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp1ip1n62c: /tmp/tmp1ip1n62c.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), (N % 2) + '0');\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpxkxqmrhd: /tmp/tmpxkxqmrhd.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp2xaxh188: /tmp/tmp2xaxh188.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpqkjyv6uj: /tmp/tmpqkjyv6uj.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary;\n    while(N > 0) {\n   \
    \     binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpxbmczrfv: /tmp/tmpxbmczrfv.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmph4d_qy08: /tmp/tmph4d_qy08.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string s = \"\";\n    while(N > 0) {\n \
    \       s += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"\
    ));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpytx1hhkc: /tmp/tmpytx1hhkc.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n  std::string result;\n  while (N > 0) {\n    result.push_back(N\
    \ % 2 + '0');\n    N /= 2;\n  }\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpxm_o778g: /tmp/tmpxm_o778g.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), (N % 2) + '0');\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpv8qlnyxu: /tmp/tmpv8qlnyxu.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::stringstream ss;\n    while(N > 0) {\n \
    \       ss << N % 2;\n        N /= 2;\n    }\n    std::string s = ss.str();\n\
    \    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150))\
    \ == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpiimxkvj9: /tmp/tmpiimxkvj9.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmprmvq8j0k: /tmp/tmprmvq8j0k.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp1_15j2r9: /tmp/tmp1_15j2r9.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N) {\n      \
    \  result.push_back(N % 2 + '0');\n        N /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp_ju1uk2f: /tmp/tmp_ju1uk2f.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp_aj_xncj: /tmp/tmp_aj_xncj.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string result;\n\
    \    while(N > 0) {\n        result += std::to_string(N % 2);\n        N /= 2;\n\
    \    }\n    std::reverse(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) ==\
    \ (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp_zsw9p2g: /tmp/tmp_zsw9p2g.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpfhy6hqeq: /tmp/tmpfhy6hqeq.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpx0we7uho: /tmp/tmpx0we7uho.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    int sum = 0;\n\
    \    while (N > 0) {\n        int rem = N % 2;\n        sum += rem;\n        binary\
    \ = std::to_string(rem) + binary;\n        N /= 2;\n    }\n    return std::to_string(sum);\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) ==\
    \ (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp5ewnb2vi: /tmp/tmp5ewnb2vi.cpp:26: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    int sum = 0;\n    while\
    \ (N > 0) {\n        sum += N % 2;\n        N /= 2;\n    }\n    result = std::to_string(sum);\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp7vduk86_: /tmp/tmp7vduk86_.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    int sum = 0;\n    while\
    \ (N > 0) {\n        sum += N % 2;\n        N /= 2;\n    }\n    result = std::to_string(sum);\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp406zc8e3: /tmp/tmp406zc8e3.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpeoqa2_je: /tmp/tmpeoqa2_je.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string str;\n\
    \    while(N>0){\n        if(N%2==0){\n            str.push_back('0');\n     \
    \   }\n        else{\n            str.push_back('1');\n        }\n        N/=2;\n\
    \    }\n    std::reverse(str.begin(),str.end());\n    return str;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n\
    \    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"\
    1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpchv20ztg: /tmp/tmpchv20ztg.cpp:30: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp6vgp5rxt: /tmp/tmp6vgp5rxt.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp1hoyg502: /tmp/tmp1hoyg502.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    std::string binary\
    \ = \"\";\n    int sum = 0;\n    while (N > 0) {\n        binary += std::to_string(N\
    \ % 2);\n        N /= 2;\n    }\n    for (int i = 0; i < binary.length(); i++)\
    \ {\n        sum += binary[i] - '0';\n    }\n    result = std::to_string(sum);\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpnxx5p6xl: /tmp/tmpnxx5p6xl.cpp:29: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    int sum = 0;\n \
    \   std::string binary = \"\";\n    while(N != 0){\n        int rem = N % 2;\n\
    \        sum += rem;\n        binary = std::to_string(rem) + binary;\n       \
    \ N /= 2;\n    }\n    return std::to_string(sum);\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150))\
    \ == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp5_o9axw4: /tmp/tmp5_o9axw4.cpp:27: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp35yd7d1_: /tmp/tmp35yd7d1_.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N = N / 2;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpul4yr4hf: /tmp/tmpul4yr4hf.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary = std::to_string(N % 2) + binary;\n        N /= 2;\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp9nk_2d6j: /tmp/tmp9nk_2d6j.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string s = \"\";\n    while(N > 0) {\n \
    \       s += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"\
    ));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp0607xewq: /tmp/tmp0607xewq.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmprbp9gajq: /tmp/tmprbp9gajq.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpsb7o_aoq: /tmp/tmpsb7o_aoq.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string s;\n    while(N) {\n        s +=\
    \ (N%2) + '0';\n        N /= 2;\n    }\n    std::reverse(s.begin(), s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp49xuqydt: /tmp/tmp49xuqydt.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string s = \"\";\n    while(N > 0) {\n \
    \       s += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"\
    ));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp5pyu7cao: /tmp/tmp5pyu7cao.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), (N % 2) + '0');\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpdwkhqmc6: /tmp/tmpdwkhqmc6.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n  std::string binary;\n  while (N > 0) {\n    binary\
    \ += std::to_string(N % 2);\n    N /= 2;\n  }\n  return binary;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n\
    \    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"\
    1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpmb7gt3d4: /tmp/tmpmb7gt3d4.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary = std::to_string(N % 2) + binary;\n        N /= 2;\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmplk7j3c93: /tmp/tmplk7j3c93.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n  std::string result;\n  while (N > 0) {\n    result\
    \ = std::to_string(N % 2) + result;\n    N /= 2;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"\
    ));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) ==\
    \ (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpu1uvay4x: /tmp/tmpu1uvay4x.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary;\n    while(N>0){\n      \
    \  binary.push_back(N%2+'0');\n        N/=2;\n    }\n    std::reverse(binary.begin(),binary.end());\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp94koxo7n: /tmp/tmp94koxo7n.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary;\n    while(N > 0) {\n   \
    \     binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpf1vjqajf: /tmp/tmpf1vjqajf.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpcit0cul5: /tmp/tmpcit0cul5.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N & 1));\n        N >>= 1;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmppye4_v71: /tmp/tmppye4_v71.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string s = \"\";\n    while(N>0){\n    \
    \    s = std::to_string(N%2) + s;\n        N /= 2;\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"\
    1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp72jhr5th: /tmp/tmp72jhr5th.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary;\n    int sum = 0;\n    while\
    \ (N > 0) {\n        int remainder = N % 2;\n        sum += remainder;\n     \
    \   binary = std::to_string(remainder) + binary;\n        N /= 2;\n    }\n   \
    \ return std::to_string(sum);\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpp3pd8jms: /tmp/tmpp3pd8jms.cpp:26: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary;\n    while(N > 0) {\n   \
    \     binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpu0nws1ag: /tmp/tmpu0nws1ag.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpoja9m9cb: /tmp/tmpoja9m9cb.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpqzvy5uhv: /tmp/tmpqzvy5uhv.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpwe7fs4q_: /tmp/tmpwe7fs4q_.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary;\n    while(N>0){\n      \
    \  binary.push_back(N%2+'0');\n        N/=2;\n    }\n    std::reverse(binary.begin(),binary.end());\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpucv6emn4: /tmp/tmpucv6emn4.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp78n9astl: /tmp/tmp78n9astl.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpefazqmrc: /tmp/tmpefazqmrc.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string result;\n\
    \    while(N>0){\n        result.push_back(N%2+'0');\n        N/=2;\n    }\n \
    \   std::reverse(result.begin(),result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n\
    \    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"\
    1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp_o7aucll: /tmp/tmp_o7aucll.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string result;\n\
    \    while(N>0){\n        result.push_back(N%2+'0');\n        N/=2;\n    }\n \
    \   std::reverse(result.begin(),result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n\
    \    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"\
    1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp8v9euin0: /tmp/tmp8v9euin0.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp5ql3kaxk: /tmp/tmp5ql3kaxk.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpt5p22jq0: /tmp/tmpt5p22jq0.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), (N % 2) + '0');\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpuaebfylu: /tmp/tmpuaebfylu.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp5o9ldf_s: /tmp/tmp5o9ldf_s.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), (N % 2) + '0');\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp80h4dwnb: /tmp/tmp80h4dwnb.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N != 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpjooq7j4g: /tmp/tmpjooq7j4g.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), (N % 2) + '0');\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpr15p2wiz: /tmp/tmpr15p2wiz.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmphm638904: /tmp/tmphm638904.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n  std::string binary = \"\";\n  while (N > 0) {\n\
    \    binary += std::to_string(N % 2);\n    N /= 2;\n  }\n  std::reverse(binary.begin(),\
    \ binary.end());\n  return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpntoxmpev: /tmp/tmpntoxmpev.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary = std::to_string(N % 2) + binary;\n        N = N / 2;\n  \
    \  }\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp350_g2e9: /tmp/tmp350_g2e9.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpj3h39aay: /tmp/tmpj3h39aay.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    int sum = 0;\n\
    \    while (N > 0) {\n        int rem = N % 2;\n        sum += rem;\n        binary\
    \ = std::to_string(rem) + binary;\n        N /= 2;\n    }\n    return std::to_string(sum);\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) ==\
    \ (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp06_6ksbt: /tmp/tmp06_6ksbt.cpp:26: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string binary\
    \ = \"\";\n    int sum = 0;\n    while(N > 0){\n        int rem = N % 2;\n   \
    \     sum += rem;\n        binary = std::to_string(rem) + binary;\n        N /=\
    \ 2;\n    }\n    return std::to_string(sum);\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150))\
    \ == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpobafnuez: /tmp/tmpobafnuez.cpp:27: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpt2bc38si: /tmp/tmpt2bc38si.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpd0z06ny9: /tmp/tmpd0z06ny9.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N & 1));\n        N >>= 1;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp9o_oywti: /tmp/tmp9o_oywti.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), (N % 2) + '0');\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpkrb2p6ix: /tmp/tmpkrb2p6ix.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string s = \"\";\n    while(N > 0) {\n \
    \       s += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"\
    ));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpegaicmfv: /tmp/tmpegaicmfv.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpttror3ad: /tmp/tmpttror3ad.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::stringstream ss;\n    while(N) {\n     \
    \   ss << N % 2;\n        N /= 2;\n    }\n    std::string s = ss.str();\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"\
    ));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpplcdahu9: /tmp/tmpplcdahu9.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string binary\
    \ = \"\";\n    int sum = 0;\n    while(N > 0){\n        int rem = N % 2;\n   \
    \     sum += rem;\n        binary = std::to_string(rem) + binary;\n        N /=\
    \ 2;\n    }\n    return std::to_string(sum);\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150))\
    \ == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp3dpdzjd_: /tmp/tmp3dpdzjd_.cpp:27: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    std::string binary =\
    \ \"\";\n    int sum = 0;\n    while (N > 0) {\n        binary += std::to_string(N\
    \ % 2);\n        N /= 2;\n    }\n    for (int i = 0; i < binary.length(); i++)\
    \ {\n        sum += binary[i] - '0';\n    }\n    result = std::to_string(sum);\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmptsjdsfl9: /tmp/tmptsjdsfl9.cpp:29: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    int sum = 0;\n\
    \    while (N > 0) {\n        int remainder = N % 2;\n        sum += remainder;\n\
    \        binary = std::to_string(remainder) + binary;\n        N /= 2;\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmptl_mvboh: /tmp/tmptl_mvboh.cpp:26: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string binary\
    \ = \"\";\n    while(N > 0) {\n        binary += std::to_string(N % 2);\n    \
    \    N /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp0aiocsk9: /tmp/tmp0aiocsk9.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), (N % 2) + '0');\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmphow_uw71: /tmp/tmphow_uw71.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string s =\
    \ \"\";\n    while(N > 0) {\n        s += std::to_string(N % 2);\n        N /=\
    \ 2;\n    }\n    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n\
    \    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"\
    1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpelpxt2x1: /tmp/tmpelpxt2x1.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = (N % 2 == 0 ? \"0\" : \"1\") + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpdpi0wrgu: /tmp/tmpdpi0wrgu.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpeqp706bz: /tmp/tmpeqp706bz.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpfm10q5fn: /tmp/tmpfm10q5fn.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), (N % 2) + '0');\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp8z_3z0ih: /tmp/tmp8z_3z0ih.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::stringstream ss;\n    while(N != 0) {\n\
    \        ss << N % 2;\n        N /= 2;\n    }\n    std::string s = ss.str();\n\
    \    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150))\
    \ == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmppantw6i9: /tmp/tmppantw6i9.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string s;\n\
    \    while(N)\n    {\n        s.push_back(N%2+'0');\n        N/=2;\n    }\n  \
    \  std::reverse(s.begin(),s.end());\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150))\
    \ == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmppqthtnfw: /tmp/tmppqthtnfw.cpp:26: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpyb1rgpym: /tmp/tmpyb1rgpym.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpkh_j0ked: /tmp/tmpkh_j0ked.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpi_21rzz_: /tmp/tmpi_21rzz_.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpm_eqyf7k: /tmp/tmpm_eqyf7k.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp4iooa6x6: /tmp/tmp4iooa6x6.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpen5dk1yi: /tmp/tmpen5dk1yi.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpr69omfw_: /tmp/tmpr69omfw_.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    int sum = 0;\n    while\
    \ (N > 0) {\n        sum += N % 2;\n        N /= 2;\n    }\n    result = std::to_string(sum);\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp_ti6m0jm: /tmp/tmp_ti6m0jm.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N) {\n      \
    \  result += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpblg4ww9o: /tmp/tmpblg4ww9o.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string result;\n\
    \    while(N>0){\n        result.insert(result.begin(),(N%2)+'0');\n        N/=2;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"\
    ));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp6pf5nqbn: /tmp/tmp6pf5nqbn.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string binary\
    \ = \"\";\n    while(N > 0) {\n        binary = std::to_string(N % 2) + binary;\n\
    \        N /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150))\
    \ == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp30puwa8v: /tmp/tmp30puwa8v.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    string s = \"\";\n    while(N > 0) {\n      \
    \  s += to_string(N % 2);\n        N /= 2;\n    }\n    reverse(s.begin(), s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzhznht8_.cpp: In function \u2018std::string solve(long int)\u2019\
    :\n/tmp/tmpzhznht8_.cpp:14:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   14 |     string s = \"\";\n      |     ^~~~~~\n/tmp/tmpzhznht8_.cpp:14:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/11/iosfwd:39,\n\
    \                 from /usr/include/c++/11/ios:38,\n                 from /usr/include/c++/11/istream:38,\n\
    \                 from /usr/include/c++/11/sstream:38,\n                 from\
    \ /usr/include/c++/11/complex:45,\n                 from /usr/include/c++/11/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzhznht8_.cpp:2:\n/usr/include/c++/11/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/11/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/11/bits/ios_base.h:41,\n             \
    \    from /usr/include/c++/11/ios:42,\n                 from /usr/include/c++/11/istream:38,\n\
    \                 from /usr/include/c++/11/sstream:38,\n                 from\
    \ /usr/include/c++/11/complex:45,\n                 from /usr/include/c++/11/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzhznht8_.cpp:2:\n/usr/include/c++/11/string:67:11:\
    \ note:   \u2018std::pmr::string\u2019\n   67 |     using string    = basic_string<char>;\n\
    \      |           ^~~~~~\n/tmp/tmpzhznht8_.cpp:16:9: error: \u2018s\u2019 was\
    \ not declared in this scope\n   16 |         s += to_string(N % 2);\n      |\
    \         ^\n/tmp/tmpzhznht8_.cpp:16:14: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   16 |         s += to_string(N % 2);\n      |              ^~~~~~~~~\n    \
    \  |              std::__cxx11::to_string\nIn file included from /usr/include/c++/11/string:55,\n\
    \                 from /usr/include/c++/11/bits/locale_classes.h:40,\n       \
    \          from /usr/include/c++/11/bits/ios_base.h:41,\n   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string s = \"\";\n    while(N) {\n     \
    \   s = std::to_string(N % 2) + s;\n        N /= 2;\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"\
    1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpi5jumo10: /tmp/tmpi5jumo10.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpspdclosi: /tmp/tmpspdclosi.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpc5556t_c: /tmp/tmpc5556t_c.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary;\n    int sum = 0;\n    while\
    \ (N > 0) {\n        int rem = N % 2;\n        sum += rem;\n        binary +=\
    \ std::to_string(rem);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return std::to_string(sum);\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150))\
    \ == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpcu87np23: /tmp/tmpcu87np23.cpp:27: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string s =\
    \ \"\";\n    while(N){\n        s = std::to_string(N%2) + s;\n        N /= 2;\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmppv51cxj4: /tmp/tmppv51cxj4.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string result\
    \ = \"\";\n    while(N>0){\n        result = std::to_string(N%2) + result;\n \
    \       N = N/2;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150))\
    \ == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpnhyvg02p: /tmp/tmpnhyvg02p.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpq_z9nqhq: /tmp/tmpq_z9nqhq.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary_number;\n    while(N > 0)\
    \ {\n        binary_number.push_back((N % 2) + '0');\n        N /= 2;\n    }\n\
    \    std::reverse(binary_number.begin(), binary_number.end());\n    return binary_number;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) ==\
    \ (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpw40jau6q: /tmp/tmpw40jau6q.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary = std::to_string(N % 2) + binary;\n        N /= 2;\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpo5wjeqef: /tmp/tmpo5wjeqef.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary_number;\n    while(N > 0)\
    \ {\n        if(N % 2 == 0) {\n            binary_number += \"0\";\n        }\
    \ else {\n            binary_number += \"1\";\n        }\n        N /= 2;\n  \
    \  }\n    std::reverse(binary_number.begin(), binary_number.end());\n    return\
    \ binary_number;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpaamcobgt: /tmp/tmpaamcobgt.cpp:28: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    int sum = 0;\n    while\
    \ (N > 0) {\n        int remainder = N % 2;\n        sum += remainder;\n     \
    \   result.push_back(remainder + '0');\n        N /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpngnyalpm: /tmp/tmpngnyalpm.cpp:27: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpy_x1o5qd: /tmp/tmpy_x1o5qd.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string binary\
    \ = \"\";\n    while(N > 0) {\n        binary += std::to_string(N % 2);\n    \
    \    N /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpsqpapjw8: /tmp/tmpsqpapjw8.cpp:25: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpxpaklsvr: /tmp/tmpxpaklsvr.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpzwu1gswq: /tmp/tmpzwu1gswq.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result = \"\";\n    while (N > 0)\
    \ {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpo7z38w04: /tmp/tmpo7z38w04.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmp4qps6q3o: /tmp/tmp4qps6q3o.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpm1n0f9ek: /tmp/tmpm1n0f9ek.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpr4ddzbxh: /tmp/tmpr4ddzbxh.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpnd65uffc: /tmp/tmpnd65uffc.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpfm6yu5m5: /tmp/tmpfm6yu5m5.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary = std::to_string(N % 2) + binary;\n        N /= 2;\n    }\n\
    \    return binary;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpasxzuutr: /tmp/tmpasxzuutr.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N) {\n      \
    \  result += (N % 2) + '0';\n        N /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpc6q7152e: /tmp/tmpc6q7152e.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpyjwn68wr: /tmp/tmpyjwn68wr.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    // Write your code here\n    std::string binary\
    \ = \"\";\n    int sum = 0;\n    while(N > 0){\n        int rem = N % 2;\n   \
    \     sum += rem;\n        binary = std::to_string(rem) + binary;\n        N /=\
    \ 2;\n    }\n    return std::to_string(sum);\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150))\
    \ == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpa6mb1ew0: /tmp/tmpa6mb1ew0.cpp:27: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string result;\n    while (N > 0) {\n  \
    \      result.insert(result.begin(), '0' + (N % 2));\n        N /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
    \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
    \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
    \ == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpwb_84r7u: /tmp/tmpwb_84r7u.cpp:23: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpb1usfkwp: /tmp/tmpb1usfkwp.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpvanz215j: /tmp/tmpvanz215j.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ N, return the total sum of its digits in binary.\n// Example\n// For N = 1000,\
    \ the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum\
    \ of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n\
    // Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\n\
    std::string solve(long N) {\n    std::string binary = \"\";\n    while(N > 0)\
    \ {\n        binary += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"\
    110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333))\
    \ == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n"
  stdout: ''
  stderr: "tmpolmtadnc: /tmp/tmpolmtadnc.cpp:24: int main(): Assertion `candidate((1000))\
    \ == (\"1\")' failed.\n"
  exit_code: -6
  status: Exception
