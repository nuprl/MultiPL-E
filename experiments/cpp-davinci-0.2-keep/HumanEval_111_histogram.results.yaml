name: HumanEval_111_histogram
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n\tstd::map<std::string, long> result;\n\tstd::stringstream ss(test);\n\
    \tstd::string word;\n\twhile (ss >> word) {\n\t\tresult[word]++;\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp0bfyeywo: /tmp/tmp0bfyeywo.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpg75j_whe: /tmp/tmpg75j_whe.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp2hxntsle: /tmp/tmp2hxntsle.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpdog6airy: /tmp/tmpdog6airy.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp4pdo9q24: /tmp/tmp4pdo9q24.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp7ep95kve: /tmp/tmp7ep95kve.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpb5ipemr4: /tmp/tmpb5ipemr4.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp04oho7bs: /tmp/tmp04oho7bs.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> hist;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n    }\n\
    \    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp0tfswmy_: /tmp/tmp0tfswmy_.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpgnt66n4y: /tmp/tmpgnt66n4y.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpd_rdvgph: /tmp/tmpd_rdvgph.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmprs7g6q96: /tmp/tmprs7g6q96.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpifyq15lt: /tmp/tmpifyq15lt.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp813ry3qg: /tmp/tmp813ry3qg.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpdl7h1jjn: /tmp/tmpdl7h1jjn.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpf_x38go7: /tmp/tmpf_x38go7.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpl6k0rfm1: /tmp/tmpl6k0rfm1.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string item;\n  while (std::getline(ss, item, ' ')) {\n    if (result.find(item)\
    \ == result.end()) {\n      result[item] = 1;\n    } else {\n      result[item]\
    \ += 1;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp9ryespsy: /tmp/tmp9ryespsy.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp8eok37nx: /tmp/tmp8eok37nx.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp7i5cpos6: /tmp/tmp7i5cpos6.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp3r7g6jzx: /tmp/tmp3r7g6jzx.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp0cc5k38s: /tmp/tmp0cc5k38s.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp1v_rjifz: /tmp/tmp1v_rjifz.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpxpn7nwfr: /tmp/tmpxpn7nwfr.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp1xc22kqo: /tmp/tmp1xc22kqo.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpku7br9po: /tmp/tmpku7br9po.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp61cfdh7x: /tmp/tmp61cfdh7x.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (result.find(word)\
    \ == result.end()) {\n            result[word] = 1;\n        } else {\n      \
    \      result[word] += 1;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpunv44_9x: /tmp/tmpunv44_9x.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmplk0ckulh: /tmp/tmplk0ckulh.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpf_gsif5_: /tmp/tmpf_gsif5_.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpqe0jzjv5: /tmp/tmpqe0jzjv5.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpe2w2wgsz: /tmp/tmpe2w2wgsz.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpafjk0rtx: /tmp/tmpafjk0rtx.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item] += 1;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpbq1p62_x: /tmp/tmpbq1p62_x.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpffr5f1pr: /tmp/tmpffr5f1pr.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpx8agqnql: /tmp/tmpx8agqnql.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp9wl4g_du: /tmp/tmp9wl4g_du.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> dict;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (dict.find(item) == dict.end()) {\n            dict[item] = 1;\n        } else\
    \ {\n            dict[item] += 1;\n        }\n    }\n    return dict;\n}\nint\
    \ main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\"\
    )) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpal9nfffe: /tmp/tmpal9nfffe.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpsh61c1xm: /tmp/tmpsh61c1xm.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpknav_o3o: /tmp/tmpknav_o3o.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp81s2kn6z: /tmp/tmp81s2kn6z.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    if (test.length() == 0)\
    \ {\n        return result;\n    }\n    std::stringstream ss(test);\n    std::string\
    \ word;\n    while (ss >> word) {\n        result[word]++;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpby31f4z5: /tmp/tmpby31f4z5.cpp:27: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpk5ndngi_: /tmp/tmpk5ndngi_.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmph1ovjux2: /tmp/tmph1ovjux2.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpwrp6ibui: /tmp/tmpwrp6ibui.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item] += 1;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmplu18tqxh: /tmp/tmplu18tqxh.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpmm2r8v8w: /tmp/tmpmm2r8v8w.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmph3w3t99n: /tmp/tmph3w3t99n.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp7f_bs_x6: /tmp/tmp7f_bs_x6.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpzh6ak42u: /tmp/tmpzh6ak42u.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item] += 1;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmprefvtyp0: /tmp/tmprefvtyp0.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpgq6qt9mk: /tmp/tmpgq6qt9mk.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp394h0c1i: /tmp/tmp394h0c1i.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpqc6fapv0: /tmp/tmpqc6fapv0.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpo49a2waj: /tmp/tmpo49a2waj.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> hist;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n    }\n\
    \    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpi_tye4hm: /tmp/tmpi_tye4hm.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp_73bytdw: /tmp/tmp_73bytdw.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpd2kottyy: /tmp/tmpd2kottyy.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpzzw4styy: /tmp/tmpzzw4styy.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpltkfsqmp: /tmp/tmpltkfsqmp.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpts731t3m: /tmp/tmpts731t3m.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp99l0oc5_: /tmp/tmp99l0oc5_.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> hist;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n    }\n\
    \    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpjb5qmbbw: /tmp/tmpjb5qmbbw.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp5s40dna5: /tmp/tmp5s40dna5.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpsecst713: /tmp/tmpsecst713.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp5m02lyz_: /tmp/tmp5m02lyz_.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpu0yayipb: /tmp/tmpu0yayipb.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp7f6lprup: /tmp/tmp7f6lprup.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpe_r9dsaa: /tmp/tmpe_r9dsaa.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp0av112h2: /tmp/tmp0av112h2.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpvk8injrm: /tmp/tmpvk8injrm.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmputfu77bh: /tmp/tmputfu77bh.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpt7rr5vqn: /tmp/tmpt7rr5vqn.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpvhll69oe: /tmp/tmpvhll69oe.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpf6b3it45: /tmp/tmpf6b3it45.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpsgdghy8l: /tmp/tmpsgdghy8l.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpma1zh64b: /tmp/tmpma1zh64b.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> hist;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n    }\n\
    \    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp3ugxj9r4: /tmp/tmp3ugxj9r4.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp3jr0kxm4: /tmp/tmp3jr0kxm4.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpxnji_15h: /tmp/tmpxnji_15h.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpi5cfz69c: /tmp/tmpi5cfz69c.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item] += 1;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpcyipzvzi: /tmp/tmpcyipzvzi.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp6enij2zd: /tmp/tmp6enij2zd.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpqnlu4imu: /tmp/tmpqnlu4imu.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp99e5z2if: /tmp/tmp99e5z2if.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]\
    \ += 1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp6woag2lo: /tmp/tmp6woag2lo.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        if(result.find(token)\
    \ == result.end()) {\n            result[token] = 1;\n        } else {\n     \
    \       result[token]++;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) ==\
    \ (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c d g\")) == (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\"\
    , 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp38hljube: /tmp/tmp38hljube.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpcg_sbzu1: /tmp/tmpcg_sbzu1.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> hist;\n    std::stringstream ss(test);\n\
    \    std::string temp;\n    while(ss >> temp) {\n        hist[temp]++;\n    }\n\
    \    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpnp_obtdp: /tmp/tmpnp_obtdp.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp2p4d89_w: /tmp/tmp2p4d89_w.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpsgy5tn0l: /tmp/tmpsgy5tn0l.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmptacci2zr: /tmp/tmptacci2zr.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp7cdmlu_l: /tmp/tmp7cdmlu_l.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp4yk5gv1p: /tmp/tmp4yk5gv1p.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp6b7sa5fy: /tmp/tmp6b7sa5fy.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpcrd3jjw_: /tmp/tmpcrd3jjw_.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpl8xxh8sx: /tmp/tmpl8xxh8sx.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpgyrc0x8h: /tmp/tmpgyrc0x8h.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpxgk3ac74: /tmp/tmpxgk3ac74.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpb9rfmvxk: /tmp/tmpb9rfmvxk.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp0yf2sja4: /tmp/tmp0yf2sja4.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpg67uqeuy: /tmp/tmpg67uqeuy.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpxw9350ce: /tmp/tmpxw9350ce.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpx8cm_fvf: /tmp/tmpx8cm_fvf.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpxicsdm3i: /tmp/tmpxicsdm3i.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpam64a01q: /tmp/tmpam64a01q.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpekn3k71r: /tmp/tmpekn3k71r.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpznlp3907: /tmp/tmpznlp3907.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string token;\n  while(std::getline(ss, token, ' ')) {\n    result[token]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpico_60ko: /tmp/tmpico_60ko.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpgftmvcqc: /tmp/tmpgftmvcqc.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpt5hyyafk: /tmp/tmpt5hyyafk.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string token;\n  while(std::getline(ss, token, ' ')) {\n    if(result.find(token)\
    \ == result.end()) {\n      result[token] = 1;\n    } else {\n      result[token]\
    \ += 1;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpn0o_wh8o: /tmp/tmpn0o_wh8o.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp_bp89n0x: /tmp/tmp_bp89n0x.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp8lv5l9b1: /tmp/tmp8lv5l9b1.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpws_374ok: /tmp/tmpws_374ok.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp2vtuxmwh: /tmp/tmp2vtuxmwh.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmph1mv4l5g: /tmp/tmph1mv4l5g.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpgr57wgml: /tmp/tmpgr57wgml.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpspoe5gb2: /tmp/tmpspoe5gb2.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpc6rd_4zs: /tmp/tmpc6rd_4zs.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> hist;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    hist[word]++;\n  }\n  return\
    \ hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp58xrqeyq: /tmp/tmp58xrqeyq.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp_lqefi4y: /tmp/tmp_lqefi4y.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string item;\n  while (std::getline(ss, item, ' ')) {\n    result[item]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp4p3dzz1p: /tmp/tmp4p3dzz1p.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpus10xbnf: /tmp/tmpus10xbnf.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp98wjoboi: /tmp/tmp98wjoboi.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> m;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while(ss >> word) {\n        m[word]++;\n    }\n \
    \   return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp81zoj6g5: /tmp/tmp81zoj6g5.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp6xzqxkfh: /tmp/tmp6xzqxkfh.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmphyww__l9: /tmp/tmphyww__l9.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp90j5crek: /tmp/tmp90j5crek.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpztew0xp1: /tmp/tmpztew0xp1.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpql1y9lea: /tmp/tmpql1y9lea.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> hist;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n    }\n\
    \    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpjn3os1uk: /tmp/tmpjn3os1uk.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpwp2qkh1h: /tmp/tmpwp2qkh1h.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmphnrr8dk7: /tmp/tmphnrr8dk7.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> hist;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n    }\n\
    \    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpx_5s5rhb: /tmp/tmpx_5s5rhb.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> hist;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n    }\n\
    \    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp3odh0wse: /tmp/tmp3odh0wse.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmppks2z_h5: /tmp/tmppks2z_h5.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp1_035166: /tmp/tmp1_035166.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpa9pwairk: /tmp/tmpa9pwairk.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item] += 1;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmprg2pcm0n: /tmp/tmprg2pcm0n.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp6br_tzkk: /tmp/tmp6br_tzkk.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpkwwrovnr: /tmp/tmpkwwrovnr.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpo7p3x76h: /tmp/tmpo7p3x76h.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpnco8hmlw: /tmp/tmpnco8hmlw.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpcn3u8vc5: /tmp/tmpcn3u8vc5.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpdjga5i6v: /tmp/tmpdjga5i6v.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpnuee4t5p: /tmp/tmpnuee4t5p.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp0h8eqfby: /tmp/tmp0h8eqfby.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp_xirphwm: /tmp/tmp_xirphwm.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpid3aj7k0: /tmp/tmpid3aj7k0.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpjn803sbw: /tmp/tmpjn803sbw.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpswgln03i: /tmp/tmpswgln03i.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp8c19uyca: /tmp/tmp8c19uyca.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpj2tm2u9a: /tmp/tmpj2tm2u9a.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpgriuwytj: /tmp/tmpgriuwytj.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp7m87znk8: /tmp/tmp7m87znk8.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmplgs7xt3n: /tmp/tmplgs7xt3n.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpi5t1b360: /tmp/tmpi5t1b360.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpz5_xky32: /tmp/tmpz5_xky32.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpcxkjz7ff: /tmp/tmpcxkjz7ff.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmprgfn1v19: /tmp/tmprgfn1v19.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> hist;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n    }\n\
    \    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
    \ assert(candidate((\"a b c a b\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n   \
    \ assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"\
    t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,\
    \ long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\"))\
    \ == (std::map<std::string, long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,\
    \ long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpuehyy1o5: /tmp/tmpuehyy1o5.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpspeeaoft: /tmp/tmpspeeaoft.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp009m31nm: /tmp/tmp009m31nm.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpzadmmhvd: /tmp/tmpzadmmhvd.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp23hu2g3j: /tmp/tmp23hu2g3j.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpjphz5i_m: /tmp/tmpjphz5i_m.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp93j3vr6d: /tmp/tmp93j3vr6d.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpty3a247d: /tmp/tmpty3a247d.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpmlahmlfq: /tmp/tmpmlahmlfq.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpe_h9pb3n: /tmp/tmpe_h9pb3n.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpp_ewfbtr: /tmp/tmpp_ewfbtr.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpsw4z37l5: /tmp/tmpsw4z37l5.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp602z4l20: /tmp/tmp602z4l20.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp6d7d1j61: /tmp/tmp6d7d1j61.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp3qjnuh9a: /tmp/tmp3qjnuh9a.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item]++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b\
    \ b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n \
    \   assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\"\
    , 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
    \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
    a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp075ob4r0: /tmp/tmp075ob4r0.cpp:28: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpckjr7tsm: /tmp/tmpckjr7tsm.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp4bl7kd25: /tmp/tmp4bl7kd25.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpmg1tz14o: /tmp/tmpmg1tz14o.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpd6b6mlsn: /tmp/tmpd6b6mlsn.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string item;\n  while (std::getline(ss, item, ' ')) {\n    result[item]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmpvqn7sz4m: /tmp/tmpvqn7sz4m.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp1mza5i1v: /tmp/tmp1mza5i1v.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp2klegjhq: /tmp/tmp2klegjhq.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a dictionary\n// of the letter with\
    \ the most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a')\
    \ == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
    \ test) {\n    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string, long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,\
    \ long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) ==\
    \ (std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1},\
    \ {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,\
    \ long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b\
    \ b b a\")) == (std::map<std::string, long>({{\"b\", 4}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"\")) == (std::map<std::string, long>()));\n    assert(candidate((\"\
    a\")) == (std::map<std::string, long>({{\"a\", 1}})));\n}\n"
  stdout: ''
  stderr: "tmp9obaex1h: /tmp/tmp9obaex1h.cpp:24: int main(): Assertion `candidate((\"\
    a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n"
  exit_code: -6
  status: Exception
