language: cpp
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n\tstd::string result;\n\
    \tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\tresult.push_back('0');\n\
    \t\t} else {\n\t\t\tresult.push_back('1');\n\t\t}\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string res =\
    \ \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n\
    \            res += \"0\";\n        } else {\n            res += \"1\";\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result;\n\
    \    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n     \
    \       result += '0';\n        } else {\n            result += '1';\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n  std::string result =\
    \ \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n     \
    \ result += '0';\n    else\n      result += '1';\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n\tstd::string result =\
    \ \"\";\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\
    \tresult += '0';\n\t\t} else {\n\t\t\tresult += '1';\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";  // initialize result\n    // Traverse all characters\n    for (int\
    \ i = 0; i < a.size(); i++) {\n        // If both strings have 1 at same\n   \
    \     // index, then result is 0, else 1\n        if (a[i] == b[i])\n        \
    \    result.push_back('0');\n        else\n            result.push_back('1');\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string res =\
    \ \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n\
    \            res += \"0\";\n        } else {\n            res += \"1\";\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result;\n\
    \    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n     \
    \       result += '0';\n        } else {\n            result += '1';\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string res =\
    \ \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n\
    \            res += \"0\";\n        } else {\n            res += \"1\";\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n  std::string result =\
    \ \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n     \
    \ result += '0';\n    else\n      result += '1';\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n\tstd::string result =\
    \ \"\";\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\
    \tresult += '0';\n\t\t} else {\n\t\t\tresult += '1';\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string res =\
    \ \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n\
    \            res += \"0\";\n        } else {\n            res += \"1\";\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string res;\n\
    \    for(int i=0;i<a.size();i++){\n        if(a[i]==b[i]){\n            res+='0';\n\
    \        }\n        else{\n            res+='1';\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string res =\
    \ \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n\
    \            res += \"0\";\n        } else {\n            res += \"1\";\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n\tstd::string result =\
    \ \"\";\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\
    \tresult += '0';\n\t\t} else {\n\t\t\tresult += '1';\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string res =\
    \ \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n\
    \            res += \"0\";\n        } else {\n            res += \"1\";\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result;\n\
    \    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n     \
    \       result += '0';\n        } else {\n            result += '1';\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string res =\
    \ \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n\
    \            res += \"0\";\n        } else {\n            res += \"1\";\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result;\n\
    \    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n     \
    \       result += '0';\n        } else {\n            result += '1';\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n  std::string result =\
    \ \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n     \
    \ result += '0';\n    else\n      result += '1';\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n  std::string result =\
    \ \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n     \
    \ result += '0';\n    else\n      result += '1';\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n\tstd::string result =\
    \ \"\";\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\
    \tresult += '0';\n\t\t} else {\n\t\t\tresult += '1';\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n\tstd::string result =\
    \ \"\";\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\
    \tresult += '0';\n\t\t} else {\n\t\t\tresult += '1';\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n  std::string result =\
    \ \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n     \
    \ result += '0';\n    else\n      result += '1';\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result;\n\
    \    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n     \
    \       result += '0';\n        } else {\n            result += '1';\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n  std::string result =\
    \ \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n     \
    \ result += '0';\n    else\n      result += '1';\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n  std::string result =\
    \ \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n   \
    \   result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result;\n\
    \    for (int i = 0; i < a.size(); i++) {\n        result += (a[i] == b[i]) ?\
    \ '0' : '1';\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ string_xor;\n    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"\
    ));\n    assert(candidate((\"1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"\
    0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    assert(a.size() ==\
    \ b.size());\n    std::string res;\n    for (int i = 0; i < a.size(); i++) {\n\
    \        if (a[i] == b[i]) {\n            res += '0';\n        } else {\n    \
    \        res += '1';\n        }\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = string_xor;\n    assert(candidate((\"111000\"), (\"101010\"\
    )) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) == (\"0\"));\n  \
    \  assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n\tstd::string result =\
    \ \"\";\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\
    \tresult += '0';\n\t\t} else {\n\t\t\tresult += '1';\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string res =\
    \ \"\";\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n\
    \            res += \"0\";\n        } else {\n            res += \"1\";\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n  std::string result =\
    \ \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n     \
    \ result += '0';\n    else\n      result += '1';\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result;\n\
    \    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n     \
    \       result += '0';\n        } else {\n            result += '1';\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n  std::string result =\
    \ \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n     \
    \ result += '0';\n    else\n      result += '1';\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n\tstd::string res = \"\
    \";\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\tres\
    \ += \"0\";\n\t\t}\n\t\telse {\n\t\t\tres += \"1\";\n\t\t}\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n  std::string result =\
    \ \"\";\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i])\n     \
    \ result += '0';\n    else\n      result += '1';\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i])\n\
    \            result += '0';\n        else\n            result += '1';\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
    111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"\
    1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n\tstd::string result =\
    \ \"\";\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\
    \tresult += '0';\n\t\t} else {\n\t\t\tresult += '1';\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"\
    ), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) ==\
    \ (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings\
    \ a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs\
    \ and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\n\
    std::string string_xor(std::string a, std::string b) {\n    std::string result\
    \ = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n\
    \            result += '0';\n        } else {\n            result += '1';\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_xor;\n\
    \    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"\
    1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"\
    0101\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
