language: cpp
name: HumanEval_103_rounded_avg
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long avg = (n\
    \ + m) / 2;\n    std::string binary = std::bitset<32>(avg).to_string();\n    return\
    \ \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpauburq6f: /tmp/tmpauburq6f.cpp:35: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp8lb952ei: /tmp/tmp8lb952ei.cpp:34: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3829c4ch: /tmp/tmp3829c4ch.cpp:40: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n\
    \        binary += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpoxcl22l7: /tmp/tmpoxcl22l7.cpp:40: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpq3v6qhao: /tmp/tmpq3v6qhao.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3829c4ch: /tmp/tmp3829c4ch.cpp:40: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return \"0b\" + binary;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpq6c0t5rn: /tmp/tmpq6c0t5rn.cpp:44: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<8>(avg);\n    return \"0b\" + ss.str();\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp9zms42e0: /tmp/tmp9zms42e0.cpp:36: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return \"0b\" + binary;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpq6c0t5rn: /tmp/tmpq6c0t5rn.cpp:44: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) sum += i;\n    long avg = sum / (m - n + 1);\n    std::string\
    \ binary = \"0b\";\n    while (avg > 0) {\n        binary += std::to_string(avg\
    \ % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp879_o7q8: /tmp/tmp879_o7q8.cpp:36: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ = binary + std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp8mrk5gxo: /tmp/tmp8mrk5gxo.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpsuycmivq: /tmp/tmpsuycmivq.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string bin = \"0b\";\n    while (avg > 0) {\n \
    \       bin = std::to_string(avg % 2) + bin;\n        avg /= 2;\n    }\n    return\
    \ bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp9zpkr4qi: /tmp/tmp9zpkr4qi.cpp:39: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpmhbvz8_g: /tmp/tmpmhbvz8_g.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n  \
    \  ss << std::bitset<32>(avg);\n    return Union_std_string_long(ss.str());\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpdr9ogu5w: /tmp/tmpdr9ogu5w.cpp:36: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return \"0b\" + binary;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpq6c0t5rn: /tmp/tmpq6c0t5rn.cpp:44: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    return \"0b\" + ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmprb2mv_v8: /tmp/tmprb2mv_v8.cpp:36: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp8lb952ei: /tmp/tmp8lb952ei.cpp:34: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n\
    \    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary += std::to_string(avg\
    \ % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp5ok55izp: /tmp/tmp5ok55izp.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        if (avg % 2 == 0) {\n            binary = \"0\" + binary;\n        }\
    \ else {\n            binary = \"1\" + binary;\n        }\n        avg /= 2;\n\
    \    }\n    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmps9rsgrn7: /tmp/tmps9rsgrn7.cpp:47: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    return \"0b\" + ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmprb2mv_v8: /tmp/tmprb2mv_v8.cpp:36: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n        avg /= 2;\n\
    \    }\n    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpv4hjyd6j: /tmp/tmpv4hjyd6j.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp9nfyyvkc: /tmp/tmp9nfyyvkc.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n\
    \    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n    std::string binary\
    \ = ss.str();\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpcg80eskq: /tmp/tmpcg80eskq.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return Union_std_string_long(\"0b\" + binary);\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpu3l5f5wb: /tmp/tmpu3l5f5wb.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n\
    \    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary = binary\
    \ + std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpid8_ouxs: /tmp/tmpid8_ouxs.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary = \"\";\n   \
    \ while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n    \
    \    avg /= 2;\n    }\n    return \"0b\" + binary;\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmppelq4pjl: /tmp/tmppelq4pjl.cpp:41: int main(): Assertion `candidate((964),
    (977)) == (Union_std_string_long("0b1111001010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string binary = ss.str();\n    std::string res = \"0b\";\n    for (int\
    \ i = binary.size() - 1; i >= 0; i--) {\n        if (binary[i] == '1') {\n   \
    \         res += binary.substr(i);\n            break;\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmprjv7bg23: /tmp/tmprjv7bg23.cpp:44: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return \"0b\" + binary;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpq6c0t5rn: /tmp/tmpq6c0t5rn.cpp:44: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1wfhvvkr: /tmp/tmp1wfhvvkr.cpp:34: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpsuycmivq: /tmp/tmpsuycmivq.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg != 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpt09lsh0y: /tmp/tmpt09lsh0y.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (long)round((double)sum / (m - n + 1));\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpoujqrs97: /tmp/tmpoujqrs97.cpp:37: int main(): Assertion `candidate((964),
    (977)) == (Union_std_string_long("0b1111001010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    return ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp5xmekmcq: /tmp/tmp5xmekmcq.cpp:36: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (long)std::round((double)sum / (m - n + 1));\n    return std::bitset<32>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpbpxh_r7d: /tmp/tmpbpxh_r7d.cpp:34: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n\
    \        binary += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpoxcl22l7: /tmp/tmpoxcl22l7.cpp:40: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string binary = ss.str();\n    std::string result = \"0b\" + binary;\n\
    \    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp971jyxhx: /tmp/tmp971jyxhx.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string bin = \"0b\";\n    while (avg > 0) {\n \
    \       bin += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(bin.begin(),\
    \ bin.end());\n    return bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpqt03ygu5: /tmp/tmpqt03ygu5.cpp:40: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string s = \"0b\";\n    while (avg > 0) {\n       \
    \ if (avg % 2 == 0) {\n            s = \"0\" + s;\n        } else {\n        \
    \    s = \"1\" + s;\n        }\n        avg /= 2;\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"\
    0b1010\")));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"\
    0b1111001010\")));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"\
    0b1111100100\")));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"\
    0b1011000010\")));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"\
    0b101101110\")));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"\
    0b110101101\")));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"\
    0b1001110010\")));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"\
    0b11010111\")));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp91h9f2lv: /tmp/tmp91h9f2lv.cpp:43: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        if (avg % 2 == 0) {\n            binary = \"0\" + binary;\n        }\
    \ else {\n            binary = \"1\" + binary;\n        }\n        avg /= 2;\n\
    \    }\n    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmps9rsgrn7: /tmp/tmps9rsgrn7.cpp:47: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary = \"\";\n   \
    \ while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n    \
    \    avg /= 2;\n    }\n    return \"0b\" + binary;\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmppelq4pjl: /tmp/tmppelq4pjl.cpp:41: int main(): Assertion `candidate((964),
    (977)) == (Union_std_string_long("0b1111001010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpq3v6qhao: /tmp/tmpq3v6qhao.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string bin = \"0b\";\n    while (avg > 0) {\n \
    \       bin += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(bin.begin(),\
    \ bin.end());\n    return bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpqt03ygu5: /tmp/tmpqt03ygu5.cpp:40: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n\
    \    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary += std::to_string(avg\
    \ % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp5ok55izp: /tmp/tmp5ok55izp.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n\
    \    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary += std::to_string(avg\
    \ % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n\
    \    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp5ok55izp: /tmp/tmp5ok55izp.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<32>(avg);\n    std::string s = ss.str();\n    int i = 0;\n    while\
    \ (s[i] == '0') {\n        i++;\n    }\n    s = s.substr(i);\n    return \"0b\"\
    \ + s;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp8mk8tpy7: /tmp/tmp8mk8tpy7.cpp:44: int main(): Assertion `candidate((964),
    (977)) == (Union_std_string_long("0b1111001010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = (sum + (m - n\
    \ + 1) / 2) / (m - n + 1);\n    std::string binary = \"0b\";\n    while (avg >\
    \ 0) {\n        binary += std::to_string(avg % 2);\n        avg /= 2;\n    }\n\
    \    std::reverse(binary.begin() + 2, binary.end());\n    return binary;\n}\n\
    int main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5))\
    \ == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"\
    0b1010\")));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"\
    0b1111001010\")));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"\
    0b1111100100\")));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"\
    0b1011000010\")));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"\
    0b101101110\")));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"\
    0b110101101\")));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"\
    0b1001110010\")));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"\
    0b11010111\")));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpglp46lay: /tmp/tmpglp46lay.cpp:40: int main(): Assertion `candidate((964),
    (977)) == (Union_std_string_long("0b1111001010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp8lb952ei: /tmp/tmp8lb952ei.cpp:34: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string bin = \"0b\";\n    while (avg > 0) {\n     \
    \   bin += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(bin.begin(),\
    \ bin.end());\n    return bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpj376r5me: /tmp/tmpj376r5me.cpp:40: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpq3v6qhao: /tmp/tmpq3v6qhao.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpq3v6qhao: /tmp/tmpq3v6qhao.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (long) std::round((double) sum / (m - n + 1));\n    return std::bitset<64>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpaspjdeti: /tmp/tmpaspjdeti.cpp:34: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string result = \"0b\";\n    while (avg > 0) {\n  \
    \      result = std::to_string(avg % 2) + result;\n        avg /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpme70ydo0: /tmp/tmpme70ydo0.cpp:39: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n\
    \        binary += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpoxcl22l7: /tmp/tmpoxcl22l7.cpp:40: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        if (avg % 2 == 0) {\n            binary = \"0\" + binary;\n        }\
    \ else {\n            binary = \"1\" + binary;\n        }\n        avg /= 2;\n\
    \    }\n    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmps9rsgrn7: /tmp/tmps9rsgrn7.cpp:47: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpsuycmivq: /tmp/tmpsuycmivq.cpp:35: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n\
    \    std::string res = \"0b\";\n    while (avg > 0) {\n        res += std::to_string(avg\
    \ % 2);\n        avg /= 2;\n    }\n    std::reverse(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpg8vjn3l9: /tmp/tmpg8vjn3l9.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (long)round((double)sum / (m - n + 1));\n    std::string binary = std::bitset<64>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpymvgawjd: /tmp/tmpymvgawjd.cpp:37: int main(): Assertion `candidate((964),
    (977)) == (Union_std_string_long("0b1111001010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ = binary + std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp8mrk5gxo: /tmp/tmp8mrk5gxo.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp1t9xb39o: /tmp/tmp1t9xb39o.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<32>(avg);\n    std::string s = ss.str();\n    return \"0b\" + s.substr(s.find(\"\
    1\"));\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpiucyac7j: /tmp/tmpiucyac7j.cpp:39: int main(): Assertion `candidate((964),
    (977)) == (Union_std_string_long("0b1111001010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    long count = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n\
    \        count++;\n    }\n    long avg = sum / count;\n    std::string binary\
    \ = \"0b\";\n    while (avg > 0) {\n        binary += std::to_string(avg % 2);\n\
    \        avg /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n \
    \   return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpegco2z6y: /tmp/tmpegco2z6y.cpp:42: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary = \"\";\n   \
    \ while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n    \
    \    avg /= 2;\n    }\n    return \"0b\" + binary;\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmppelq4pjl: /tmp/tmppelq4pjl.cpp:41: int main(): Assertion `candidate((964),
    (977)) == (Union_std_string_long("0b1111001010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<32>(avg);\n    return \"0b\" + ss.str();\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpoghbhrpo: /tmp/tmpoghbhrpo.cpp:36: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n        binary\
    \ += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmp3dip7tfl: /tmp/tmp3dip7tfl.cpp:38: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string bin = \"0b\";\n    while (avg > 0) {\n     \
    \   bin += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(bin.begin(),\
    \ bin.end());\n    return bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpj376r5me: /tmp/tmpj376r5me.cpp:40: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == (Union_std_string_long(\"\
    0b11\")));\n    assert(candidate((7), (13)) == (Union_std_string_long(\"0b1010\"\
    )));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"0b1111001010\"\
    )));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"0b1111100100\"\
    )));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"0b1011000010\"\
    )));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"0b101101110\"\
    )));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"0b110101101\"\
    )));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"0b1001110010\"\
    )));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"0b11010111\"\
    )));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
    \ (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (5)) == (Union_std_string_long(\"\
    0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpq3v6qhao: /tmp/tmpq3v6qhao.cpp:39: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"0b\";\n    while (avg > 0) {\n\
    \        binary += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpk7u3wvja: /tmp/tmpk7u3wvja.cpp:40: int main(): Assertion `candidate((1),
    (5)) == (Union_std_string_long("0b11"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string s = ss.str();\n    return \"0b\" + s.substr(s.find(\"1\"));\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpevzresd2: /tmp/tmpevzresd2.cpp:41: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = \"\";\n    while (avg > 0) {\n\
    \        binary = std::to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7),\
    \ (13)) == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964),\
    \ (977)) == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpz_z_hd1u: /tmp/tmpz_z_hd1u.cpp:43: int main(): Assertion `candidate((560),
    (851)) == (Union_std_string_long("0b1011000010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
    \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m,\
    \ and your task is to compute the\n// average of the integers from n through m\
    \ (including n and m). \n// Round the answer to the nearest integer and convert\
    \ that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1,\
    \ 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\
    \n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = (int)round((double)sum\
    \ / (m - n + 1));\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13))\
    \ == (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977))\
    \ == (Union_std_string_long(\"0b1111001010\")));\n    assert(candidate((996),\
    \ (997)) == (Union_std_string_long(\"0b1111100100\")));\n    assert(candidate((560),\
    \ (851)) == (Union_std_string_long(\"0b1011000010\")));\n    assert(candidate((185),\
    \ (546)) == (Union_std_string_long(\"0b101101110\")));\n    assert(candidate((362),\
    \ (496)) == (Union_std_string_long(\"0b110101101\")));\n    assert(candidate((350),\
    \ (902)) == (Union_std_string_long(\"0b1001110010\")));\n    assert(candidate((197),\
    \ (233)) == (Union_std_string_long(\"0b11010111\")));\n    assert(candidate((7),\
    \ (5)) == (Union_std_string_long(-1)));\n    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n\
    \    assert(candidate((5), (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
  status: Exception
  stderr: 'tmpdz3n98qu: /tmp/tmpdz3n98qu.cpp:38: int main(): Assertion `candidate((964),
    (977)) == (Union_std_string_long("0b1111001010"))'' failed.

    '
  stdout: ''
  timestamp: 1660112334
