language: cpp
name: HumanEval_94_skjkasdkd
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long> primes;\n\
    \    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int\
    \ j = 2; j <= i/2; j++){\n            if(i % j == 0){\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if(isPrime)\n\
    \            primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(int\
    \ i = 0; i < primes.size(); i++){\n        bool isInList = false;\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         isInList = true;\n                break;\n            }\n        }\n\
    \        if(isInList && primes[i] > maxPrime)\n            maxPrime = primes[i];\n\
    \    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime %\
    \ 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 != 0) {\n\
    \                bool isPrime = true;\n                for (long j = 3; j < lst[i];\
    \ j++) {\n                    if (lst[i] % j == 0) {\n                       \
    \ isPrime = false;\n                        break;\n                    }\n  \
    \              }\n                if (isPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n  \
    \      largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpq4naw0re: /tmp/tmpq4naw0re.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(int i = 2; i <= max; i++){\n        if(max % i == 0){\n      \
    \      sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpyme6z6yu: /tmp/tmpyme6z6yu.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j < i; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        bool isInList = false;\n        for(int j = 0; j < lst.size(); j++){\n\
    \            if(primes[i] == lst[j]){\n                isInList = true;\n    \
    \            break;\n            }\n        }\n        if(isInList){\n       \
    \     if(primes[i] > maxPrime) maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    long max2 = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > max2){\n            max2 = lst[i];\n        }\n \
    \   }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == max2){\n\
    \            lst.erase(lst.begin() + i);\n        }\n    }\n    long max3 = 0;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > max3){\n      \
    \      max3 = lst[i];\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] == max3){\n            lst.erase(lst.begin() + i);\n      \
    \  }\n    }\n    long max4 = 0;\n    for(int i = 0; i < lst.size(); i++){\n  \
    \      if(lst[i] > max4){\n            max4 = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max4){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    long max5 = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > max5){\n            max5 = lst[i];\n        }\n \
    \   }\n    for(int i = 0; i < lst.size(); i++){\n\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmy02jo0_.cpp: In function \u2018long int skjkasdkd(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmy02jo0_.cpp:66:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   66 | int main() {\n      |     \
    \       ^\n/tmp/tmpmy02jo0_.cpp:77:1: error: expected \u2018}\u2019 at end of\
    \ input\n   77 | }\n      | ^\n/tmp/tmpmy02jo0_.cpp:12:39: note: to match this\
    \ \u2018{\u2019\n   12 | long skjkasdkd(std::vector<long> lst) {\n      |    \
    \                                   ^\n/tmp/tmpmy02jo0_.cpp:77:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   77 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j <= i / 2; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n    \
    \    break;\n      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n\
    \    }\n  }\n  long largestPrime = 0;\n  for (int i = 0; i < primes.size(); i++)\
    \ {\n    if (primes[i] > largestPrime) {\n      largestPrime = primes[i];\n  \
    \  }\n  }\n  long sum = 0;\n  while (largestPrime > 0) {\n    sum += largestPrime\
    \ % 10;\n    largestPrime /= 10;\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpc4ommh4u: /tmp/tmpc4ommh4u.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j <= i / 2; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n    \
    \    break;\n      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n\
    \    }\n  }\n  long maxPrime = 0;\n  for (int i = 0; i < primes.size(); i++) {\n\
    \    if (primes[i] > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n  long\
    \ sum = 0;\n  while (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime\
    \ /= 10;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpykzgorpv: /tmp/tmpykzgorpv.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime){\n            primes.push_back(i);\n        }\n    }\n   \
    \ long maxPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpienm4ayo: /tmp/tmpienm4ayo.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long largest = 0;\n  for (long i = 0; i < lst.size(); i++) {\n   \
    \ if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  long sum = 0;\n\
    \  while (largest > 0) {\n    sum += largest % 10;\n    largest /= 10;\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpr40ezqou: /tmp/tmpr40ezqou.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n  \
    \  while(max > 0){\n        sum += max % 10;\n        max /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpu_744zk2: /tmp/tmpu_744zk2.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long> primes;\n\
    \    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int\
    \ j = 2; j < i; j++){\n            if(i % j == 0){\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        if(isPrime)\n\
    \            primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(int\
    \ i = 0; i < primes.size(); i++){\n        for(int j = 0; j < lst.size(); j++){\n\
    \            if(primes[i] == lst[j]){\n                if(primes[i] > maxPrime)\n\
    \                    maxPrime = primes[i];\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n\
    \        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= sqrt(i); j++){\n            if(i % j == 0){\n   \
    \             isPrime = false;\n                break;\n            }\n      \
    \  }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n\
    \    long largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n   \
    \     for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > largestPrime){\n                    largestPrime\
    \ = primes[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while(largestPrime > 0){\n        sum += largestPrime % 10;\n    \
    \    largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool prime = true;\n \
    \       for(long j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      prime = false;\n                break;\n            }\n        }\n    \
    \    if(prime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ largest = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > largest){\n            largest = primes[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(largest > 0){\n        sum += largest % 10;\n        largest\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp017tb6r8: /tmp/tmp017tb6r8.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ == max){\n            lst.erase(lst.begin() + i);\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ == max){\n            lst.erase(lst.begin() + i);\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ == max){\n            lst.erase(lst.begin() + i);\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ == max){\n            lst.erase(lst.begin() + i);\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst\n\
    }\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnv1zkkgl.cpp: In function \u2018long int skjkasdkd(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnv1zkkgl.cpp:61:16: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   61 |             lst\n      |                ^\n   \
    \   |                ;\n   62 | }\n      | ~               \n/tmp/tmpnv1zkkgl.cpp:63:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   63 | int main() {\n      |            ^\n/tmp/tmpnv1zkkgl.cpp:74:1: error:\
    \ expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmpnv1zkkgl.cpp:59:40:\
    \ note: to match this \u2018{\u2019\n   59 |     for(int i = 0; i < lst.size();\
    \ i++){\n      |                                        ^\n/tmp/tmpnv1zkkgl.cpp:74:1:\
    \ error: expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmpnv1zkkgl.cpp:12:39:\
    \ note: to match this \u2018{\u2019\n   12 | long skjkasdkd(std::vector<long>\
    \ lst) {\n      |                                       ^\n/tmp/tmpnv1zkkgl.cpp:74:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   74 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 != 0) {\n\
    \                bool isPrime = true;\n                for (long j = 3; j < lst[i];\
    \ j++) {\n                    if (lst[i] % j == 0) {\n                       \
    \ isPrime = false;\n                        break;\n                    }\n  \
    \              }\n                if (isPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n  \
    \      largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long> primes;\n\
    \    for(int i = 2; i <= max; i++){\n        bool prime = true;\n        for(int\
    \ j = 2; j < i; j++){\n            if(i % j == 0){\n                prime = false;\n\
    \                break;\n            }\n        }\n        if(prime)\n       \
    \     primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(int i = 0;\
    \ i < primes.size(); i++){\n        for(int j = 0; j < lst.size(); j++){\n   \
    \         if(primes[i] == lst[j]){\n                if(primes[i] > maxPrime)\n\
    \                    maxPrime = primes[i];\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n\
    \        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpq4naw0re: /tmp/tmpq4naw0re.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    // your code here\n    long max=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    long\
    \ sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]==max){\n     \
    \       while(lst[i]!=0){\n                sum+=lst[i]%10;\n                lst[i]=lst[i]/10;\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpy343pguu: /tmp/tmpy343pguu.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > largestPrime){\n            largestPrime = primes[i];\n        }\n    }\n\
    \    long sum = 0;\n    while(largestPrime > 0){\n        sum += largestPrime\
    \ % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpd375prz3: /tmp/tmpd375prz3.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j <= i/2; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126822
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    std::vector<long> primes;\n    long max = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    for (long i = 2; i <= max; i++) {\n        bool isPrime\
    \ = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime) {\n            primes.push_back(i);\n       \
    \ }\n    }\n    long maxPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        for (long j = 0; j < primes.size(); j++) {\n            if (lst[i]\
    \ == primes[j]) {\n                if (primes[j] > maxPrime) {\n             \
    \       maxPrime = primes[j];\n                }\n            }\n        }\n \
    \   }\n    long sum = 0;\n    while (maxPrime > 0) {\n        sum += maxPrime\
    \ % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong max = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ > max) {\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tstd::vector<long> primes;\n\tfor\
    \ (int i = 2; i <= max; i++) {\n\t\tbool isPrime = true;\n\t\tfor (int j = 2;\
    \ j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tprimes.push_back(i);\n\t\t}\n\t}\n\t\
    long maxPrime = 0;\n\tfor (int i = 0; i < primes.size(); i++) {\n\t\tif (primes[i]\
    \ > maxPrime) {\n\t\t\tmaxPrime = primes[i];\n\t\t}\n\t}\n\tlong sum = 0;\n\t\
    while (maxPrime > 0) {\n\t\tsum += maxPrime % 10;\n\t\tmaxPrime /= 10;\n\t}\n\t\
    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpz5gxbntn: /tmp/tmpz5gxbntn.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpj_yuxumn: /tmp/tmpj_yuxumn.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        bool is_prime = true;\n        for (long j = 2; j < lst[i]; j++) {\n\
    \            if (lst[i] % j == 0) {\n                is_prime = false;\n     \
    \           break;\n            }\n        }\n        if (is_prime && lst[i] >\
    \ max_prime) {\n            max_prime = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n  \
    \      for(long j = 2; j < i; j++){\n            if(i % j == 0){\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if(isPrime){\n            long temp = i;\n            while(temp > 0){\n\
    \                sum += temp % 10;\n                temp /= 10;\n            }\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp3oaik9fc: /tmp/tmp3oaik9fc.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 != 0) {\n\
    \                if (lst[i] % 3 != 0) {\n                    if (lst[i] % 5 !=\
    \ 0) {\n                        if (lst[i] % 7 != 0) {\n                     \
    \       if (lst[i] % 11 != 0) {\n                                if (lst[i] %\
    \ 13 != 0) {\n                                    if (lst[i] % 17 != 0) {\n  \
    \                                      if (lst[i] % 19 != 0) {\n             \
    \                               if (lst[i] % 23 != 0) {\n                    \
    \                            if (lst[i] % 29 != 0) {\n                       \
    \                             if (lst[i] % 31 != 0) {\n                      \
    \                                  if (lst[i] % 37 != 0) {\n                 \
    \                                           if (lst[i] % 41 != 0) {\n        \
    \                                                        if (lst[i] % 43 != 0)\
    \ {\n                                                                    if (lst[i]\
    \ % 47 != 0) {\n                                                             \
    \           if (lst[i] % 53 != 0) {\n                                        \
    \                                    if (lst[i] % 59 != 0) {\n               \
    \                                                                 if (lst[i] %\
    \ 61 != 0) {\n                                                               \
    \                     if (lst[i] % 67 != 0) {\n                              \
    \                                                          if (lst[i] % 71 !=\
    \ 0) {\n                                                                     \
    \                       if (lst[i] % 73 != 0) {\n                            \
    \                                                                    if (lst[i]\
    \ % 79 != 0) {\n                                                             \
    \                                       if (lst[i] % 83 != 0) {\n            \
    \                                                                            \
    \                if (lst[i] % 89 != 0) {\n                                   \
    \                                                                         if (lst[i]\
    \ % 97 != 0) {\n                                                             \
    \                                                   largestPrime = lst[i];\n \
    \                                                                            \
    \                               }\n                                          \
    \                      \n}\nint main() {\n    auto candidate = skjkasdkd;\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3,\
    \ (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32,\
    \ (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\
    \ == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1,\
    \ (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1,\
    \ (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
    \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
    \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
    \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9he3nzsq.cpp: In function \u2018long int skjkasdkd(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9he3nzsq.cpp:45:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |     \
    \       ^\n/tmp/tmp9he3nzsq.cpp:56:1: error: expected \u2018}\u2019 at end of\
    \ input\n   56 | }\n      | ^\n/tmp/tmp9he3nzsq.cpp:38:123: note: to match this\
    \ \u2018{\u2019\n   38 |                                                     \
    \                                                if (lst[i] % 83 != 0) {\n   \
    \   |                                                                        \
    \                                                   ^\n/tmp/tmp9he3nzsq.cpp:56:1:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmp9he3nzsq.cpp:37:119:\
    \ note: to match this \u2018{\u2019\n   37 |                                 \
    \                                                                if (lst[i] %\
    \ 79 != 0) {\n      |                                                        \
    \                                                               ^\n/tmp/tmp9he3nzsq.cpp:56:1:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmp9he3nzsq.cpp:36:115:\
    \ note: to match this \u2018{\u2019\n   36 |                                 \
    \                                                            if (lst[i] % 73 !=\
    \ 0) {\n      |                                                              \
    \                                                     ^\n/tmp/tmp9he3nzsq.cpp:56:1:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmp9he3nzsq.cpp:35:111:\
    \ note: to match this \u2018{\u2019\n   35 |                                 \
    \                                                        if (lst[i] % 71 != 0)\
    \ {\n      |                                                                 \
    \                                              ^\n/tmp/tmp9he3nzsq.cpp:56:1: error:\
    \ expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmp9he3nzsq.cpp:34:107:\
    \ note: to match this \u2018{\u2019\n   34 |                                 \
    \                                                    if (l"
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ sum = 0;\n    for(int i = 0; i < primes.size(); i++){\n        while(primes[i]\
    \ != 0){\n            sum += primes[i] % 10;\n            primes[i] /= 10;\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpxn11hfzx: /tmp/tmpxn11hfzx.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    long sum = 0;\n    while(max > 0){\n\
    \        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpm7nv2g_y: /tmp/tmpm7nv2g_y.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n     \
    \   if(primes[i] > largestPrime){\n            largestPrime = primes[i];\n   \
    \     }\n    }\n    long sum = 0;\n    while(largestPrime > 0){\n        sum +=\
    \ largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpqn3fez0a: /tmp/tmpqn3fez0a.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j <= i/2; j++){\n            if(i % j == 0){\n      \
    \          isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpb6iyiete: /tmp/tmpb6iyiete.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long> primes;\n\
    \    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int\
    \ j = 2; j <= i/2; j++){\n            if(i % j == 0){\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if(isPrime)\n\
    \            primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(int\
    \ i = 0; i < primes.size(); i++){\n        bool isInList = false;\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         isInList = true;\n                break;\n            }\n        }\n\
    \        if(isInList && primes[i] > maxPrime)\n            maxPrime = primes[i];\n\
    \    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime %\
    \ 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j < i; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n    }\n  }\n\
    \  long maxPrime = 0;\n  for (int i = 0; i < primes.size(); i++) {\n    if (primes[i]\
    \ > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n  long sum = 0;\n  while\
    \ (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime /= 10;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmptmi3mwnc: /tmp/tmptmi3mwnc.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j < i; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(int i = 2; i <= max; i++){\n        if(max % i == 0){\n      \
    \      sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpyme6z6yu: /tmp/tmpyme6z6yu.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong max = 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ > max) {\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tfor (long i = 2; i < max; i++)\
    \ {\n\t\tfor (long j = 0; j < lst.size(); j++) {\n\t\t\tif (lst[j] % i == 0) {\n\
    \t\t\t\tlst[j] = lst[j] / i;\n\t\t\t}\n\t\t}\n\t}\n\tlong sum = 0;\n\tfor (long\
    \ i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > max) {\n\t\t\tmax = lst[i];\n\
    \t\t}\n\t}\n\twhile (max > 0) {\n\t\tsum += max % 10;\n\t\tmax /= 10;\n\t}\n\t\
    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp2zy1xgdo: /tmp/tmp2zy1xgdo.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong max = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ > max) {\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (max > 0)\
    \ {\n\t\tsum += max % 10;\n\t\tmax /= 10;\n\t}\n\treturn sum;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpaye0zloa: /tmp/tmpaye0zloa.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > largestPrime){\n                    largestPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(largestPrime\
    \ > 0){\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126825
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j < i; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpq4naw0re: /tmp/tmpq4naw0re.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpjm6l9efh: /tmp/tmpjm6l9efh.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    long sum = 0;\n    while(max > 0){\n\
    \        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpm7nv2g_y: /tmp/tmpm7nv2g_y.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    long sum = 0;\n    while(max > 0){\n\
    \        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpm7nv2g_y: /tmp/tmpm7nv2g_y.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpjm6l9efh: /tmp/tmpjm6l9efh.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (long i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (long j = 2;\
    \ j <= i / 2; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n    \
    \    break;\n      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n\
    \    }\n  }\n  long maxPrime = 0;\n  for (long i = 0; i < primes.size(); i++)\
    \ {\n    if (primes[i] > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n\
    \  long sum = 0;\n  while (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime\
    \ /= 10;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpyc0mc6c3: /tmp/tmpyc0mc6c3.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] == 0 || lst[i] == 1) {\n            continue;\n      \
    \  }\n        bool isPrime = true;\n        for (int j = 2; j <= sqrt(lst[i]);\
    \ j++) {\n            if (lst[i] % j == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) {\n  \
    \          largestPrime = std::max(largestPrime, lst[i]);\n        }\n    }\n\
    \    long sum = 0;\n    while (largestPrime > 0) {\n        sum += largestPrime\
    \ % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j <= i/2; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    std::vector<long> digits;\n    while(maxPrime > 0){\n \
    \       digits.push_back(maxPrime % 10);\n        maxPrime /= 10;\n    }\n   \
    \ long sum = 0;\n    for(int i = 0; i < digits.size(); i++){\n        sum += digits[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3,\
    \ (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32,\
    \ (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\
    \ == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1,\
    \ (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1,\
    \ (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
    \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
    \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
    \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long mx = 0;\n    for(long i = 0; i < lst.size(); i++) {\n     \
    \   if(lst[i] > mx) {\n            mx = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= mx; i++) {\n        bool isPrime = true;\n\
    \        for(long j = 2; j <= sqrt(i); j++) {\n            if(i % j == 0) {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if(isPrime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    long mxPrime = 0;\n    for(long i = 0; i < primes.size(); i++) {\n\
    \        if(primes[i] > mxPrime) {\n            mxPrime = primes[i];\n       \
    \ }\n    }\n    long sum = 0;\n    while(mxPrime > 0) {\n        sum += mxPrime\
    \ % 10;\n        mxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp39j3uj5e: /tmp/tmp39j3uj5e.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long maxPrime = 0;\n    for (auto i : lst) {\n        if (i > maxPrime\
    \ && i % 2 != 0) {\n            bool isPrime = true;\n            for (int j =\
    \ 3; j < i; j += 2) {\n                if (i % j == 0) {\n                   \
    \ isPrime = false;\n                    break;\n                }\n          \
    \  }\n            if (isPrime) {\n                maxPrime = i;\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while (maxPrime > 0) {\n        sum\
    \ += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max)\n            max = lst[i];\n    }\n    long sum = 0;\n  \
    \  while(max > 0){\n        sum += max % 10;\n        max /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp1wrwkel6: /tmp/tmp1wrwkel6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpq4naw0re: /tmp/tmpq4naw0re.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j <= i / 2; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n    \
    \    break;\n      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n\
    \    }\n  }\n  long maxPrime = 0;\n  for (int i = 0; i < primes.size(); i++) {\n\
    \    if (primes[i] > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n  long\
    \ sum = 0;\n  while (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime\
    \ /= 10;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpykzgorpv: /tmp/tmpykzgorpv.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j < i; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n    }\n  }\n\
    \  long largestPrime = 0;\n  for (int i = 0; i < primes.size(); i++) {\n    bool\
    \ isInList = false;\n    for (int j = 0; j < lst.size(); j++) {\n      if (primes[i]\
    \ == lst[j]) {\n        isInList = true;\n        break;\n      }\n    }\n   \
    \ if (isInList) {\n      largestPrime = primes[i];\n    }\n  }\n  long sum = 0;\n\
    \  while (largestPrime > 0) {\n    sum += largestPrime % 10;\n    largestPrime\
    \ /= 10;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long sum = 0;\n    long max = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n   \
    \ }\n    std::vector<long> primes;\n    for(int i = 0; i < max; i++){\n      \
    \  if(lst[i] % 2 != 0 && lst[i] % 3 != 0 && lst[i] % 5 != 0 && lst[i] % 7 != 0){\n\
    \            primes.push_back(lst[i]);\n        }\n    }\n    for(int i = 0; i\
    \ < primes.size(); i++){\n        sum += primes[i];\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpdamig9oj: /tmp/tmpdamig9oj.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpljr94nbe: /tmp/tmpljr94nbe.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    // your code here\n    long max = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n   \
    \ }\n    std::vector<long> primes;\n    for(int i = 2; i <= max; i++){\n     \
    \   bool isPrime = true;\n        for(int j = 2; j <= i/2; j++){\n           \
    \ if(i % j == 0){\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n\
    \        }\n    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size();\
    \ i++){\n        if(primes[i] > maxPrime){\n            maxPrime = primes[i];\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmph0i5my82: /tmp/tmph0i5my82.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool prime = true;\n  \
    \      for(int j = 2; j < i; j++){\n            if(i % j == 0){\n            \
    \    prime = false;\n                break;\n            }\n        }\n      \
    \  if(prime){\n            primes.push_back(i);\n        }\n    }\n    long largest\
    \ = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i] > largest){\n\
    \            largest = primes[i];\n        }\n    }\n    long sum = 0;\n    while(largest\
    \ > 0){\n        sum += largest % 10;\n        largest /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpi3r22unu: /tmp/tmpi3r22unu.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime){\n            primes.push_back(i);\n        }\n    }\n   \
    \ long maxPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n        for(long\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660126828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpq4naw0re: /tmp/tmpq4naw0re.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n     \
    \   bool isInList = false;\n        for(int j = 0; j < lst.size(); j++){\n   \
    \         if(primes[i] == lst[j]){\n                isInList = true;\n       \
    \         break;\n            }\n        }\n        if(isInList){\n          \
    \  largestPrime = primes[i];\n        }\n    }\n    long sum = 0;\n    while(largestPrime\
    \ > 0){\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 0; i < max; i++){\n        if(i == 0 || i == 1){\n\
    \            continue;\n        }\n        bool isPrime = true;\n        for(int\
    \ j = 2; j < i; j++){\n            if(i % j == 0){\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        if(isPrime){\n\
    \            primes.push_back(i);\n        }\n    }\n    long largestPrime = 0;\n\
    \    for(int i = 0; i < primes.size(); i++){\n        for(int j = 0; j < lst.size();\
    \ j++){\n            if(primes[i] == lst[j]){\n                largestPrime =\
    \ primes[i];\n            }\n        }\n    }\n    long sum = 0;\n    while(largestPrime\
    \ > 0){\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpb6hfs38p: /tmp/tmpb6hfs38p.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,
    (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==
    (25)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime)\n            primes.push_back(i);\n    }\n    long maxPrime\
    \ = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i] > maxPrime)\n\
    \            maxPrime = primes[i];\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpnsqyra3o: /tmp/tmpnsqyra3o.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    std::vector<long> primes;\n    for(int i = 0; i < lst.size(); i++)\
    \ {\n        if(lst[i] == 0 || lst[i] == 1) continue;\n        bool isPrime =\
    \ true;\n        for(int j = 2; j < lst[i]; j++) {\n            if(lst[i] % j\
    \ == 0) {\n                isPrime = false;\n                break;\n        \
    \    }\n        }\n        if(isPrime) primes.push_back(lst[i]);\n    }\n    long\
    \ largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++) {\n        if(primes[i]\
    \ > largestPrime) largestPrime = primes[i];\n    }\n    long sum = 0;\n    while(largestPrime\
    \ > 0) {\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    int sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpvjk1pr56: /tmp/tmpvjk1pr56.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  long sum = 0;\n  while (max > 0)\
    \ {\n    sum += max % 10;\n    max /= 10;\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp9mnkfvp2: /tmp/tmp9mnkfvp2.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] == max) {\n      lst.erase(lst.begin() + i);\n    }\n\
    \  }\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] == max) {\n   \
    \   lst.erase(lst.begin() + i);\n    }\n  }\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] == max) {\n      lst.erase(lst.begin() + i);\n    }\n\
    \  }\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] == max) {\n   \
    \   lst.erase(lst.begin() + i);\n    }\n  }\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] == max) {\n      lst.erase(lst.begin() + i);\n    }\n\
    \  }\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] == max) {\n   \
    \   lst.erase(lst.begin() + i);\n    }\n  }\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] == max) {\n      lst.erase(lst.begin() + i);\n    }\n\
    \  }\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] == max) {\n   \
    \   lst.erase(lst.begin() + i);\n    }\n  }\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (lst[\n}\nint main() {\n    auto candidate = skjkasdkd;\n   \
    \ assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3,\
    \ (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32,\
    \ (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\
    \ == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1,\
    \ (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1,\
    \ (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
    \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
    \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
    \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpynem_7m7.cpp: In function \u2018long int skjkasdkd(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpynem_7m7.cpp:61:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmpynem_7m7.cpp:60:13:\
    \ error: expected \u2018]\u2019 before \u2018}\u2019 token\n   60 |     if (lst[\n\
    \      |             ^\n      |             ]\n   61 | }\n      | ~          \
    \  \n/tmp/tmpynem_7m7.cpp:60:13: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   60 |     if (lst[\n      |        ~    ^\n      |             )\n\
    \   61 | }\n      | ~            \n/tmp/tmpynem_7m7.cpp:61:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmpynem_7m7.cpp:62:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   62 | int main() {\n      |            ^\n/tmp/tmpynem_7m7.cpp:73:1: error:\
    \ expected \u2018}\u2019 at end of input\n   73 | }\n      | ^\n/tmp/tmpynem_7m7.cpp:12:39:\
    \ note: to match this \u2018{\u2019\n   12 | long skjkasdkd(std::vector<long>\
    \ lst) {\n      |                                       ^\n/tmp/tmpynem_7m7.cpp:73:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   73 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpjm6l9efh: /tmp/tmpjm6l9efh.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(auto i : lst){\n        if(i > max)\n   \
    \         max = i;\n    }\n    std::vector<long> primes;\n    for(long i = 2;\
    \ i <= max; i++){\n        bool isPrime = true;\n        for(auto j : primes){\n\
    \            if(i % j == 0){\n                isPrime = false;\n             \
    \   break;\n            }\n        }\n        if(isPrime)\n            primes.push_back(i);\n\
    \    }\n    long largestPrime = 0;\n    for(auto i : lst){\n        if(std::find(primes.begin(),\
    \ primes.end(), i) != primes.end()){\n            if(i > largestPrime)\n     \
    \           largestPrime = i;\n        }\n    }\n    long sum = 0;\n    while(largestPrime\
    \ > 0){\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j < i; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpq4naw0re: /tmp/tmpq4naw0re.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= sqrt(i); j++){\n            if(i % j == 0){\n   \
    \             isPrime = false;\n                break;\n            }\n      \
    \  }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n\
    \    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n       \
    \ if(primes[i] > maxPrime){\n            maxPrime = primes[i];\n        }\n  \
    \  }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n\
    \        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp1b0u2ygu: /tmp/tmp1b0u2ygu.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong largestPrime = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\
    \t\tif (lst[i] > largestPrime) {\n\t\t\tlargestPrime = lst[i];\n\t\t}\n\t}\n\t\
    long sum = 0;\n\twhile (largestPrime > 0) {\n\t\tsum += largestPrime % 10;\n\t\
    \tlargestPrime /= 10;\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpdt8ema44: /tmp/tmpdt8ema44.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpljr94nbe: /tmp/tmpljr94nbe.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j < i; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        bool isInList = false;\n        for(int j = 0; j < lst.size(); j++){\n\
    \            if(primes[i] == lst[j]){\n                isInList = true;\n    \
    \            break;\n            }\n        }\n        if(isInList && primes[i]\
    \ > maxPrime) maxPrime = primes[i];\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool prime = true;\n  \
    \      for(int j = 2; j < i; j++){\n            if(i % j == 0){\n            \
    \    prime = false;\n                break;\n            }\n        }\n      \
    \  if(prime){\n            primes.push_back(i);\n        }\n    }\n    long maxPrime\
    \ = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i] > maxPrime){\n\
    \            maxPrime = primes[i];\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp9gujdppv: /tmp/tmp9gujdppv.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpxrdkk0pe: /tmp/tmpxrdkk0pe.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime){\n            primes.push_back(i);\n        }\n    }\n   \
    \ long largestPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n     \
    \   for(long j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > largestPrime){\n                    largestPrime\
    \ = primes[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while(largestPrime > 0){\n        sum += largestPrime % 10;\n    \
    \    largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660126829
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (int j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpj_yuxumn: /tmp/tmpj_yuxumn.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n   \
    \ for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(long\
    \ j = 2; j < i; j++){\n            if(i % j == 0){\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        if(isPrime)\
    \ primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(long i = 0; i <\
    \ primes.size(); i++){\n        if(primes[i] > maxPrime) maxPrime = primes[i];\n\
    \    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime %\
    \ 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp7shlfdg5: /tmp/tmp7shlfdg5.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n  \
    \      for(long j = 2; j < i; j++){\n            if(i % j == 0){\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if(isPrime){\n            std::string str = std::to_string(i);\n       \
    \     for(long k = 0; k < str.length(); k++){\n                sum += str[k] -\
    \ '0';\n            }\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp345o238f: /tmp/tmp345o238f.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpjm6l9efh: /tmp/tmpjm6l9efh.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpq4naw0re: /tmp/tmpq4naw0re.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<bool> prime(max+1,\
    \ true);\n    prime[0] = false;\n    prime[1] = false;\n    for(int i = 2; i <=\
    \ max; i++){\n        if(prime[i]){\n            for(int j = i*2; j <= max; j+=i){\n\
    \                prime[j] = false;\n            }\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(prime[lst[i]]\
    \ && lst[i] > maxPrime)\n            maxPrime = lst[i];\n    }\n    long sum =\
    \ 0;\n    while(maxPrime > 0){\n        sum += maxPrime%10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (int j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long largest_prime = 0;\n  for (long i = 0; i < lst.size(); i++) {\n\
    \    if (lst[i] > largest_prime) {\n      bool is_prime = true;\n      for (long\
    \ j = 2; j < lst[i]; j++) {\n        if (lst[i] % j == 0) {\n          is_prime\
    \ = false;\n          break;\n        }\n      }\n      if (is_prime) {\n    \
    \    largest_prime = lst[i];\n      }\n    }\n  }\n  long sum = 0;\n  while (largest_prime\
    \ > 0) {\n    sum += largest_prime % 10;\n    largest_prime /= 10;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long> primes;\n\
    \    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int\
    \ j = 2; j <= i/2; j++){\n            if(i % j == 0){\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if(isPrime)\n\
    \            primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(int\
    \ i = 0; i < primes.size(); i++){\n        for(int j = 0; j < lst.size(); j++){\n\
    \            if(primes[i] == lst[j]){\n                if(primes[i] > maxPrime)\n\
    \                    maxPrime = primes[i];\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n\
    \        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126828
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime){\n            primes.push_back(i);\n        }\n    }\n   \
    \ long maxPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n        bool\
    \ isInList = false;\n        for(long j = 0; j < lst.size(); j++){\n         \
    \   if(primes[i] == lst[j]){\n                isInList = true;\n             \
    \   break;\n            }\n        }\n        if(isInList){\n            if(primes[i]\
    \ > maxPrime){\n                maxPrime = primes[i];\n            }\n       \
    \ }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime\
    \ % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660126829
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (auto i : lst) {\n        if (i\
    \ > largestPrime && i % 2 != 0 && i % 3 != 0 && i % 5 != 0 && i % 7 != 0) {\n\
    \            largestPrime = i;\n        }\n    }\n    long sum = 0;\n    while\
    \ (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpfwra2i57: /tmp/tmpfwra2i57.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpxrdkk0pe: /tmp/tmpxrdkk0pe.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long count\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n\
    \            count++;\n        }\n    }\n    if(count > 1){\n        return 0;\n\
    \    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n\
    \            if(lst[i] % 2 == 0){\n                return 0;\n            }\n\
    \            for(int j = 3; j < lst[i]; j++){\n                if(lst[i] % j ==\
    \ 0){\n                    return 0;\n                }\n            }\n     \
    \   }\n    }\n    long sum = 0;\n    while(max > 0){\n        sum += max % 10;\n\
    \        max /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp_29buqey: /tmp/tmp_29buqey.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > largestPrime){\n            largestPrime = primes[i];\n        }\n    }\n\
    \    long sum = 0;\n    while(largestPrime > 0){\n        sum += largestPrime\
    \ % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpd375prz3: /tmp/tmpd375prz3.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n  \
    \      for(long j = 2; j < i; j++){\n            if(i % j == 0){\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if(isPrime){\n            long temp = i;\n            while(temp > 0){\n\
    \                sum += temp % 10;\n                temp /= 10;\n            }\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp3oaik9fc: /tmp/tmp3oaik9fc.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j < i; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    long sum = 0;\n    while(max > 0){\n\
    \        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpm7nv2g_y: /tmp/tmpm7nv2g_y.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime)\n            primes.push_back(i);\n    }\n    long maxPrime\
    \ = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i] > maxPrime)\n\
    \            maxPrime = primes[i];\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpnsqyra3o: /tmp/tmpnsqyra3o.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime){\n            primes.push_back(i);\n        }\n    }\n   \
    \ long maxPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpienm4ayo: /tmp/tmpienm4ayo.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > largestPrime){\n                    largestPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(largestPrime\
    \ > 0){\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n     \
    \   for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > largestPrime){\n                    largestPrime\
    \ = primes[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while(largestPrime != 0){\n        sum += largestPrime % 10;\n   \
    \     largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    std::vector<long> primes;\n    for(long i = 0; i < lst.size(); i++)\
    \ {\n        if(lst[i] == 1) {\n            continue;\n        }\n        bool\
    \ isPrime = true;\n        for(long j = 2; j <= sqrt(lst[i]); j++) {\n       \
    \     if(lst[i] % j == 0) {\n                isPrime = false;\n              \
    \  break;\n            }\n        }\n        if(isPrime) {\n            primes.push_back(lst[i]);\n\
    \        }\n    }\n    long largestPrime = *std::max_element(primes.begin(), primes.end());\n\
    \    long sum = 0;\n    while(largestPrime > 0) {\n        sum += largestPrime\
    \ % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126825
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 != 0) {\n\
    \                if (lst[i] % 3 != 0) {\n                    if (lst[i] % 5 !=\
    \ 0) {\n                        if (lst[i] % 7 != 0) {\n                     \
    \       if (lst[i] % 11 != 0) {\n                                if (lst[i] %\
    \ 13 != 0) {\n                                    if (lst[i] % 17 != 0) {\n  \
    \                                      if (lst[i] % 19 != 0) {\n             \
    \                               if (lst[i] % 23 != 0) {\n                    \
    \                            if (lst[i] % 29 != 0) {\n                       \
    \                             if (lst[i] % 31 != 0) {\n                      \
    \                                  if (lst[i] % 37 != 0) {\n                 \
    \                                           if (lst[i] % 41 != 0) {\n        \
    \                                                        if (lst[i] % 43 != 0)\
    \ {\n                                                                    if (lst[i]\
    \ % 47 != 0) {\n                                                             \
    \           if (lst[i] % 53 != 0) {\n                                        \
    \                                    if (lst[i] % 59 != 0) {\n               \
    \                                                                 if (lst[i] %\
    \ 61 != 0) {\n                                                               \
    \                     if (lst[i] % 67 != 0) {\n                              \
    \                                                          if (lst[i] % 71 !=\
    \ 0) {\n                                                                     \
    \                       if (lst[i] % 73 != 0) {\n                            \
    \                                                                    if (lst[i]\
    \ % 79 != 0) {\n                                                             \
    \                                       if (lst[i] % 83 != 0) {\n            \
    \                                                                            \
    \                if (lst[i] % 89 != 0) {\n                                   \
    \                                                                         if (lst[i]\
    \ % 97 != 0) {\n                                                             \
    \                                                   largestPrime = lst[i];\n \
    \                                                                            \
    \                               }\n                                          \
    \                      \n}\nint main() {\n    auto candidate = skjkasdkd;\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3,\
    \ (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32,\
    \ (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\
    \ == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1,\
    \ (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1,\
    \ (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
    \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
    \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
    \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpddiw1py2.cpp: In function \u2018long int skjkasdkd(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpddiw1py2.cpp:45:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |     \
    \       ^\n/tmp/tmpddiw1py2.cpp:56:1: error: expected \u2018}\u2019 at end of\
    \ input\n   56 | }\n      | ^\n/tmp/tmpddiw1py2.cpp:38:123: note: to match this\
    \ \u2018{\u2019\n   38 |                                                     \
    \                                                if (lst[i] % 83 != 0) {\n   \
    \   |                                                                        \
    \                                                   ^\n/tmp/tmpddiw1py2.cpp:56:1:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmpddiw1py2.cpp:37:119:\
    \ note: to match this \u2018{\u2019\n   37 |                                 \
    \                                                                if (lst[i] %\
    \ 79 != 0) {\n      |                                                        \
    \                                                               ^\n/tmp/tmpddiw1py2.cpp:56:1:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmpddiw1py2.cpp:36:115:\
    \ note: to match this \u2018{\u2019\n   36 |                                 \
    \                                                            if (lst[i] % 73 !=\
    \ 0) {\n      |                                                              \
    \                                                     ^\n/tmp/tmpddiw1py2.cpp:56:1:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmpddiw1py2.cpp:35:111:\
    \ note: to match this \u2018{\u2019\n   35 |                                 \
    \                                                        if (lst[i] % 71 != 0)\
    \ {\n      |                                                                 \
    \                                              ^\n/tmp/tmpddiw1py2.cpp:56:1: error:\
    \ expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmpddiw1py2.cpp:34:107:\
    \ note: to match this \u2018{\u2019\n   34 |                                 \
    \                                                    if (l"
  stdout: ''
  timestamp: 1660126825
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        bool isInList\
    \ = false;\n        for(int j = 0; j < lst.size(); j++){\n            if(primes[i]\
    \ == lst[j]){\n                isInList = true;\n                break;\n    \
    \        }\n        }\n        if(isInList){\n            if(primes[i] > maxPrime){\n\
    \                maxPrime = primes[i];\n            }\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126829
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ sum = 0;\n    for(int i = 0; i < primes.size(); i++){\n        long num = primes[i];\n\
    \        while(num > 0){\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpkghyjvru: /tmp/tmpkghyjvru.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ sum = 0;\n    for(int i = 0; i < primes.size(); i++){\n        while(primes[i]\
    \ > 0){\n            sum += primes[i] % 10;\n            primes[i] /= 10;\n  \
    \      }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpu2rr4937: /tmp/tmpu2rr4937.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n   \
    \     for(int j = 2; j < i; j++){\n            if(i % j == 0){\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   if(isPrime){\n            int k = i;\n            while(k > 0){\n        \
    \        sum += k % 10;\n                k /= 10;\n            }\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3,\
    \ (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32,\
    \ (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\
    \ == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1,\
    \ (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1,\
    \ (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
    \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
    \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
    \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmphhx6gb5e: /tmp/tmphhx6gb5e.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpq4naw0re: /tmp/tmpq4naw0re.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpxrdkk0pe: /tmp/tmpxrdkk0pe.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j < i; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n    }\n  }\n\
    \  long largest = 0;\n  for (int i = 0; i < primes.size(); i++) {\n    if (primes[i]\
    \ > largest) {\n      largest = primes[i];\n    }\n  }\n  long sum = 0;\n  while\
    \ (largest > 0) {\n    sum += largest % 10;\n    largest /= 10;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpw0yl7674: /tmp/tmpw0yl7674.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 != 0 &&\
    \ lst[i] % 3 != 0 && lst[i] % 5 != 0 && lst[i] % 7 != 0) {\n                largestPrime\
    \ = lst[i];\n            }\n        }\n    }\n    std::cout << largestPrime <<\
    \ std::endl;\n    long sum = 0;\n    while (largestPrime > 0) {\n        sum +=\
    \ largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpxzfgm50_: /tmp/tmpxzfgm50_.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3)'' failed.

    '
  stdout: '181

    4597

    5107

    83

    1

    '
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpjm6l9efh: /tmp/tmpjm6l9efh.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool prime = true;\n  \
    \      for(int j = 2; j < i; j++){\n            if(i % j == 0){\n            \
    \    prime = false;\n                break;\n            }\n        }\n      \
    \  if(prime){\n            primes.push_back(i);\n        }\n    }\n    long largest\
    \ = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i] > largest){\n\
    \            largest = primes[i];\n        }\n    }\n    long sum = 0;\n    while(largest\
    \ > 0){\n        sum += largest % 10;\n        largest /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpi3r22unu: /tmp/tmpi3r22unu.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126828
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong max = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ > max) {\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tlong sum = 0;\n\tfor (int i = 0;\
    \ i < lst.size(); i++) {\n\t\tif (lst[i] == max) {\n\t\t\twhile (max > 0) {\n\t\
    \t\t\tsum += max % 10;\n\t\t\t\tmax /= 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg1m6ab3w: /tmp/tmpg1m6ab3w.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong max = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tlong\
    \ num = lst[i];\n\t\tif (num > max) {\n\t\t\tbool isPrime = true;\n\t\t\tfor (int\
    \ j = 2; j <= sqrt(num); j++) {\n\t\t\t\tif (num % j == 0) {\n\t\t\t\t\tisPrime\
    \ = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isPrime) {\n\t\t\t\
    \tmax = num;\n\t\t\t}\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (max > 0) {\n\t\t\
    sum += max % 10;\n\t\tmax /= 10;\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 != 0) {\n\
    \                bool isPrime = true;\n                for (long j = 3; j < lst[i];\
    \ j++) {\n                    if (lst[i] % j == 0) {\n                       \
    \ isPrime = false;\n                        break;\n                    }\n  \
    \              }\n                if (isPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n  \
    \      largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long> primes;\n\
    \    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int\
    \ j = 2; j <= i/2; j++){\n            if(i % j == 0){\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if(isPrime)\n\
    \            primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(int\
    \ i = 0; i < primes.size(); i++){\n        if(primes[i] > maxPrime)\n        \
    \    maxPrime = primes[i];\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n\
    \        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpeu7ywqp4: /tmp/tmpeu7ywqp4.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j < i; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n    }\n  }\n\
    \  long maxPrime = 0;\n  for (int i = 0; i < primes.size(); i++) {\n    if (primes[i]\
    \ > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n  long sum = 0;\n  while\
    \ (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime /= 10;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmptmi3mwnc: /tmp/tmptmi3mwnc.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    int sum\
    \ = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpwomgtuqq: /tmp/tmpwomgtuqq.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    long sum = 0;\n    while(max > 0){\n\
    \        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpm7nv2g_y: /tmp/tmpm7nv2g_y.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpq4naw0re: /tmp/tmpq4naw0re.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n   \
    \     for(int j = 2; j < i; j++){\n            if(i % j == 0){\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   if(isPrime){\n            std::string str = std::to_string(i);\n         \
    \   for(int j = 0; j < str.length(); j++){\n                sum += str[j] - '0';\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmppmq97g1w: /tmp/tmppmq97g1w.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpjm6l9efh: /tmp/tmpjm6l9efh.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (int j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    std::vector<long> primes;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    for (long i = 2; i <= max; i++) {\n        bool isPrime\
    \ = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime) {\n            primes.push_back(i);\n       \
    \ }\n    }\n    long maxPrime = 0;\n    for (long i = 0; i < primes.size(); i++)\
    \ {\n        for (long j = 0; j < lst.size(); j++) {\n            if (primes[i]\
    \ == lst[j]) {\n                if (primes[i] > maxPrime) {\n                \
    \    maxPrime = primes[i];\n                }\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while (maxPrime > 0) {\n        sum += maxPrime % 10;\n\
    \        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660126832
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpq4naw0re: /tmp/tmpq4naw0re.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpq4naw0re: /tmp/tmpq4naw0re.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n   \
    \     for(int j = 2; j < i; j++){\n            if(i % j == 0){\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   if(isPrime){\n            while(max % i == 0){\n                sum += i %\
    \ 10;\n                i /= 10;\n            }\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong max = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ > max) {\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tstd::vector<long> primes;\n\tfor\
    \ (int i = 2; i <= max; i++) {\n\t\tbool isPrime = true;\n\t\tfor (int j = 2;\
    \ j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tprimes.push_back(i);\n\t\t}\n\t}\n\t\
    long largestPrime = 0;\n\tfor (int i = 0; i < primes.size(); i++) {\n\t\tfor (int\
    \ j = 0; j < lst.size(); j++) {\n\t\t\tif (primes[i] == lst[j]) {\n\t\t\t\tlargestPrime\
    \ = primes[i];\n\t\t\t}\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (largestPrime !=\
    \ 0) {\n\t\tsum += largestPrime % 10;\n\t\tlargestPrime /= 10;\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126830
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n     \
    \   for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > largestPrime){\n                    largestPrime\
    \ = primes[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while(largestPrime > 0){\n        sum += largestPrime % 10;\n    \
    \    largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126829
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpq4naw0re: /tmp/tmpq4naw0re.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j <= i/2; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126822
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool prime = true;\n  \
    \      for(int j = 2; j < i; j++){\n            if(i % j == 0){\n            \
    \    prime = false;\n                break;\n            }\n        }\n      \
    \  if(prime){\n            primes.push_back(i);\n        }\n    }\n    long maxPrime\
    \ = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i] > maxPrime){\n\
    \            maxPrime = primes[i];\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp9gujdppv: /tmp/tmp9gujdppv.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa7ai9h66: /tmp/tmpa7ai9h66.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    std::vector<long> primes;\n    for(int i = 0; i < lst.size(); i++)\
    \ {\n        if(lst[i] == 0 || lst[i] == 1) {\n            continue;\n       \
    \ }\n        bool isPrime = true;\n        for(int j = 2; j < lst[i]; j++) {\n\
    \            if(lst[i] % j == 0) {\n                isPrime = false;\n       \
    \         break;\n            }\n        }\n        if(isPrime) {\n          \
    \  primes.push_back(lst[i]);\n        }\n    }\n    long maxPrime = *std::max_element(primes.begin(),\
    \ primes.end());\n    long sum = 0;\n    while(maxPrime > 0) {\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j <= i/2; j++){\n            if(i % j == 0){\n      \
    \          isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpb6iyiete: /tmp/tmpb6iyiete.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n   \
    \     for(int j = 2; j < i; j++){\n            if(i % j == 0){\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   if(isPrime){\n            int temp = i;\n            while(temp > 0){\n  \
    \              sum += temp % 10;\n                temp /= 10;\n            }\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp8w26n5m9: /tmp/tmp8w26n5m9.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(auto i : lst) {\n        if(i > max) max\
    \ = i;\n    }\n    std::vector<bool> prime(max+1, true);\n    prime[0] = false;\n\
    \    prime[1] = false;\n    for(long i = 2; i <= max; i++) {\n        if(prime[i])\
    \ {\n            for(long j = i*i; j <= max; j += i) {\n                prime[j]\
    \ = false;\n            }\n        }\n    }\n    long max_prime = 0;\n    for(auto\
    \ i : lst) {\n        if(prime[i] && i > max_prime) max_prime = i;\n    }\n  \
    \  long sum = 0;\n    while(max_prime > 0) {\n        sum += max_prime % 10;\n\
    \        max_prime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg3gfypsm: /tmp/tmpg3gfypsm.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j <= i / 2; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n    \
    \    break;\n      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n\
    \    }\n  }\n  long maxPrime = 0;\n  for (int i = 0; i < primes.size(); i++) {\n\
    \    if (primes[i] > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n  long\
    \ sum = 0;\n  while (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime\
    \ /= 10;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpykzgorpv: /tmp/tmpykzgorpv.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= sqrt(i); j++){\n            if(i % j == 0){\n   \
    \             isPrime = false;\n                break;\n            }\n      \
    \  }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n\
    \    long largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n   \
    \     if(primes[i] > largestPrime){\n            largestPrime = primes[i];\n \
    \       }\n    }\n    long sum = 0;\n    while(largestPrime > 0){\n        sum\
    \ += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp1n3h9scd: /tmp/tmp1n3h9scd.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool prime = true;\n  \
    \      for(int j = 2; j < i; j++){\n            if(i % j == 0){\n            \
    \    prime = false;\n                break;\n            }\n        }\n      \
    \  if(prime){\n            primes.push_back(i);\n        }\n    }\n    long maxPrime\
    \ = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i] > maxPrime){\n\
    \            maxPrime = primes[i];\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp9gujdppv: /tmp/tmp9gujdppv.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
