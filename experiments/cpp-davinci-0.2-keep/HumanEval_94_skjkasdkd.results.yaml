language: cpp
name: HumanEval_94_skjkasdkd
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpxczxwugg: /tmp/tmpxczxwugg.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long> primes;\n\
    \    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int\
    \ j = 2; j <= i/2; j++){\n            if(i % j == 0){\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if(isPrime)\n\
    \            primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(int\
    \ i = 0; i < primes.size(); i++){\n        bool isInList = false;\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         isInList = true;\n                break;\n            }\n        }\n\
    \        if(isInList && primes[i] > maxPrime)\n            maxPrime = primes[i];\n\
    \    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime %\
    \ 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpktihvcjl: /tmp/tmpktihvcjl.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 != 0) {\n\
    \                bool isPrime = true;\n                for (long j = 3; j < lst[i];\
    \ j++) {\n                    if (lst[i] % j == 0) {\n                       \
    \ isPrime = false;\n                        break;\n                    }\n  \
    \              }\n                if (isPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n  \
    \      largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp98mvz1ah: /tmp/tmp98mvz1ah.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(int i = 2; i <= max; i++){\n        if(max % i == 0){\n      \
    \      sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp39dhhgzg: /tmp/tmp39dhhgzg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpdr1ajtnr: /tmp/tmpdr1ajtnr.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpl9t_an7a: /tmp/tmpl9t_an7a.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j < i; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        bool isInList = false;\n        for(int j = 0; j < lst.size(); j++){\n\
    \            if(primes[i] == lst[j]){\n                isInList = true;\n    \
    \            break;\n            }\n        }\n        if(isInList){\n       \
    \     if(primes[i] > maxPrime) maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    long max2 = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > max2){\n            max2 = lst[i];\n        }\n \
    \   }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == max2){\n\
    \            lst.erase(lst.begin() + i);\n        }\n    }\n    long max3 = 0;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > max3){\n      \
    \      max3 = lst[i];\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] == max3){\n            lst.erase(lst.begin() + i);\n      \
    \  }\n    }\n    long max4 = 0;\n    for(int i = 0; i < lst.size(); i++){\n  \
    \      if(lst[i] > max4){\n            max4 = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max4){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    long max5 = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > max5){\n            max5 = lst[i];\n        }\n \
    \   }\n    for(int i = 0; i < lst.size(); i++){\n\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmjv_y0kn.cpp: In function \u2018long int skjkasdkd(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmjv_y0kn.cpp:66:9: warning: empty parentheses were disambiguated\
    \ as a function declaration [-Wvexing-parse]\n   66 | int main() {\n      |  \
    \       ^~\n/tmp/tmpmjv_y0kn.cpp:66:9: note: remove parentheses to default-initialize\
    \ a variable\n   66 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpmjv_y0kn.cpp:66:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpmjv_y0kn.cpp:66:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   66 | int main() {\n      |            ^\n/tmp/tmpmjv_y0kn.cpp:77:2: error:\
    \ expected \u2018}\u2019 at end of input\n   77 | }\n      |  ^\n/tmp/tmpmjv_y0kn.cpp:12:39:\
    \ note: to match this \u2018{\u2019\n   12 | long skjkasdkd(std::vector<long>\
    \ lst) {\n      |                                       ^\n/tmp/tmpmjv_y0kn.cpp:77:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   77 | }\n      |  ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j <= i / 2; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n    \
    \    break;\n      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n\
    \    }\n  }\n  long largestPrime = 0;\n  for (int i = 0; i < primes.size(); i++)\
    \ {\n    if (primes[i] > largestPrime) {\n      largestPrime = primes[i];\n  \
    \  }\n  }\n  long sum = 0;\n  while (largestPrime > 0) {\n    sum += largestPrime\
    \ % 10;\n    largestPrime /= 10;\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp7xz2f4qo: /tmp/tmp7xz2f4qo.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j <= i / 2; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n    \
    \    break;\n      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n\
    \    }\n  }\n  long maxPrime = 0;\n  for (int i = 0; i < primes.size(); i++) {\n\
    \    if (primes[i] > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n  long\
    \ sum = 0;\n  while (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime\
    \ /= 10;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa0tw3l72: /tmp/tmpa0tw3l72.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime){\n            primes.push_back(i);\n        }\n    }\n   \
    \ long maxPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpf36zvc2y: /tmp/tmpf36zvc2y.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long largest = 0;\n  for (long i = 0; i < lst.size(); i++) {\n   \
    \ if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  long sum = 0;\n\
    \  while (largest > 0) {\n    sum += largest % 10;\n    largest /= 10;\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpe_j35cn4: /tmp/tmpe_j35cn4.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n  \
    \  while(max > 0){\n        sum += max % 10;\n        max /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpso1ou8g7: /tmp/tmpso1ou8g7.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long> primes;\n\
    \    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int\
    \ j = 2; j < i; j++){\n            if(i % j == 0){\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        if(isPrime)\n\
    \            primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(int\
    \ i = 0; i < primes.size(); i++){\n        for(int j = 0; j < lst.size(); j++){\n\
    \            if(primes[i] == lst[j]){\n                if(primes[i] > maxPrime)\n\
    \                    maxPrime = primes[i];\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n\
    \        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= sqrt(i); j++){\n            if(i % j == 0){\n   \
    \             isPrime = false;\n                break;\n            }\n      \
    \  }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n\
    \    long largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n   \
    \     for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > largestPrime){\n                    largestPrime\
    \ = primes[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while(largestPrime > 0){\n        sum += largestPrime % 10;\n    \
    \    largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool prime = true;\n \
    \       for(long j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      prime = false;\n                break;\n            }\n        }\n    \
    \    if(prime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ largest = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > largest){\n            largest = primes[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(largest > 0){\n        sum += largest % 10;\n        largest\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpjgtqewkl: /tmp/tmpjgtqewkl.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ == max){\n            lst.erase(lst.begin() + i);\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ == max){\n            lst.erase(lst.begin() + i);\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ == max){\n            lst.erase(lst.begin() + i);\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ == max){\n            lst.erase(lst.begin() + i);\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst\n\
    }\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8zpahzq.cpp: In function \u2018long int skjkasdkd(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpi8zpahzq.cpp:61:16: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   61 |             lst\n      |                ^\n   \
    \   |                ;\n   62 | }\n      | ~               \n/tmp/tmpi8zpahzq.cpp:63:9:\
    \ warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   63 | int main() {\n      |         ^~\n/tmp/tmpi8zpahzq.cpp:63:9: note: remove\
    \ parentheses to default-initialize a variable\n   63 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmpi8zpahzq.cpp:63:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmpi8zpahzq.cpp:63:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   63 | int main() {\n      |            ^\n/tmp/tmpi8zpahzq.cpp:74:2: error:\
    \ expected \u2018}\u2019 at end of input\n   74 | }\n      |  ^\n/tmp/tmpi8zpahzq.cpp:59:40:\
    \ note: to match this \u2018{\u2019\n   59 |     for(int i = 0; i < lst.size();\
    \ i++){\n      |                                        ^\n/tmp/tmpi8zpahzq.cpp:74:2:\
    \ error: expected \u2018}\u2019 at end of input\n   74 | }\n      |  ^\n/tmp/tmpi8zpahzq.cpp:12:39:\
    \ note: to match this \u2018{\u2019\n   12 | long skjkasdkd(std::vector<long>\
    \ lst) {\n      |                                       ^\n/tmp/tmpi8zpahzq.cpp:74:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   74 | }\n      |  ^\n"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 != 0) {\n\
    \                bool isPrime = true;\n                for (long j = 3; j < lst[i];\
    \ j++) {\n                    if (lst[i] % j == 0) {\n                       \
    \ isPrime = false;\n                        break;\n                    }\n  \
    \              }\n                if (isPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n  \
    \      largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long> primes;\n\
    \    for(int i = 2; i <= max; i++){\n        bool prime = true;\n        for(int\
    \ j = 2; j < i; j++){\n            if(i % j == 0){\n                prime = false;\n\
    \                break;\n            }\n        }\n        if(prime)\n       \
    \     primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(int i = 0;\
    \ i < primes.size(); i++){\n        for(int j = 0; j < lst.size(); j++){\n   \
    \         if(primes[i] == lst[j]){\n                if(primes[i] > maxPrime)\n\
    \                    maxPrime = primes[i];\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n\
    \        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpjc7gt6cv: /tmp/tmpjc7gt6cv.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpolnsyry6: /tmp/tmpolnsyry6.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpvur_53gl: /tmp/tmpvur_53gl.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    // your code here\n    long max=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    long\
    \ sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]==max){\n     \
    \       while(lst[i]!=0){\n                sum+=lst[i]%10;\n                lst[i]=lst[i]/10;\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp5u52qv8s: /tmp/tmp5u52qv8s.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > largestPrime){\n            largestPrime = primes[i];\n        }\n    }\n\
    \    long sum = 0;\n    while(largestPrime > 0){\n        sum += largestPrime\
    \ % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpl496yl9g: /tmp/tmpl496yl9g.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j <= i/2; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    std::vector<long> primes;\n    long max = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    for (long i = 2; i <= max; i++) {\n        bool isPrime\
    \ = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime) {\n            primes.push_back(i);\n       \
    \ }\n    }\n    long maxPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        for (long j = 0; j < primes.size(); j++) {\n            if (lst[i]\
    \ == primes[j]) {\n                if (primes[j] > maxPrime) {\n             \
    \       maxPrime = primes[j];\n                }\n            }\n        }\n \
    \   }\n    long sum = 0;\n    while (maxPrime > 0) {\n        sum += maxPrime\
    \ % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong max = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ > max) {\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tstd::vector<long> primes;\n\tfor\
    \ (int i = 2; i <= max; i++) {\n\t\tbool isPrime = true;\n\t\tfor (int j = 2;\
    \ j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tprimes.push_back(i);\n\t\t}\n\t}\n\t\
    long maxPrime = 0;\n\tfor (int i = 0; i < primes.size(); i++) {\n\t\tif (primes[i]\
    \ > maxPrime) {\n\t\t\tmaxPrime = primes[i];\n\t\t}\n\t}\n\tlong sum = 0;\n\t\
    while (maxPrime > 0) {\n\t\tsum += maxPrime % 10;\n\t\tmaxPrime /= 10;\n\t}\n\t\
    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp6tk9n_0r: /tmp/tmp6tk9n_0r.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpkrknacvn: /tmp/tmpkrknacvn.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        bool is_prime = true;\n        for (long j = 2; j < lst[i]; j++) {\n\
    \            if (lst[i] % j == 0) {\n                is_prime = false;\n     \
    \           break;\n            }\n        }\n        if (is_prime && lst[i] >\
    \ max_prime) {\n            max_prime = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n  \
    \      for(long j = 2; j < i; j++){\n            if(i % j == 0){\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if(isPrime){\n            long temp = i;\n            while(temp > 0){\n\
    \                sum += temp % 10;\n                temp /= 10;\n            }\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpbjdaabd9: /tmp/tmpbjdaabd9.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 != 0) {\n\
    \                if (lst[i] % 3 != 0) {\n                    if (lst[i] % 5 !=\
    \ 0) {\n                        if (lst[i] % 7 != 0) {\n                     \
    \       if (lst[i] % 11 != 0) {\n                                if (lst[i] %\
    \ 13 != 0) {\n                                    if (lst[i] % 17 != 0) {\n  \
    \                                      if (lst[i] % 19 != 0) {\n             \
    \                               if (lst[i] % 23 != 0) {\n                    \
    \                            if (lst[i] % 29 != 0) {\n                       \
    \                             if (lst[i] % 31 != 0) {\n                      \
    \                                  if (lst[i] % 37 != 0) {\n                 \
    \                                           if (lst[i] % 41 != 0) {\n        \
    \                                                        if (lst[i] % 43 != 0)\
    \ {\n                                                                    if (lst[i]\
    \ % 47 != 0) {\n                                                             \
    \           if (lst[i] % 53 != 0) {\n                                        \
    \                                    if (lst[i] % 59 != 0) {\n               \
    \                                                                 if (lst[i] %\
    \ 61 != 0) {\n                                                               \
    \                     if (lst[i] % 67 != 0) {\n                              \
    \                                                          if (lst[i] % 71 !=\
    \ 0) {\n                                                                     \
    \                       if (lst[i] % 73 != 0) {\n                            \
    \                                                                    if (lst[i]\
    \ % 79 != 0) {\n                                                             \
    \                                       if (lst[i] % 83 != 0) {\n            \
    \                                                                            \
    \                if (lst[i] % 89 != 0) {\n                                   \
    \                                                                         if (lst[i]\
    \ % 97 != 0) {\n                                                             \
    \                                                   largestPrime = lst[i];\n \
    \                                                                            \
    \                               }\n                                          \
    \                      \n}\nint main() {\n    auto candidate = skjkasdkd;\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3,\
    \ (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32,\
    \ (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\
    \ == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1,\
    \ (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1,\
    \ (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
    \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
    \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
    \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp06v4gfx3.cpp: In function \u2018long int skjkasdkd(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp06v4gfx3.cpp:45:9: warning: empty parentheses were disambiguated\
    \ as a function declaration [-Wvexing-parse]\n   45 | int main() {\n      |  \
    \       ^~\n/tmp/tmp06v4gfx3.cpp:45:9: note: remove parentheses to default-initialize\
    \ a variable\n   45 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp06v4gfx3.cpp:45:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp06v4gfx3.cpp:45:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   45 | int main() {\n      |            ^\n/tmp/tmp06v4gfx3.cpp:56:2: error:\
    \ expected \u2018}\u2019 at end of input\n   56 | }\n      |  ^\n/tmp/tmp06v4gfx3.cpp:38:123:\
    \ note: to match this \u2018{\u2019\n   38 |                                 \
    \                                                                    if (lst[i]\
    \ % 83 != 0) {\n      |                                                      \
    \                                                                     ^\n/tmp/tmp06v4gfx3.cpp:56:2:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      |  ^\n/tmp/tmp06v4gfx3.cpp:37:119:\
    \ note: to match this \u2018{\u2019\n   37 |                                 \
    \                                                                if (lst[i] %\
    \ 79 != 0) {\n      |                                                        \
    \                                                               ^\n/tmp/tmp06v4gfx3.cpp:56:2:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      |  ^\n/tmp/tmp06v4gfx3.cpp:36:115:\
    \ note: to match this \u2018{\u2019\n   36 |                                 \
    \                                                            if (lst[i] % 73 !=\
    \ 0) {\n      |                                                              \
    \                                                     ^\n/tmp/tmp06v4gfx3.cpp:56:2:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      |  ^\n/tmp/tmp06v4gfx3.cpp:35:111:\
    \ note: to match this \u2018{\u2019\n   35 |                                 \
    \                                                        if (lst[i] % 71 != 0) "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ sum = 0;\n    for(int i = 0; i < primes.size(); i++){\n        while(primes[i]\
    \ != 0){\n            sum += primes[i] % 10;\n            primes[i] /= 10;\n \
    \       }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp5z1rg_2m: /tmp/tmp5z1rg_2m.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    long sum = 0;\n    while(max > 0){\n\
    \        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpam81_523: /tmp/tmpam81_523.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n     \
    \   if(primes[i] > largestPrime){\n            largestPrime = primes[i];\n   \
    \     }\n    }\n    long sum = 0;\n    while(largestPrime > 0){\n        sum +=\
    \ largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp14faj_om: /tmp/tmp14faj_om.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j <= i/2; j++){\n            if(i % j == 0){\n      \
    \          isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmply6j0m2p: /tmp/tmply6j0m2p.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long> primes;\n\
    \    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int\
    \ j = 2; j <= i/2; j++){\n            if(i % j == 0){\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if(isPrime)\n\
    \            primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(int\
    \ i = 0; i < primes.size(); i++){\n        bool isInList = false;\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         isInList = true;\n                break;\n            }\n        }\n\
    \        if(isInList && primes[i] > maxPrime)\n            maxPrime = primes[i];\n\
    \    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime %\
    \ 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j < i; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n    }\n  }\n\
    \  long maxPrime = 0;\n  for (int i = 0; i < primes.size(); i++) {\n    if (primes[i]\
    \ > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n  long sum = 0;\n  while\
    \ (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime /= 10;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpat3skcr8: /tmp/tmpat3skcr8.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j < i; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(int i = 2; i <= max; i++){\n        if(max % i == 0){\n      \
    \      sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp4v2xbhae: /tmp/tmp4v2xbhae.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong max = 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ > max) {\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tfor (long i = 2; i < max; i++)\
    \ {\n\t\tfor (long j = 0; j < lst.size(); j++) {\n\t\t\tif (lst[j] % i == 0) {\n\
    \t\t\t\tlst[j] = lst[j] / i;\n\t\t\t}\n\t\t}\n\t}\n\tlong sum = 0;\n\tfor (long\
    \ i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > max) {\n\t\t\tmax = lst[i];\n\
    \t\t}\n\t}\n\twhile (max > 0) {\n\t\tsum += max % 10;\n\t\tmax /= 10;\n\t}\n\t\
    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp_sx6w89a: /tmp/tmp_sx6w89a.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong max = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ > max) {\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (max > 0)\
    \ {\n\t\tsum += max % 10;\n\t\tmax /= 10;\n\t}\n\treturn sum;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp8b9s2hva: /tmp/tmp8b9s2hva.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmppj9guk1e: /tmp/tmppj9guk1e.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > largestPrime){\n                    largestPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(largestPrime\
    \ > 0){\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j < i; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpsqa51_5s: /tmp/tmpsqa51_5s.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp06xo_kub: /tmp/tmp06xo_kub.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpe4hnc7bo: /tmp/tmpe4hnc7bo.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpureg34x5: /tmp/tmpureg34x5.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    long sum = 0;\n    while(max > 0){\n\
    \        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp5z2kqmw4: /tmp/tmp5z2kqmw4.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    long sum = 0;\n    while(max > 0){\n\
    \        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpj2yuip4p: /tmp/tmpj2yuip4p.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpejbc8gys: /tmp/tmpejbc8gys.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpzb6ccl4_: /tmp/tmpzb6ccl4_.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (long i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (long j = 2;\
    \ j <= i / 2; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n    \
    \    break;\n      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n\
    \    }\n  }\n  long maxPrime = 0;\n  for (long i = 0; i < primes.size(); i++)\
    \ {\n    if (primes[i] > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n\
    \  long sum = 0;\n  while (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime\
    \ /= 10;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpjph0kiu6: /tmp/tmpjph0kiu6.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] == 0 || lst[i] == 1) {\n            continue;\n      \
    \  }\n        bool isPrime = true;\n        for (int j = 2; j <= sqrt(lst[i]);\
    \ j++) {\n            if (lst[i] % j == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) {\n  \
    \          largestPrime = std::max(largestPrime, lst[i]);\n        }\n    }\n\
    \    long sum = 0;\n    while (largestPrime > 0) {\n        sum += largestPrime\
    \ % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j <= i/2; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    std::vector<long> digits;\n    while(maxPrime > 0){\n \
    \       digits.push_back(maxPrime % 10);\n        maxPrime /= 10;\n    }\n   \
    \ long sum = 0;\n    for(int i = 0; i < digits.size(); i++){\n        sum += digits[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3,\
    \ (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32,\
    \ (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\
    \ == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1,\
    \ (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1,\
    \ (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
    \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
    \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
    \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpgph_xaap: /tmp/tmpgph_xaap.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long mx = 0;\n    for(long i = 0; i < lst.size(); i++) {\n     \
    \   if(lst[i] > mx) {\n            mx = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= mx; i++) {\n        bool isPrime = true;\n\
    \        for(long j = 2; j <= sqrt(i); j++) {\n            if(i % j == 0) {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if(isPrime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    long mxPrime = 0;\n    for(long i = 0; i < primes.size(); i++) {\n\
    \        if(primes[i] > mxPrime) {\n            mxPrime = primes[i];\n       \
    \ }\n    }\n    long sum = 0;\n    while(mxPrime > 0) {\n        sum += mxPrime\
    \ % 10;\n        mxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp4n8066b6: /tmp/tmp4n8066b6.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long maxPrime = 0;\n    for (auto i : lst) {\n        if (i > maxPrime\
    \ && i % 2 != 0) {\n            bool isPrime = true;\n            for (int j =\
    \ 3; j < i; j += 2) {\n                if (i % j == 0) {\n                   \
    \ isPrime = false;\n                    break;\n                }\n          \
    \  }\n            if (isPrime) {\n                maxPrime = i;\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while (maxPrime > 0) {\n        sum\
    \ += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max)\n            max = lst[i];\n    }\n    long sum = 0;\n  \
    \  while(max > 0){\n        sum += max % 10;\n        max /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpcnzweg9e: /tmp/tmpcnzweg9e.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpyi6kpufe: /tmp/tmpyi6kpufe.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j <= i / 2; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n    \
    \    break;\n      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n\
    \    }\n  }\n  long maxPrime = 0;\n  for (int i = 0; i < primes.size(); i++) {\n\
    \    if (primes[i] > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n  long\
    \ sum = 0;\n  while (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime\
    \ /= 10;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp6ebdl5vv: /tmp/tmp6ebdl5vv.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmptb0_pe4d: /tmp/tmptb0_pe4d.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j < i; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n    }\n  }\n\
    \  long largestPrime = 0;\n  for (int i = 0; i < primes.size(); i++) {\n    bool\
    \ isInList = false;\n    for (int j = 0; j < lst.size(); j++) {\n      if (primes[i]\
    \ == lst[j]) {\n        isInList = true;\n        break;\n      }\n    }\n   \
    \ if (isInList) {\n      largestPrime = primes[i];\n    }\n  }\n  long sum = 0;\n\
    \  while (largestPrime > 0) {\n    sum += largestPrime % 10;\n    largestPrime\
    \ /= 10;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long sum = 0;\n    long max = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n   \
    \ }\n    std::vector<long> primes;\n    for(int i = 0; i < max; i++){\n      \
    \  if(lst[i] % 2 != 0 && lst[i] % 3 != 0 && lst[i] % 5 != 0 && lst[i] % 7 != 0){\n\
    \            primes.push_back(lst[i]);\n        }\n    }\n    for(int i = 0; i\
    \ < primes.size(); i++){\n        sum += primes[i];\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpyyv8iea7: /tmp/tmpyyv8iea7.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpcumzy86q: /tmp/tmpcumzy86q.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    // your code here\n    long max = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n   \
    \ }\n    std::vector<long> primes;\n    for(int i = 2; i <= max; i++){\n     \
    \   bool isPrime = true;\n        for(int j = 2; j <= i/2; j++){\n           \
    \ if(i % j == 0){\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if(isPrime){\n            primes.push_back(i);\n\
    \        }\n    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size();\
    \ i++){\n        if(primes[i] > maxPrime){\n            maxPrime = primes[i];\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp114_y2a3: /tmp/tmp114_y2a3.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp9237r0qp: /tmp/tmp9237r0qp.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpz8bjqid5: /tmp/tmpz8bjqid5.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool prime = true;\n  \
    \      for(int j = 2; j < i; j++){\n            if(i % j == 0){\n            \
    \    prime = false;\n                break;\n            }\n        }\n      \
    \  if(prime){\n            primes.push_back(i);\n        }\n    }\n    long largest\
    \ = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i] > largest){\n\
    \            largest = primes[i];\n        }\n    }\n    long sum = 0;\n    while(largest\
    \ > 0){\n        sum += largest % 10;\n        largest /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpg8yv6gdu: /tmp/tmpg8yv6gdu.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime){\n            primes.push_back(i);\n        }\n    }\n   \
    \ long maxPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n        for(long\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpaax2_i0q: /tmp/tmpaax2_i0q.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n     \
    \   bool isInList = false;\n        for(int j = 0; j < lst.size(); j++){\n   \
    \         if(primes[i] == lst[j]){\n                isInList = true;\n       \
    \         break;\n            }\n        }\n        if(isInList){\n          \
    \  largestPrime = primes[i];\n        }\n    }\n    long sum = 0;\n    while(largestPrime\
    \ > 0){\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 0; i < max; i++){\n        if(i == 0 || i == 1){\n\
    \            continue;\n        }\n        bool isPrime = true;\n        for(int\
    \ j = 2; j < i; j++){\n            if(i % j == 0){\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        if(isPrime){\n\
    \            primes.push_back(i);\n        }\n    }\n    long largestPrime = 0;\n\
    \    for(int i = 0; i < primes.size(); i++){\n        for(int j = 0; j < lst.size();\
    \ j++){\n            if(primes[i] == lst[j]){\n                largestPrime =\
    \ primes[i];\n            }\n        }\n    }\n    long sum = 0;\n    while(largestPrime\
    \ > 0){\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp1rhszp9h: /tmp/tmp1rhszp9h.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,
    (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==
    (25)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime)\n            primes.push_back(i);\n    }\n    long maxPrime\
    \ = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i] > maxPrime)\n\
    \            maxPrime = primes[i];\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpfjetabjs: /tmp/tmpfjetabjs.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    std::vector<long> primes;\n    for(int i = 0; i < lst.size(); i++)\
    \ {\n        if(lst[i] == 0 || lst[i] == 1) continue;\n        bool isPrime =\
    \ true;\n        for(int j = 2; j < lst[i]; j++) {\n            if(lst[i] % j\
    \ == 0) {\n                isPrime = false;\n                break;\n        \
    \    }\n        }\n        if(isPrime) primes.push_back(lst[i]);\n    }\n    long\
    \ largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++) {\n        if(primes[i]\
    \ > largestPrime) largestPrime = primes[i];\n    }\n    long sum = 0;\n    while(largestPrime\
    \ > 0) {\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp3fki9_05: /tmp/tmp3fki9_05.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    int sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpvr7h5pj1: /tmp/tmpvr7h5pj1.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpwhs5653a: /tmp/tmpwhs5653a.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  long sum = 0;\n  while (max > 0)\
    \ {\n    sum += max % 10;\n    max /= 10;\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpdk5dsnlk: /tmp/tmpdk5dsnlk.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] == max) {\n      lst.erase(lst.begin() + i);\n    }\n\
    \  }\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] == max) {\n   \
    \   lst.erase(lst.begin() + i);\n    }\n  }\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] == max) {\n      lst.erase(lst.begin() + i);\n    }\n\
    \  }\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] == max) {\n   \
    \   lst.erase(lst.begin() + i);\n    }\n  }\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] == max) {\n      lst.erase(lst.begin() + i);\n    }\n\
    \  }\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] == max) {\n   \
    \   lst.erase(lst.begin() + i);\n    }\n  }\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] == max) {\n      lst.erase(lst.begin() + i);\n    }\n\
    \  }\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] == max) {\n   \
    \   lst.erase(lst.begin() + i);\n    }\n  }\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (lst[\n}\nint main() {\n    auto candidate = skjkasdkd;\n   \
    \ assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3,\
    \ (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32,\
    \ (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\
    \ == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1,\
    \ (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1,\
    \ (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
    \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
    \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
    \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk7li8y1.cpp: In function \u2018long int skjkasdkd(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprk7li8y1.cpp:61:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmprk7li8y1.cpp:60:13:\
    \ error: expected \u2018]\u2019 before \u2018}\u2019 token\n   60 |     if (lst[\n\
    \      |             ^\n      |             ]\n   61 | }\n      | ~          \
    \  \n/tmp/tmprk7li8y1.cpp:60:13: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   60 |     if (lst[\n      |        ~    ^\n      |             )\n\
    \   61 | }\n      | ~            \n/tmp/tmprk7li8y1.cpp:61:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmprk7li8y1.cpp:62:9:\
    \ warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n\
    \   62 | int main() {\n      |         ^~\n/tmp/tmprk7li8y1.cpp:62:9: note: remove\
    \ parentheses to default-initialize a variable\n   62 | int main() {\n      |\
    \         ^~\n      |         --\n/tmp/tmprk7li8y1.cpp:62:9: note: or replace\
    \ parentheses with braces to value-initialize a variable\n/tmp/tmprk7li8y1.cpp:62:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   62 | int main() {\n      |            ^\n/tmp/tmprk7li8y1.cpp:73:2: error:\
    \ expected \u2018}\u2019 at end of input\n   73 | }\n      |  ^\n/tmp/tmprk7li8y1.cpp:12:39:\
    \ note: to match this \u2018{\u2019\n   12 | long skjkasdkd(std::vector<long>\
    \ lst) {\n      |                                       ^\n/tmp/tmprk7li8y1.cpp:73:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   73 | }\n      |  ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpdwf_bk9y: /tmp/tmpdwf_bk9y.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(auto i : lst){\n        if(i > max)\n   \
    \         max = i;\n    }\n    std::vector<long> primes;\n    for(long i = 2;\
    \ i <= max; i++){\n        bool isPrime = true;\n        for(auto j : primes){\n\
    \            if(i % j == 0){\n                isPrime = false;\n             \
    \   break;\n            }\n        }\n        if(isPrime)\n            primes.push_back(i);\n\
    \    }\n    long largestPrime = 0;\n    for(auto i : lst){\n        if(std::find(primes.begin(),\
    \ primes.end(), i) != primes.end()){\n            if(i > largestPrime)\n     \
    \           largestPrime = i;\n        }\n    }\n    long sum = 0;\n    while(largestPrime\
    \ > 0){\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j < i; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpm8oautup: /tmp/tmpm8oautup.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmprdbc731z: /tmp/tmprdbc731z.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= sqrt(i); j++){\n            if(i % j == 0){\n   \
    \             isPrime = false;\n                break;\n            }\n      \
    \  }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n\
    \    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n       \
    \ if(primes[i] > maxPrime){\n            maxPrime = primes[i];\n        }\n  \
    \  }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n\
    \        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpukuh5lrn: /tmp/tmpukuh5lrn.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong largestPrime = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\
    \t\tif (lst[i] > largestPrime) {\n\t\t\tlargestPrime = lst[i];\n\t\t}\n\t}\n\t\
    long sum = 0;\n\twhile (largestPrime > 0) {\n\t\tsum += largestPrime % 10;\n\t\
    \tlargestPrime /= 10;\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpildg_wvd: /tmp/tmpildg_wvd.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmph_0_9roa: /tmp/tmph_0_9roa.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpcbr488kw: /tmp/tmpcbr488kw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp8xcc_gry: /tmp/tmp8xcc_gry.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j < i; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        bool isInList = false;\n        for(int j = 0; j < lst.size(); j++){\n\
    \            if(primes[i] == lst[j]){\n                isInList = true;\n    \
    \            break;\n            }\n        }\n        if(isInList && primes[i]\
    \ > maxPrime) maxPrime = primes[i];\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmppovqgymk: /tmp/tmppovqgymk.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool prime = true;\n  \
    \      for(int j = 2; j < i; j++){\n            if(i % j == 0){\n            \
    \    prime = false;\n                break;\n            }\n        }\n      \
    \  if(prime){\n            primes.push_back(i);\n        }\n    }\n    long maxPrime\
    \ = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i] > maxPrime){\n\
    \            maxPrime = primes[i];\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp5669awsd: /tmp/tmp5669awsd.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpaioozzc3: /tmp/tmpaioozzc3.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime){\n            primes.push_back(i);\n        }\n    }\n   \
    \ long largestPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n     \
    \   for(long j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > largestPrime){\n                    largestPrime\
    \ = primes[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while(largestPrime > 0){\n        sum += largestPrime % 10;\n    \
    \    largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (int j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpqp1ebalp: /tmp/tmpqp1ebalp.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n   \
    \ for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(long\
    \ j = 2; j < i; j++){\n            if(i % j == 0){\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        if(isPrime)\
    \ primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(long i = 0; i <\
    \ primes.size(); i++){\n        if(primes[i] > maxPrime) maxPrime = primes[i];\n\
    \    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime %\
    \ 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp76ymklzs: /tmp/tmp76ymklzs.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n  \
    \      for(long j = 2; j < i; j++){\n            if(i % j == 0){\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if(isPrime){\n            std::string str = std::to_string(i);\n       \
    \     for(long k = 0; k < str.length(); k++){\n                sum += str[k] -\
    \ '0';\n            }\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpzdc21_tk: /tmp/tmpzdc21_tk.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpovkiv_l5: /tmp/tmpovkiv_l5.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpwdwel8m1: /tmp/tmpwdwel8m1.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpqoo66e31: /tmp/tmpqoo66e31.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa0m9xd4p: /tmp/tmpa0m9xd4p.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<bool> prime(max+1,\
    \ true);\n    prime[0] = false;\n    prime[1] = false;\n    for(int i = 2; i <=\
    \ max; i++){\n        if(prime[i]){\n            for(int j = i*2; j <= max; j+=i){\n\
    \                prime[j] = false;\n            }\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(prime[lst[i]]\
    \ && lst[i] > maxPrime)\n            maxPrime = lst[i];\n    }\n    long sum =\
    \ 0;\n    while(maxPrime > 0){\n        sum += maxPrime%10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (int j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long largest_prime = 0;\n  for (long i = 0; i < lst.size(); i++) {\n\
    \    if (lst[i] > largest_prime) {\n      bool is_prime = true;\n      for (long\
    \ j = 2; j < lst[i]; j++) {\n        if (lst[i] % j == 0) {\n          is_prime\
    \ = false;\n          break;\n        }\n      }\n      if (is_prime) {\n    \
    \    largest_prime = lst[i];\n      }\n    }\n  }\n  long sum = 0;\n  while (largest_prime\
    \ > 0) {\n    sum += largest_prime % 10;\n    largest_prime /= 10;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpn6q5auke: /tmp/tmpn6q5auke.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long> primes;\n\
    \    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int\
    \ j = 2; j <= i/2; j++){\n            if(i % j == 0){\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if(isPrime)\n\
    \            primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(int\
    \ i = 0; i < primes.size(); i++){\n        for(int j = 0; j < lst.size(); j++){\n\
    \            if(primes[i] == lst[j]){\n                if(primes[i] > maxPrime)\n\
    \                    maxPrime = primes[i];\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n\
    \        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime){\n            primes.push_back(i);\n        }\n    }\n   \
    \ long maxPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n        bool\
    \ isInList = false;\n        for(long j = 0; j < lst.size(); j++){\n         \
    \   if(primes[i] == lst[j]){\n                isInList = true;\n             \
    \   break;\n            }\n        }\n        if(isInList){\n            if(primes[i]\
    \ > maxPrime){\n                maxPrime = primes[i];\n            }\n       \
    \ }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime\
    \ % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpb62hud_9: /tmp/tmpb62hud_9.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (auto i : lst) {\n        if (i\
    \ > largestPrime && i % 2 != 0 && i % 3 != 0 && i % 5 != 0 && i % 7 != 0) {\n\
    \            largestPrime = i;\n        }\n    }\n    long sum = 0;\n    while\
    \ (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpxlqystlb: /tmp/tmpxlqystlb.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp2i7qpcn1: /tmp/tmp2i7qpcn1.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long count\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n\
    \            count++;\n        }\n    }\n    if(count > 1){\n        return 0;\n\
    \    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n\
    \            if(lst[i] % 2 == 0){\n                return 0;\n            }\n\
    \            for(int j = 3; j < lst[i]; j++){\n                if(lst[i] % j ==\
    \ 0){\n                    return 0;\n                }\n            }\n     \
    \   }\n    }\n    long sum = 0;\n    while(max > 0){\n        sum += max % 10;\n\
    \        max /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpydxslt55: /tmp/tmpydxslt55.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > largestPrime){\n            largestPrime = primes[i];\n        }\n    }\n\
    \    long sum = 0;\n    while(largestPrime > 0){\n        sum += largestPrime\
    \ % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmps4fpsl7m: /tmp/tmps4fpsl7m.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n  \
    \      for(long j = 2; j < i; j++){\n            if(i % j == 0){\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if(isPrime){\n            long temp = i;\n            while(temp > 0){\n\
    \                sum += temp % 10;\n                temp /= 10;\n            }\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpz1_m3b39: /tmp/tmpz1_m3b39.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j < i; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp1efg770i: /tmp/tmp1efg770i.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    long sum = 0;\n    while(max > 0){\n\
    \        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpflcox_cf: /tmp/tmpflcox_cf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime)\n            primes.push_back(i);\n    }\n    long maxPrime\
    \ = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i] > maxPrime)\n\
    \            maxPrime = primes[i];\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpp24cr0fn: /tmp/tmpp24cr0fn.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j < i; j++){\n            if(i % j == 0){\n         \
    \       isPrime = false;\n                break;\n            }\n        }\n \
    \       if(isPrime){\n            primes.push_back(i);\n        }\n    }\n   \
    \ long maxPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpbaqto4_s: /tmp/tmpbaqto4_s.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > largestPrime){\n                    largestPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(largestPrime\
    \ > 0){\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpqgulruu0: /tmp/tmpqgulruu0.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpsmc0qv5o: /tmp/tmpsmc0qv5o.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpiwvkuyiu: /tmp/tmpiwvkuyiu.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n     \
    \   for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > largestPrime){\n                    largestPrime\
    \ = primes[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while(largestPrime != 0){\n        sum += largestPrime % 10;\n   \
    \     largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    std::vector<long> primes;\n    for(long i = 0; i < lst.size(); i++)\
    \ {\n        if(lst[i] == 1) {\n            continue;\n        }\n        bool\
    \ isPrime = true;\n        for(long j = 2; j <= sqrt(lst[i]); j++) {\n       \
    \     if(lst[i] % j == 0) {\n                isPrime = false;\n              \
    \  break;\n            }\n        }\n        if(isPrime) {\n            primes.push_back(lst[i]);\n\
    \        }\n    }\n    long largestPrime = *std::max_element(primes.begin(), primes.end());\n\
    \    long sum = 0;\n    while(largestPrime > 0) {\n        sum += largestPrime\
    \ % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 != 0) {\n\
    \                if (lst[i] % 3 != 0) {\n                    if (lst[i] % 5 !=\
    \ 0) {\n                        if (lst[i] % 7 != 0) {\n                     \
    \       if (lst[i] % 11 != 0) {\n                                if (lst[i] %\
    \ 13 != 0) {\n                                    if (lst[i] % 17 != 0) {\n  \
    \                                      if (lst[i] % 19 != 0) {\n             \
    \                               if (lst[i] % 23 != 0) {\n                    \
    \                            if (lst[i] % 29 != 0) {\n                       \
    \                             if (lst[i] % 31 != 0) {\n                      \
    \                                  if (lst[i] % 37 != 0) {\n                 \
    \                                           if (lst[i] % 41 != 0) {\n        \
    \                                                        if (lst[i] % 43 != 0)\
    \ {\n                                                                    if (lst[i]\
    \ % 47 != 0) {\n                                                             \
    \           if (lst[i] % 53 != 0) {\n                                        \
    \                                    if (lst[i] % 59 != 0) {\n               \
    \                                                                 if (lst[i] %\
    \ 61 != 0) {\n                                                               \
    \                     if (lst[i] % 67 != 0) {\n                              \
    \                                                          if (lst[i] % 71 !=\
    \ 0) {\n                                                                     \
    \                       if (lst[i] % 73 != 0) {\n                            \
    \                                                                    if (lst[i]\
    \ % 79 != 0) {\n                                                             \
    \                                       if (lst[i] % 83 != 0) {\n            \
    \                                                                            \
    \                if (lst[i] % 89 != 0) {\n                                   \
    \                                                                         if (lst[i]\
    \ % 97 != 0) {\n                                                             \
    \                                                   largestPrime = lst[i];\n \
    \                                                                            \
    \                               }\n                                          \
    \                      \n}\nint main() {\n    auto candidate = skjkasdkd;\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3,\
    \ (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32,\
    \ (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\
    \ == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1,\
    \ (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1,\
    \ (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
    \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
    \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
    \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv01do369.cpp: In function \u2018long int skjkasdkd(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv01do369.cpp:45:9: warning: empty parentheses were disambiguated\
    \ as a function declaration [-Wvexing-parse]\n   45 | int main() {\n      |  \
    \       ^~\n/tmp/tmpv01do369.cpp:45:9: note: remove parentheses to default-initialize\
    \ a variable\n   45 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpv01do369.cpp:45:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpv01do369.cpp:45:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   45 | int main() {\n      |            ^\n/tmp/tmpv01do369.cpp:56:2: error:\
    \ expected \u2018}\u2019 at end of input\n   56 | }\n      |  ^\n/tmp/tmpv01do369.cpp:38:123:\
    \ note: to match this \u2018{\u2019\n   38 |                                 \
    \                                                                    if (lst[i]\
    \ % 83 != 0) {\n      |                                                      \
    \                                                                     ^\n/tmp/tmpv01do369.cpp:56:2:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      |  ^\n/tmp/tmpv01do369.cpp:37:119:\
    \ note: to match this \u2018{\u2019\n   37 |                                 \
    \                                                                if (lst[i] %\
    \ 79 != 0) {\n      |                                                        \
    \                                                               ^\n/tmp/tmpv01do369.cpp:56:2:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      |  ^\n/tmp/tmpv01do369.cpp:36:115:\
    \ note: to match this \u2018{\u2019\n   36 |                                 \
    \                                                            if (lst[i] % 73 !=\
    \ 0) {\n      |                                                              \
    \                                                     ^\n/tmp/tmpv01do369.cpp:56:2:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      |  ^\n/tmp/tmpv01do369.cpp:35:111:\
    \ note: to match this \u2018{\u2019\n   35 |                                 \
    \                                                        if (lst[i] % 71 != 0) "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpyuuwzx21: /tmp/tmpyuuwzx21.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        bool isInList\
    \ = false;\n        for(int j = 0; j < lst.size(); j++){\n            if(primes[i]\
    \ == lst[j]){\n                isInList = true;\n                break;\n    \
    \        }\n        }\n        if(isInList){\n            if(primes[i] > maxPrime){\n\
    \                maxPrime = primes[i];\n            }\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ sum = 0;\n    for(int i = 0; i < primes.size(); i++){\n        long num = primes[i];\n\
    \        while(num > 0){\n            sum += num % 10;\n            num /= 10;\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpx0zc4_sv: /tmp/tmpx0zc4_sv.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmps9z6q5l8: /tmp/tmps9z6q5l8.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ sum = 0;\n    for(int i = 0; i < primes.size(); i++){\n        while(primes[i]\
    \ > 0){\n            sum += primes[i] % 10;\n            primes[i] /= 10;\n  \
    \      }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpnpp5ym6n: /tmp/tmpnpp5ym6n.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n   \
    \     for(int j = 2; j < i; j++){\n            if(i % j == 0){\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   if(isPrime){\n            int k = i;\n            while(k > 0){\n        \
    \        sum += k % 10;\n                k /= 10;\n            }\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3,\
    \ (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32,\
    \ (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\
    \ == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1,\
    \ (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1,\
    \ (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
    \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
    \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
    \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpogij734t: /tmp/tmpogij734t.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmplps7lxk2: /tmp/tmplps7lxk2.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp5lu7blkl: /tmp/tmp5lu7blkl.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmprup4w1o0: /tmp/tmprup4w1o0.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpy44i7__i: /tmp/tmpy44i7__i.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(lst[i] == max){\n            lst.erase(lst.begin()\
    \ + i);\n        }\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp1pfr7x47: /tmp/tmp1pfr7x47.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j < i; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n    }\n  }\n\
    \  long largest = 0;\n  for (int i = 0; i < primes.size(); i++) {\n    if (primes[i]\
    \ > largest) {\n      largest = primes[i];\n    }\n  }\n  long sum = 0;\n  while\
    \ (largest > 0) {\n    sum += largest % 10;\n    largest /= 10;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpombm38o_: /tmp/tmpombm38o_.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpsavqwas6: /tmp/tmpsavqwas6.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpkew47rqf: /tmp/tmpkew47rqf.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpwh3d0fnc: /tmp/tmpwh3d0fnc.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpgymmf3td: /tmp/tmpgymmf3td.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 != 0 &&\
    \ lst[i] % 3 != 0 && lst[i] % 5 != 0 && lst[i] % 7 != 0) {\n                largestPrime\
    \ = lst[i];\n            }\n        }\n    }\n    std::cout << largestPrime <<\
    \ std::endl;\n    long sum = 0;\n    while (largestPrime > 0) {\n        sum +=\
    \ largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp9hphi9dg: /tmp/tmp9hphi9dg.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3)'' failed.

    '
  stdout: '181

    4597

    5107

    83

    1

    '
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpf6k3u4vp: /tmp/tmpf6k3u4vp.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpo_79teur: /tmp/tmpo_79teur.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool prime = true;\n  \
    \      for(int j = 2; j < i; j++){\n            if(i % j == 0){\n            \
    \    prime = false;\n                break;\n            }\n        }\n      \
    \  if(prime){\n            primes.push_back(i);\n        }\n    }\n    long largest\
    \ = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i] > largest){\n\
    \            largest = primes[i];\n        }\n    }\n    long sum = 0;\n    while(largest\
    \ > 0){\n        sum += largest % 10;\n        largest /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpqtkrvvbf: /tmp/tmpqtkrvvbf.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa2kaoymc: /tmp/tmpa2kaoymc.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmputbgu_kq: /tmp/tmputbgu_kq.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong max = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ > max) {\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tlong sum = 0;\n\tfor (int i = 0;\
    \ i < lst.size(); i++) {\n\t\tif (lst[i] == max) {\n\t\t\twhile (max > 0) {\n\t\
    \t\t\tsum += max % 10;\n\t\t\t\tmax /= 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmprvjadbn2: /tmp/tmprvjadbn2.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong max = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tlong\
    \ num = lst[i];\n\t\tif (num > max) {\n\t\t\tbool isPrime = true;\n\t\t\tfor (int\
    \ j = 2; j <= sqrt(num); j++) {\n\t\t\t\tif (num % j == 0) {\n\t\t\t\t\tisPrime\
    \ = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isPrime) {\n\t\t\t\
    \tmax = num;\n\t\t\t}\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (max > 0) {\n\t\t\
    sum += max % 10;\n\t\tmax /= 10;\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpkgi3mh_r: /tmp/tmpkgi3mh_r.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            if (lst[i] % 2 != 0) {\n\
    \                bool isPrime = true;\n                for (long j = 3; j < lst[i];\
    \ j++) {\n                    if (lst[i] % j == 0) {\n                       \
    \ isPrime = false;\n                        break;\n                    }\n  \
    \              }\n                if (isPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n  \
    \      largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3,\
    \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
    \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
    \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max)\n            max = lst[i];\n    }\n    std::vector<long> primes;\n\
    \    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int\
    \ j = 2; j <= i/2; j++){\n            if(i % j == 0){\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if(isPrime)\n\
    \            primes.push_back(i);\n    }\n    long maxPrime = 0;\n    for(int\
    \ i = 0; i < primes.size(); i++){\n        if(primes[i] > maxPrime)\n        \
    \    maxPrime = primes[i];\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n\
    \        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpuebk5yal: /tmp/tmpuebk5yal.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j < i; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n    }\n  }\n\
    \  long maxPrime = 0;\n  for (int i = 0; i < primes.size(); i++) {\n    if (primes[i]\
    \ > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n  long sum = 0;\n  while\
    \ (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime /= 10;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp3uiwxsi0: /tmp/tmp3uiwxsi0.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpdt631v85: /tmp/tmpdt631v85.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    int sum\
    \ = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp352sbgp9: /tmp/tmp352sbgp9.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    long sum = 0;\n    while(max > 0){\n\
    \        sum += max % 10;\n        max /= 10;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpnmq2h87r: /tmp/tmpnmq2h87r.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp6kdz_mfo: /tmp/tmp6kdz_mfo.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpz75gcdwb: /tmp/tmpz75gcdwb.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpvor4j8k8: /tmp/tmpvor4j8k8.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpskxh093q: /tmp/tmpskxh093q.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n   \
    \     for(int j = 2; j < i; j++){\n            if(i % j == 0){\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   if(isPrime){\n            std::string str = std::to_string(i);\n         \
    \   for(int j = 0; j < str.length(); j++){\n                sum += str[j] - '0';\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmps93u975v: /tmp/tmps93u975v.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpu1b4gj7i: /tmp/tmpu1b4gj7i.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp67_b659r: /tmp/tmp67_b659r.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpm0ww7eo4: /tmp/tmpm0ww7eo4.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (int j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    std::vector<long> primes;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    for (long i = 2; i <= max; i++) {\n        bool isPrime\
    \ = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime) {\n            primes.push_back(i);\n       \
    \ }\n    }\n    long maxPrime = 0;\n    for (long i = 0; i < primes.size(); i++)\
    \ {\n        for (long j = 0; j < lst.size(); j++) {\n            if (primes[i]\
    \ == lst[j]) {\n                if (primes[i] > maxPrime) {\n                \
    \    maxPrime = primes[i];\n                }\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while (maxPrime > 0) {\n        sum += maxPrime % 10;\n\
    \        maxPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpnbouiok2: /tmp/tmpnbouiok2.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmplvops6gb: /tmp/tmplvops6gb.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp1o8ylo25: /tmp/tmp1o8ylo25.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n   \
    \     for(int j = 2; j < i; j++){\n            if(i % j == 0){\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   if(isPrime){\n            while(max % i == 0){\n                sum += i %\
    \ 10;\n                i /= 10;\n            }\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n\tlong max = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i]\
    \ > max) {\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tstd::vector<long> primes;\n\tfor\
    \ (int i = 2; i <= max; i++) {\n\t\tbool isPrime = true;\n\t\tfor (int j = 2;\
    \ j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tprimes.push_back(i);\n\t\t}\n\t}\n\t\
    long largestPrime = 0;\n\tfor (int i = 0; i < primes.size(); i++) {\n\t\tfor (int\
    \ j = 0; j < lst.size(); j++) {\n\t\t\tif (primes[i] == lst[j]) {\n\t\t\t\tlargestPrime\
    \ = primes[i];\n\t\t\t}\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (largestPrime !=\
    \ 0) {\n\t\tsum += largestPrime % 10;\n\t\tlargestPrime /= 10;\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n     \
    \   for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > largestPrime){\n                    largestPrime\
    \ = primes[i];\n                }\n            }\n        }\n    }\n    long sum\
    \ = 0;\n    while(largestPrime > 0){\n        sum += largestPrime % 10;\n    \
    \    largestPrime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= i/2; j++){\n            if(i % j == 0){\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpa4yha427: /tmp/tmpa4yha427.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpxmdkmouy: /tmp/tmpxmdkmouy.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max) max = lst[i];\n    }\n    std::vector<long> primes;\n    for(int\
    \ i = 2; i <= max; i++){\n        bool isPrime = true;\n        for(int j = 2;\
    \ j <= i/2; j++){\n            if(i % j == 0){\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if(isPrime) primes.push_back(i);\n\
    \    }\n    long maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n\
    \        for(int j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n\
    \                if(primes[i] > maxPrime) maxPrime = primes[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while(maxPrime > 0){\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool prime = true;\n  \
    \      for(int j = 2; j < i; j++){\n            if(i % j == 0){\n            \
    \    prime = false;\n                break;\n            }\n        }\n      \
    \  if(prime){\n            primes.push_back(i);\n        }\n    }\n    long maxPrime\
    \ = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i] > maxPrime){\n\
    \            maxPrime = primes[i];\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp5669awsd: /tmp/tmp5669awsd.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmplvops6gb: /tmp/tmplvops6gb.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    std::vector<long> primes;\n    for(int i = 0; i < lst.size(); i++)\
    \ {\n        if(lst[i] == 0 || lst[i] == 1) {\n            continue;\n       \
    \ }\n        bool isPrime = true;\n        for(int j = 2; j < lst[i]; j++) {\n\
    \            if(lst[i] % j == 0) {\n                isPrime = false;\n       \
    \         break;\n            }\n        }\n        if(isPrime) {\n          \
    \  primes.push_back(lst[i]);\n        }\n    }\n    long maxPrime = *std::max_element(primes.begin(),\
    \ primes.end());\n    long sum = 0;\n    while(maxPrime > 0) {\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ajbtf2e.cpp: In function 'int main()':\n/tmp/tmp2ajbtf2e.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = skjkasdkd;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2ajbtf2e.cpp:2:\n/tmp/tmp2ajbtf2e.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n                                        ^\n\
    /tmp/tmp2ajbtf2e.cpp:39:246: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n                      \
    \                                                                            \
    \                                                                            \
    \                                                                        ^\n/tmp/tmp2ajbtf2e.cpp:39:246:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2ajbtf2e.cpp:39:246: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2ajbtf2e.cpp:39:246: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2ajbtf2e.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(long i = 0; i < lst.size(); i++){\n     \
    \   if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(long i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(long j = 2; j <= i/2; j++){\n            if(i % j == 0){\n      \
    \          isPrime = false;\n                break;\n            }\n        }\n\
    \        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n  \
    \  long maxPrime = 0;\n    for(long i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmply6j0m2p: /tmp/tmply6j0m2p.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long sum\
    \ = 0;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n   \
    \     for(int j = 2; j < i; j++){\n            if(i % j == 0){\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   if(isPrime){\n            int temp = i;\n            while(temp > 0){\n  \
    \              sum += temp % 10;\n                temp /= 10;\n            }\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2gv2e5pc.cpp: In function 'int main()':\n/tmp/tmp2gv2e5pc.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = skjkasdkd;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2gv2e5pc.cpp:2:\n/tmp/tmp2gv2e5pc.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n                                        ^\n\
    /tmp/tmp2gv2e5pc.cpp:40:246: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n                      \
    \                                                                            \
    \                                                                            \
    \                                                                        ^\n/tmp/tmp2gv2e5pc.cpp:40:246:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2gv2e5pc.cpp:40:246: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2gv2e5pc.cpp:40:246: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2gv2e5pc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(auto i : lst) {\n        if(i > max) max\
    \ = i;\n    }\n    std::vector<bool> prime(max+1, true);\n    prime[0] = false;\n\
    \    prime[1] = false;\n    for(long i = 2; i <= max; i++) {\n        if(prime[i])\
    \ {\n            for(long j = i*i; j <= max; j += i) {\n                prime[j]\
    \ = false;\n            }\n        }\n    }\n    long max_prime = 0;\n    for(auto\
    \ i : lst) {\n        if(prime[i] && i > max_prime) max_prime = i;\n    }\n  \
    \  long sum = 0;\n    while(max_prime > 0) {\n        sum += max_prime % 10;\n\
    \        max_prime /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqgo1g2e.cpp: In function 'long int skjkasdkd(std::vector<long\
    \ int>)':\n/tmp/tmpbqgo1g2e.cpp:14:14: error: 'i' does not name a type\n     for(auto\
    \ i : lst) {\n              ^\n/tmp/tmpbqgo1g2e.cpp:17:5: error: expected ';'\
    \ before 'std'\n     std::vector<bool> prime(max+1, true);\n     ^\n/tmp/tmpbqgo1g2e.cpp:17:23:\
    \ error: expected primary-expression before 'prime'\n     std::vector<bool> prime(max+1,\
    \ true);\n                       ^\n/tmp/tmpbqgo1g2e.cpp:17:23: error: expected\
    \ ';' before 'prime'\n/tmp/tmpbqgo1g2e.cpp:17:40: error: 'prime' was not declared\
    \ in this scope\n     std::vector<bool> prime(max+1, true);\n                \
    \                        ^\n/tmp/tmpbqgo1g2e.cpp:17:41: error: expected ')' before\
    \ ';' token\n     std::vector<bool> prime(max+1, true);\n                    \
    \                     ^\n/tmp/tmpbqgo1g2e.cpp:18:5: error: 'prime' was not declared\
    \ in this scope\n     prime[0] = false;\n     ^\n/tmp/tmpbqgo1g2e.cpp:28:14: error:\
    \ 'i' does not name a type\n     for(auto i : lst) {\n              ^\n/tmp/tmpbqgo1g2e.cpp:31:5:\
    \ error: expected ';' before 'long'\n     long sum = 0;\n     ^\n/tmp/tmpbqgo1g2e.cpp:32:5:\
    \ error: expected primary-expression before 'while'\n     while(max_prime > 0)\
    \ {\n     ^\n/tmp/tmpbqgo1g2e.cpp:32:5: error: expected ')' before 'while'\n/tmp/tmpbqgo1g2e.cpp:36:12:\
    \ error: 'sum' was not declared in this scope\n     return sum;\n            ^\n\
    /tmp/tmpbqgo1g2e.cpp: In function 'int main()':\n/tmp/tmpbqgo1g2e.cpp:39:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = skjkasdkd;\n       \
    \   ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n          \
    \       from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n  \
    \               from /tmp/tmpbqgo1g2e.cpp:2:\n/tmp/tmpbqgo1g2e.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, "
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmpxmdkmouy: /tmp/tmpxmdkmouy.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n  long max = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n  std::vector<long> primes;\n  for\
    \ (int i = 2; i <= max; i++) {\n    bool isPrime = true;\n    for (int j = 2;\
    \ j <= i / 2; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n    \
    \    break;\n      }\n    }\n    if (isPrime) {\n      primes.push_back(i);\n\
    \    }\n  }\n  long maxPrime = 0;\n  for (int i = 0; i < primes.size(); i++) {\n\
    \    if (primes[i] > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n  long\
    \ sum = 0;\n  while (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime\
    \ /= 10;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp6ebdl5vv: /tmp/tmp6ebdl5vv.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j <= sqrt(i); j++){\n            if(i % j == 0){\n   \
    \             isPrime = false;\n                break;\n            }\n      \
    \  }\n        if(isPrime){\n            primes.push_back(i);\n        }\n    }\n\
    \    long largestPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n   \
    \     if(primes[i] > largestPrime){\n            largestPrime = primes[i];\n \
    \       }\n    }\n    long sum = 0;\n    while(largestPrime > 0){\n        sum\
    \ += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpev11rrwz.cpp: In function 'int main()':\n/tmp/tmpev11rrwz.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = skjkasdkd;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpev11rrwz.cpp:2:\n/tmp/tmpev11rrwz.cpp:47:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)0, (long)3, (long)2,\
    \ (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2,\
    \ (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
    \ (long)4, (long)3}))) == (10));\n                                        ^\n\
    /tmp/tmpev11rrwz.cpp:47:246: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n                      \
    \                                                                            \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpev11rrwz.cpp:47:246:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpev11rrwz.cpp:47:246: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpev11rrwz.cpp:47:246: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpev11rrwz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n      \
    \  if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool prime = true;\n  \
    \      for(int j = 2; j < i; j++){\n            if(i % j == 0){\n            \
    \    prime = false;\n                break;\n            }\n        }\n      \
    \  if(prime){\n            primes.push_back(i);\n        }\n    }\n    long maxPrime\
    \ = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i] > maxPrime){\n\
    \            maxPrime = primes[i];\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
    \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2,\
    \ (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: Exception
  stderr: 'tmp5669awsd: /tmp/tmp5669awsd.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)0,
    (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,
    (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,
    (long)324, (long)4, (long)3}))) == (10)'' failed.

    '
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ integers.\n// You need to find the largest prime value and return the sum of\
    \ its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
    \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
    \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
    \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\
    \ the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be\
    \ 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long>\
    \ lst) {\n    long largestPrime = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = skjkasdkd;\n\
    \    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
    \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
    \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4,\
    \ (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
    \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
    \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1,\
    \ (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23,\
    \ (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n  \
    \  assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71,\
    \ (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0,\
    \ (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
    \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
    \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
    \ (long)97, (long)8192}))) == (10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
