name: HumanEval_115_max_fill
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp8wi3dtp4: /tmp/tmp8wi3dtp4.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long max_fill = 0;\n    for(long row = 0; row < rows; row++) {\n        for(long\
    \ col = 0; col < cols; col++) {\n            if(grid[row][col] == 1) {\n     \
    \           max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_fhcswof: /tmp/tmp_fhcswof.cpp:46: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            fill +=\
    \ well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp1xd3owu_: /tmp/tmp1xd3owu_.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4kr00wzw: /tmp/tmp4kr00wzw.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpncfce5oz: /tmp/tmpncfce5oz.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp8hrhvmtm: /tmp/tmp8hrhvmtm.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto col : row) {\n            max_fill\
    \ = std::max(max_fill, col);\n        }\n    }\n    return max_fill * capacity;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpa4s67ue3: /tmp/tmpa4s67ue3.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            fill +=\
    \ well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpi5lnhq3n: /tmp/tmpi5lnhq3n.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_9xjo2vo: /tmp/tmp_9xjo2vo.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp3mr1h09_: /tmp/tmp3mr1h09_.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpy06ic5zg: /tmp/tmpy06ic5zg.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpedb0q5ah: /tmp/tmpedb0q5ah.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp97rvzrjd: /tmp/tmp97rvzrjd.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6oo46hps: /tmp/tmp6oo46hps.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpyuhlqmxd: /tmp/tmpyuhlqmxd.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp8bumpb_d: /tmp/tmp8bumpb_d.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            fill +=\
    \ well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp07mjl14m: /tmp/tmp07mjl14m.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmppjvqhswh: /tmp/tmppjvqhswh.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpsohdwbwm: /tmp/tmpsohdwbwm.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Implement this placeholder.\n    return 0;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpny6wps3i: /tmp/tmpny6wps3i.cpp:36: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto& row : grid) {\n\
    \        for (auto& well : row) {\n            if (well > max_fill) {\n      \
    \          max_fill = well;\n            }\n        }\n    }\n    return max_fill;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpj2n3j97_: /tmp/tmpj2n3j97_.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6ed12goj: /tmp/tmp6ed12goj.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(long i = 0; i < grid.size(); i++){\n        for(long j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpwsrm8ujq: /tmp/tmpwsrm8ujq.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well * capacity;\n \
    \       }\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpsyai9gla: /tmp/tmpsyai9gla.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp51v7qdto: /tmp/tmp51v7qdto.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well * capacity;\n \
    \       }\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpd4wexwin: /tmp/tmpd4wexwin.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto cell : row) {\n            fill +=\
    \ cell;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpt2aatyt3: /tmp/tmpt2aatyt3.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpneo4xrz6: /tmp/tmpneo4xrz6.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp18yyfi60: /tmp/tmp18yyfi60.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxaq4gwp2: /tmp/tmpxaq4gwp2.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long result = 0;\n    for(auto row : grid) {\n \
    \       long fill = 0;\n        for(auto well : row) {\n            fill += well;\n\
    \            if(fill == capacity) {\n                result++;\n             \
    \   fill = 0;\n            }\n        }\n        if(fill > 0) {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_xdhbc9j: /tmp/tmp_xdhbc9j.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp1_2u2kz2: /tmp/tmp1_2u2kz2.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long result = 0;\n    for(auto& row : grid) {\n\
    \        for(auto& cell : row) {\n            result = std::max(result, cell);\n\
    \        }\n    }\n    return result * capacity;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpm5z8mwlw: /tmp/tmpm5z8mwlw.cpp:41: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmphne6kf3x: /tmp/tmphne6kf3x.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6lke9_v_: /tmp/tmp6lke9_v_.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxoqf1geh: /tmp/tmpxoqf1geh.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpzroxt0rk: /tmp/tmpzroxt0rk.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill * capacity;\n}\nint main() {\n\
    \    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpquhy8idv: /tmp/tmpquhy8idv.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxa4cmddv: /tmp/tmpxa4cmddv.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp9ddine2e: /tmp/tmp9ddine2e.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp579f_rjh: /tmp/tmp579f_rjh.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            fill +=\
    \ well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2cy4ke5u: /tmp/tmp2cy4ke5u.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpfm_bha8q: /tmp/tmpfm_bha8q.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpyhffibwl: /tmp/tmpyhffibwl.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpbsrfschz: /tmp/tmpbsrfschz.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_5in89ty: /tmp/tmp_5in89ty.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp9xcawli5: /tmp/tmp9xcawli5.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto col : row) {\n            max_fill\
    \ = std::max(max_fill, col);\n        }\n    }\n    return max_fill;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_71kvejz: /tmp/tmp_71kvejz.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpwwg7u6sw: /tmp/tmpwwg7u6sw.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgr_3w9ek: /tmp/tmpgr_3w9ek.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxzua1se5: /tmp/tmpxzua1se5.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpwg6dwjqg: /tmp/tmpwg6dwjqg.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well * capacity;\n \
    \       }\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpsmszxvb4: /tmp/tmpsmszxvb4.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        long fill = 0;\n        for(auto well : row)\
    \ {\n            fill += well;\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpo_1vfepg: /tmp/tmpo_1vfepg.cpp:44: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto unit : row) {\n            max_fill += unit;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmprya29r76: /tmp/tmprya29r76.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpe_wvy3cp: /tmp/tmpe_wvy3cp.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgmrozynk: /tmp/tmpgmrozynk.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpe9xjkyum: /tmp/tmpe9xjkyum.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long max_fill = 0;\n    for(long row = 0; row < rows; row++) {\n        for(long\
    \ col = 0; col < cols; col++) {\n            if(grid[row][col] == 1) {\n     \
    \           max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpoed3u1fm: /tmp/tmpoed3u1fm.cpp:46: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(long i = 0; i < grid.size(); i++){\n        for(long j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpnux6zd5s: /tmp/tmpnux6zd5s.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp7rgu_nb1: /tmp/tmp7rgu_nb1.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpwtiphx93: /tmp/tmpwtiphx93.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpak09sr27: /tmp/tmpak09sr27.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(long row = 0; row < grid.size(); row++){\n        for(long col = 0; col\
    \ < grid[row].size(); col++){\n            if(grid[row][col] == 1){\n        \
    \        max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp5jxultwx: /tmp/tmp5jxultwx.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well * capacity;\n \
    \       }\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp96oojmww: /tmp/tmp96oojmww.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (long i = 0; i < grid.size();\
    \ i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n            if\
    \ (grid[i][j] == 1) {\n                max_fill += capacity;\n            }\n\
    \        }\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpoj6vpvev: /tmp/tmpoj6vpvev.cpp:44: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (long i = 0; i < grid.size();\
    \ i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n            if\
    \ (grid[i][j] == 1) {\n                max_fill += capacity;\n            }\n\
    \        }\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_1y0xgo7: /tmp/tmp_1y0xgo7.cpp:44: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpoq3411j6: /tmp/tmpoq3411j6.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6_a_rqj6: /tmp/tmp6_a_rqj6.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_xncpef2: /tmp/tmp_xncpef2.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpaf7su48y: /tmp/tmpaf7su48y.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6zqd84_y: /tmp/tmp6zqd84_y.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgxohgdro: /tmp/tmpgxohgdro.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(long i = 0; i < grid.size(); i++){\n        for(long j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_twcb81r: /tmp/tmp_twcb81r.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpf_a81vqf: /tmp/tmpf_a81vqf.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long max_fill = 0;\n    for(long row = 0; row < rows; row++) {\n        for(long\
    \ col = 0; col < cols; col++) {\n            if(grid[row][col] == 1) {\n     \
    \           max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmph21dqkk3: /tmp/tmph21dqkk3.cpp:46: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpki8u5pob: /tmp/tmpki8u5pob.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpz7i_7y4x: /tmp/tmpz7i_7y4x.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp1ayjwsj0: /tmp/tmp1ayjwsj0.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4jfteis3: /tmp/tmp4jfteis3.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmph2j1wq55: /tmp/tmph2j1wq55.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (long i = 0; i < grid.size();\
    \ i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n            if\
    \ (grid[i][j] == 1) {\n                max_fill += capacity;\n            }\n\
    \        }\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvoje6h60: /tmp/tmpvoje6h60.cpp:44: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp69e253t3: /tmp/tmp69e253t3.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpwpmj3y9n: /tmp/tmpwpmj3y9n.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpv5z564l3: /tmp/tmpv5z564l3.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmppq7zhhqw: /tmp/tmppq7zhhqw.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp75_t6ael: /tmp/tmp75_t6ael.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmptib5zxyj: /tmp/tmptib5zxyj.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp9pqkrhxp: /tmp/tmp9pqkrhxp.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(long row = 0; row < grid.size(); row++){\n        for(long col = 0; col\
    \ < grid[row].size(); col++){\n            if(grid[row][col] == 1){\n        \
    \        max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpn5o5obs9: /tmp/tmpn5o5obs9.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpeksp0etf: /tmp/tmpeksp0etf.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp52oqq2an: /tmp/tmp52oqq2an.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        long fill = 0;\n        for(auto well : row)\
    \ {\n            if(well == 1) {\n                fill += 1;\n            }\n\
    \        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp58z_ga91: /tmp/tmp58z_ga91.cpp:46: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpw8naftfk: /tmp/tmpw8naftfk.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            fill +=\
    \ well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2lswn_sr: /tmp/tmp2lswn_sr.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long result = 0;\n    for(auto row : grid) {\n \
    \       long fill = 0;\n        for(auto well : row) {\n            fill += well;\n\
    \            if(fill > capacity) {\n                result += fill / capacity;\n\
    \                fill = fill % capacity;\n            }\n        }\n        result\
    \ += fill / capacity;\n        fill = fill % capacity;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_tlup67y: /tmp/tmp_tlup67y.cpp:49: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpy9v2v2qo: /tmp/tmpy9v2v2qo.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4jln3hqn: /tmp/tmp4jln3hqn.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long max_fill = 0;\n    for(long row = 0; row < rows; row++) {\n        for(long\
    \ col = 0; col < cols; col++) {\n            if(grid[row][col] == 1) {\n     \
    \           max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgw54lmv4: /tmp/tmpgw54lmv4.cpp:46: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmptxf75vjw: /tmp/tmptxf75vjw.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(long i = 0; i < grid.size(); i++){\n        for(long j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpqh8qerv9: /tmp/tmpqh8qerv9.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpp_0569hl: /tmp/tmpp_0569hl.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill * capacity;\n}\nint main() {\n\
    \    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_ez3x_fc: /tmp/tmp_ez3x_fc.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp0pehxmio: /tmp/tmp0pehxmio.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(long i = 0; i < grid.size(); i++){\n        for(long j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpotcryb_2: /tmp/tmpotcryb_2.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpyd4b9p2n: /tmp/tmpyd4b9p2n.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill * capacity;\n}\nint main() {\n\
    \    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpl22igdqc: /tmp/tmpl22igdqc.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill / capacity;\n}\nint main() {\n\
    \    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp3579ba_w: /tmp/tmp3579ba_w.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpo2l3cnhn: /tmp/tmpo2l3cnhn.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (long i = 0; i < grid.size();\
    \ i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n            if\
    \ (grid[i][j] == 1) {\n                max_fill += capacity;\n            }\n\
    \        }\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp8ve3ns89: /tmp/tmp8ve3ns89.cpp:44: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp9r2se2fe: /tmp/tmp9r2se2fe.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6pnhob7_: /tmp/tmp6pnhob7_.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpoly324tm: /tmp/tmpoly324tm.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto cell : row) {\n            fill +=\
    \ cell;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4jbwiwx7: /tmp/tmp4jbwiwx7.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpv5gr8p37: /tmp/tmpv5gr8p37.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto col : row) {\n            max_fill\
    \ = std::max(max_fill, col);\n        }\n    }\n    return max_fill * capacity;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpe_06ave0: /tmp/tmpe_06ave0.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpj08v7q0u: /tmp/tmpj08v7q0u.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpqlczsul1: /tmp/tmpqlczsul1.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpz7j1051y: /tmp/tmpz7j1051y.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpw5t94tbt: /tmp/tmpw5t94tbt.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpb9bea8on: /tmp/tmpb9bea8on.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpuz22hta0: /tmp/tmpuz22hta0.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpn0iagv2z: /tmp/tmpn0iagv2z.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well * capacity;\n \
    \       }\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpn9ylsopx: /tmp/tmpn9ylsopx.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill * capacity;\n}\nint main() {\n\
    \    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpk3l13xfl: /tmp/tmpk3l13xfl.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            fill +=\
    \ well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgpk7f85n: /tmp/tmpgpk7f85n.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmplfdi7scy: /tmp/tmplfdi7scy.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpq_ojq_d5: /tmp/tmpq_ojq_d5.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp9lo90q_s: /tmp/tmp9lo90q_s.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpqrt66gwx: /tmp/tmpqrt66gwx.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6fr6p1pw: /tmp/tmp6fr6p1pw.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp0butiiqw: /tmp/tmp0butiiqw.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(long i = 0; i < grid.size(); i++){\n        for(long j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpyr9v9xgo: /tmp/tmpyr9v9xgo.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Implement this placeholder.\n    return 0;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgdlrerso: /tmp/tmpgdlrerso.cpp:36: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpdaj32cwg: /tmp/tmpdaj32cwg.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto col : row) {\n            max_fill\
    \ = std::max(max_fill, col);\n        }\n    }\n    return max_fill;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_fncwjm4: /tmp/tmp_fncwjm4.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpjtgn4xwg: /tmp/tmpjtgn4xwg.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpqy_hqlvo: /tmp/tmpqy_hqlvo.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmplttyvvei: /tmp/tmplttyvvei.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmprn05pv2d: /tmp/tmprn05pv2d.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2nu2vyo_: /tmp/tmp2nu2vyo_.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp7idzp4tb: /tmp/tmp7idzp4tb.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvwk1lo2u: /tmp/tmpvwk1lo2u.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp8shqw026: /tmp/tmp8shqw026.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpik9suqkl: /tmp/tmpik9suqkl.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmph_v850r5: /tmp/tmph_v850r5.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            fill +=\
    \ well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvz34e30h: /tmp/tmpvz34e30h.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpqwfggzat: /tmp/tmpqwfggzat.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmphl6cg56f: /tmp/tmphl6cg56f.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_y7vmznc: /tmp/tmp_y7vmznc.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            fill +=\
    \ well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpx4b5ofk5: /tmp/tmpx4b5ofk5.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmprk3glly3: /tmp/tmprk3glly3.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmptkzjhqhf: /tmp/tmptkzjhqhf.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmprwl0awv_: /tmp/tmprwl0awv_.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4lk23_2x: /tmp/tmp4lk23_2x.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpsrgwr0ta: /tmp/tmpsrgwr0ta.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpczl_iyxp: /tmp/tmpczl_iyxp.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill_val =\
    \ 0;\n    for(auto row : grid) {\n        for(auto val : row) {\n            max_fill_val\
    \ = std::max(max_fill_val, val);\n        }\n    }\n    return max_fill_val *\
    \ capacity;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpon5_k306: /tmp/tmpon5_k306.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpuicdro96: /tmp/tmpuicdro96.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgjmoqtk6: /tmp/tmpgjmoqtk6.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (long i = 0; i < grid.size();\
    \ i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n            if\
    \ (grid[i][j] == 1) {\n                max_fill += capacity;\n            }\n\
    \        }\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2jxnx0w_: /tmp/tmp2jxnx0w_.cpp:44: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2mso5fbq: /tmp/tmp2mso5fbq.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpbt2p5_67: /tmp/tmpbt2p5_67.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpq6eov77b: /tmp/tmpq6eov77b.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long max_fill = 0;\n    for(long row = 0; row < rows; row++) {\n        long\
    \ fill = 0;\n        for(long col = 0; col < cols; col++) {\n            if(grid[row][col]\
    \ == 1) {\n                fill++;\n            }\n        }\n        max_fill\
    \ = std::max(max_fill, fill);\n    }\n    return max_fill;\n}\nint main() {\n\
    \    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvyyp43mo: /tmp/tmpvyyp43mo.cpp:47: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(long i = 0; i < grid.size(); i++){\n        for(long j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmplx2uxtqj: /tmp/tmplx2uxtqj.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp600e9c8v: /tmp/tmp600e9c8v.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpycagelo4: /tmp/tmpycagelo4.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto unit : row) {\n            max_fill += unit;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpjjc3k7jv: /tmp/tmpjjc3k7jv.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpwr7_rijb: /tmp/tmpwr7_rijb.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto col : row) {\n            max_fill\
    \ = std::max(max_fill, col);\n        }\n    }\n    return max_fill * capacity;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpz4rfy0aj: /tmp/tmpz4rfy0aj.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpbe33r_y6: /tmp/tmpbe33r_y6.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            fill +=\
    \ well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpw6e1j9ro: /tmp/tmpw6e1j9ro.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpu5mlxw5v: /tmp/tmpu5mlxw5v.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvzll_zhd: /tmp/tmpvzll_zhd.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpmbbr7ejm: /tmp/tmpmbbr7ejm.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4czpn5x_: /tmp/tmp4czpn5x_.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpqx_txczh: /tmp/tmpqx_txczh.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpa4aze7rg: /tmp/tmpa4aze7rg.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpq1tr6ula: /tmp/tmpq1tr6ula.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well * capacity;\n \
    \       }\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpf88o8iu_: /tmp/tmpf88o8iu_.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp9hzpmrqb: /tmp/tmp9hzpmrqb.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpu_fu5jlc: /tmp/tmpu_fu5jlc.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxl5rmzoh: /tmp/tmpxl5rmzoh.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpue76s_pd: /tmp/tmpue76s_pd.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpd1un_8bu: /tmp/tmpd1un_8bu.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpbgsxpizx: /tmp/tmpbgsxpizx.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp86in8ik8: /tmp/tmp86in8ik8.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpf05nysvm: /tmp/tmpf05nysvm.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpz_2pgxb9: /tmp/tmpz_2pgxb9.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2g2jwoxj: /tmp/tmp2g2jwoxj.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmp1skd9yki: /tmp/tmp1skd9yki.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpqq0xl6a2: /tmp/tmpqq0xl6a2.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(long i = 0; i < grid.size(); i++){\n        for(long j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpkr_k5s0m: /tmp/tmpkr_k5s0m.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpe0t3u05n: /tmp/tmpe0t3u05n.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            max_fill += cell;\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmptcui5u5v: /tmp/tmptcui5u5v.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well * capacity;\n \
    \       }\n    }\n    return max_fill;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpo1hfeluq: /tmp/tmpo1hfeluq.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long max_fill = 0;\n\
    \    for(auto row : grid) {\n        for(auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpsijxgzlk: /tmp/tmpsijxgzlk.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
    \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n\
    // Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
    \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n\
    // bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the\
    \ same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n\
    // * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            fill +=\
    \ well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  stdout: ''
  stderr: "tmpuvyq0vkk: /tmp/tmpuvyq0vkk.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6)' failed.\n"
  exit_code: -6
  status: Exception
