language: cpp
name: HumanEval_143_words_in_sentence
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1) {\n            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i <= sqrt(word.size()); i += 2) {\n        if (word.size() % i == 0)\
    \ {\n          is_prime = false;\n          break;\n        }\n      }\n     \
    \ if (is_prime) {\n        result += word + \" \";\n      }\n    }\n  }\n  result.pop_back();\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpltlpn1tl: /tmp/tmpltlpn1tl.cpp:40: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::istringstream\
    \ iss(sentence);\n    std::vector<std::string> words;\n    std::copy(std::istream_iterator<std::string>(iss),\n\
    \              std::istream_iterator<std::string>(),\n              std::back_inserter(words));\n\
    \    for (const auto& word : words) {\n        if (word.size() == 2 || word.size()\
    \ == 3 || word.size() == 5 || word.size() == 7) {\n            result += word\
    \ + \" \";\n        }\n    }\n    result.pop_back();\n    return result;\n}\n\
    int main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp0q5gc46h: /tmp/tmp0q5gc46h.cpp:39: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 == 1) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i < word.size(); i += 2) {\n        if (word.size() % i == 0) {\n   \
    \       is_prime = false;\n          break;\n        }\n      }\n      if (is_prime)\
    \ {\n        result += word + \" \";\n      }\n    }\n  }\n  if (result.size()\
    \ > 0) {\n    result.pop_back();\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpe717qbiz: /tmp/tmpe717qbiz.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        words.push_back(word);\n    }\n    std::vector<std::string>\
    \ result;\n    for (auto& word : words) {\n        if (word.size() == 1) {\n \
    \           result.push_back(word);\n        } else {\n            bool is_prime\
    \ = true;\n            for (int i = 2; i < word.size(); ++i) {\n             \
    \   if (word.size() % i == 0) {\n                    is_prime = false;\n     \
    \               break;\n                }\n            }\n            if (is_prime)\
    \ {\n                result.push_back(word);\n            }\n        }\n    }\n\
    \    std::stringstream ss2;\n    for (auto& word : result) {\n        ss2 << word\
    \ << \" \";\n    }\n    return ss2.str();\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpdiuz2i_3: /tmp/tmpdiuz2i_3.cpp:49: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        words.push_back(word);\n    }\n    std::string result;\n  \
    \  for (auto word : words) {\n        if (word.size() == 2 || word.size() == 3\
    \ || word.size() == 5 || word.size() == 7) {\n            result += word + \"\
    \ \";\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp5ebos1jc: /tmp/tmp5ebos1jc.cpp:40: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (auto &word : words) {\n        if (word.size()\
    \ == 1) {\n            result.append(word);\n            result.push_back(' ');\n\
    \        } else if (word.size() == 2) {\n            result.append(word);\n  \
    \          result.push_back(' ');\n        } else if (word.size() == 3) {\n  \
    \          result.append(word);\n            result.push_back(' ');\n        }\
    \ else if (word.size() == 5) {\n            result.append(word);\n           \
    \ result.push_back(' ');\n        } else if (word.size() == 7) {\n           \
    \ result.append(word);\n            result.push_back(' ');\n        }\n    }\n\
    \    if (result.back() == ' ') {\n        result.pop_back();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpo714f3vy: /tmp/tmpo714f3vy.cpp:55: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (char c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::vector<std::string> result;\n    for (const auto& word : words) {\n\
    \        int length = word.size();\n        bool is_prime = true;\n        for\
    \ (int i = 2; i < length; ++i) {\n            if (length % i == 0) {\n       \
    \         is_prime = false;\n                break;\n            }\n        }\n\
    \        if (is_prime) {\n            result.push_back(word);\n        }\n   \
    \ }\n    std::string output;\n    for (const auto& word : result) {\n        output\
    \ += word + \" \";\n    }\n    return output.substr(0, output.size() - 1);\n}\n\
    int main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmped_sds4h: /tmp/tmped_sds4h.cpp:51: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::vector<std::string> words;\n\
    \  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >> word)\
    \ {\n    words.push_back(word);\n  }\n  std::string result;\n  for (auto &word\
    \ : words) {\n    if (word.size() == 1) {\n      result += word + \" \";\n   \
    \   continue;\n    }\n    bool is_prime = true;\n    for (int i = 2; i <= word.size()\
    \ / 2; ++i) {\n      if (word.size() % i == 0) {\n        is_prime = false;\n\
    \        break;\n      }\n    }\n    if (is_prime) {\n      result += word + \"\
    \ \";\n    }\n  }\n  result.pop_back();\n  return result;\n}\nint main() {\n \
    \   auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpgty8gk0x: /tmp/tmpgty8gk0x.cpp:46: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (char c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (const std::string& word : words) {\n      \
    \  if (word.size() == 1) {\n            result.append(word);\n            result.push_back('\
    \ ');\n        } else {\n            bool is_prime = true;\n            for (int\
    \ i = 2; i < word.size(); ++i) {\n                if (word.size() % i == 0) {\n\
    \                    is_prime = false;\n                    break;\n         \
    \       }\n            }\n            if (is_prime) {\n                result.append(word);\n\
    \                result.push_back(' ');\n            }\n        }\n    }\n   \
    \ result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmproemq6bn: /tmp/tmproemq6bn.cpp:53: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size()))\
    \ {\n            result += word + \" \";\n        }\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa0bvdj0x.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmpa0bvdj0x.cpp:22:13: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   22 |         if (is_prime(word.size())) {\n      |          \
    \   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 1) {\n      result += word + \" \";\n    } else {\n      bool is_prime =\
    \ true;\n      for (int i = 2; i < word.size(); ++i) {\n        if (word.size()\
    \ % i == 0) {\n          is_prime = false;\n          break;\n        }\n    \
    \  }\n      if (is_prime) {\n        result += word + \" \";\n      }\n    }\n\
    \  }\n  result.pop_back();\n  return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmped61nfuc: /tmp/tmped61nfuc.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.length()\
    \ == 2 || word.length() == 3 || word.length() == 5 || word.length() == 7) {\n\
    \            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::istringstream\
    \ iss(sentence);\n    std::string word;\n    while (iss >> word) {\n        if\
    \ (word.size() == 2 || word.size() == 3 || word.size() == 5 || word.size() ==\
    \ 7 || word.size() == 11 || word.size() == 13 || word.size() == 17 || word.size()\
    \ == 19 || word.size() == 23 || word.size() == 29 || word.size() == 31 || word.size()\
    \ == 37 || word.size() == 41 || word.size() == 43 || word.size() == 47 || word.size()\
    \ == 53 || word.size() == 59 || word.size() == 61 || word.size() == 67 || word.size()\
    \ == 71 || word.size() == 73 || word.size() == 79 || word.size() == 83 || word.size()\
    \ == 89 || word.size() == 97) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (char c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (std::string word : words) {\n        int len\
    \ = word.size();\n        bool is_prime = true;\n        for (int i = 2; i <=\
    \ std::sqrt(len); ++i) {\n            if (len % i == 0) {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            result += word + \" \";\n        }\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp_2wmype3: /tmp/tmp_2wmype3.cpp:48: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1) {\n            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i < word.size(); i += 2) {\n        if (word.size() % i == 0) {\n   \
    \       is_prime = false;\n          break;\n        }\n      }\n      if (is_prime)\
    \ {\n        result += word + \" \";\n      }\n    }\n  }\n  result.pop_back();\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpheqz0skk: /tmp/tmpheqz0skk.cpp:40: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 1) {\n      result += word + \" \";\n      continue;\n    }\n    bool is_prime\
    \ = true;\n    for (int i = 2; i < word.size(); ++i) {\n      if (word.size()\
    \ % i == 0) {\n        is_prime = false;\n        break;\n      }\n    }\n   \
    \ if (is_prime) {\n      result += word + \" \";\n    }\n  }\n  result.pop_back();\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp1a_4txkc: /tmp/tmp1a_4txkc.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (char c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (const std::string& word : words) {\n      \
    \  if (word.size() == 2 || word.size() == 3 || word.size() == 5 || word.size()\
    \ == 7) {\n            result += word + ' ';\n        }\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp4y8m4ca4: /tmp/tmp4y8m4ca4.cpp:45: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.size() == 2 || word.size() == 3 || word.size() == 5 || word.size()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i <= sqrt(word.size()); i += 2) {\n        if (word.size() % i == 0)\
    \ {\n          is_prime = false;\n          break;\n        }\n      }\n     \
    \ if (is_prime) {\n        result += word + \" \";\n      }\n    }\n  }\n  if\
    \ (result.size() > 0) {\n    result.pop_back();\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpjbx3wwtv: /tmp/tmpjbx3wwtv.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (auto word : words) {\n        int len = word.size();\n\
    \        if (len == 1) {\n            result.append(word);\n            result.push_back('\
    \ ');\n            continue;\n        }\n        bool is_prime = true;\n     \
    \   for (int i = 2; i < len; ++i) {\n            if (len % i == 0) {\n       \
    \         is_prime = false;\n                break;\n            }\n        }\n\
    \        if (is_prime) {\n            result.append(word);\n            result.push_back('\
    \ ');\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp42rl_9z6: /tmp/tmp42rl_9z6.cpp:54: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1) {\n      bool is_prime = true;\n      for (int i = 2; i < word.size();\
    \ ++i) {\n        if (word.size() % i == 0) {\n          is_prime = false;\n \
    \         break;\n        }\n      }\n      if (is_prime) {\n        result +=\
    \ word + \" \";\n      }\n    }\n  }\n  if (!result.empty()) {\n    result.pop_back();\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (char c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (const std::string& word : words) {\n      \
    \  if (word.size() == 1 || word.size() == 2) {\n            result += word + '\
    \ ';\n        } else {\n            bool is_prime = true;\n            for (int\
    \ i = 2; i < word.size(); ++i) {\n                if (word.size() % i == 0) {\n\
    \                    is_prime = false;\n                    break;\n         \
    \       }\n            }\n            if (is_prime) {\n                result\
    \ += word + ' ';\n            }\n        }\n    }\n    if (!result.empty()) {\n\
    \        result.pop_back();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpxg9tqt29: /tmp/tmpxg9tqt29.cpp:53: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.size() == 2 || word.size() == 3 || word.size() == 5 || word.size()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    result.pop_back();\n   \
    \ return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n \
    \   assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpabm2xq80: /tmp/tmpabm2xq80.cpp:36: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size()))\
    \ {\n            result += word + \" \";\n        }\n    }\n    if (result.size()\
    \ > 0) {\n        result.pop_back();\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo39flbv2.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmpo39flbv2.cpp:22:13: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   22 |         if (is_prime(word.size())) {\n      |          \
    \   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1 || word.size() == 2) {\n            result += word + \" \";\n        }\
    \ else {\n            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpgbvqvq0n: /tmp/tmpgbvqvq0n.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1) {\n            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::stringstream ss(sentence);\n\
    \  std::string word;\n  std::string result;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1) {\n      bool is_prime = true;\n      for (int i = 2; i < word.size();\
    \ i++) {\n        if (word.size() % i == 0) {\n          is_prime = false;\n \
    \         break;\n        }\n      }\n      if (is_prime) {\n        result +=\
    \ word + \" \";\n      }\n    }\n  }\n  return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        words.push_back(word);\n    }\n    std::string result;\n  \
    \  for (const auto& word : words) {\n        if (word.size() == 2 || word.size()\
    \ == 3 || word.size() == 5 || word.size() == 7) {\n            result += word\
    \ + \" \";\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i <= sqrt(word.size()); i += 2) {\n        if (word.size() % i == 0)\
    \ {\n          is_prime = false;\n          break;\n        }\n      }\n     \
    \ if (is_prime) {\n        result += word + \" \";\n      }\n    }\n  }\n  result.pop_back();\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpltlpn1tl: /tmp/tmpltlpn1tl.cpp:40: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::istringstream\
    \ iss(sentence);\n  std::string word;\n  while (iss >> word) {\n    if (word.length()\
    \ == 1) {\n      result += word + \" \";\n    } else {\n      bool is_prime =\
    \ true;\n      for (int i = 2; i <= word.length() / 2; ++i) {\n        if (word.length()\
    \ % i == 0) {\n          is_prime = false;\n          break;\n        }\n    \
    \  }\n      if (is_prime) {\n        result += word + \" \";\n      }\n    }\n\
    \  }\n  return result.substr(0, result.length() - 1);\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpxfrj51ba: /tmp/tmpxfrj51ba.cpp:41: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (auto word : words) {\n        if (word.size()\
    \ > 1) {\n            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpv85xcpzp: /tmp/tmpv85xcpzp.cpp:54: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::stringstream ss(sentence);\n\
    \  std::string word;\n  std::string result;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      result\
    \ += word + \" \";\n    }\n  }\n  return result.substr(0, result.size() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::istringstream\
    \ iss(sentence);\n    std::string word;\n    while (iss >> word) {\n        if\
    \ (word.size() == 1) {\n            result += word + \" \";\n        } else {\n\
    \            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    return result.substr(0, result.size() - 1);\n}\n\
    int main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpyo_o292s: /tmp/tmpyo_o292s.cpp:41: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 == 1) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i <= sqrt(word.size()); i += 2) {\n        if (word.size() % i == 0)\
    \ {\n          is_prime = false;\n          break;\n        }\n      }\n     \
    \ if (is_prime) {\n        result += word + \" \";\n      }\n    }\n  }\n  result.pop_back();\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6a8cpl7p: /tmp/tmp6a8cpl7p.cpp:40: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1) {\n            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6soszll7: /tmp/tmp6soszll7.cpp:45: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::istringstream\
    \ iss(sentence);\n    std::string word;\n    while (iss >> word) {\n        if\
    \ (word.size() == 1) {\n            result += word + \" \";\n        } else {\n\
    \            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpb59tivgh: /tmp/tmpb59tivgh.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::vector<int> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n    std::string result;\n\
    \    for (auto w : words) {\n        if (std::find(primes.begin(), primes.end(),\
    \ w.size()) != primes.end()) {\n            result += w + \" \";\n        }\n\
    \    }\n    if (result.size() > 0) {\n        result.pop_back();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    if (result.size() > 0) {\n        result.pop_back();\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpnaz1sf5c: /tmp/tmpnaz1sf5c.cpp:44: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        words.push_back(word);\n    }\n    std::vector<int> primes\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97};\n    std::string result;\n    for (auto word : words) {\n\
    \        if (std::find(primes.begin(), primes.end(), word.size()) != primes.end())\
    \ {\n            result += word + \" \";\n        }\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp8cmjba68: /tmp/tmp8cmjba68.cpp:41: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.size() == 2 || word.size() == 3 || word.size() == 5 || word.size()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    if (result.size()\
    \ > 0) {\n        result.pop_back();\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::vector<std::string> words;\n\
    \  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >> word)\
    \ {\n    words.push_back(word);\n  }\n  std::string result;\n  for (const auto&\
    \ word : words) {\n    if (word.size() == 1) {\n      result += word + \" \";\n\
    \      continue;\n    }\n    bool is_prime = true;\n    for (int i = 2; i < word.size();\
    \ ++i) {\n      if (word.size() % i == 0) {\n        is_prime = false;\n     \
    \   break;\n      }\n    }\n    if (is_prime) {\n      result += word + \" \"\
    ;\n    }\n  }\n  result.pop_back();\n  return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpv73doo1l: /tmp/tmpv73doo1l.cpp:46: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i <= sqrt(word.size()); i += 2) {\n        if (word.size() % i == 0)\
    \ {\n          is_prime = false;\n          break;\n        }\n      }\n     \
    \ if (is_prime) {\n        result += word + \" \";\n      }\n    }\n  }\n  result.pop_back();\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpltlpn1tl: /tmp/tmpltlpn1tl.cpp:40: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word = \"\";\n    for (int i = 0; i < sentence.size(); i++) {\n\
    \        if (sentence[i] == ' ') {\n            words.push_back(word);\n     \
    \       word = \"\";\n        } else {\n            word += sentence[i];\n   \
    \     }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n \
    \   for (int i = 0; i < words.size(); i++) {\n        if (words[i].size() == 1)\
    \ {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 2) {\n            result += words[i] + \" \";\n        } else {\n       \
    \     bool prime = true;\n            for (int j = 2; j < words[i].size(); j++)\
    \ {\n                if (words[i].size() % j == 0) {\n                    prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (prime) {\n                result += words[i] + \" \";\n        \
    \    }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpqkpejwbz: /tmp/tmpqkpejwbz.cpp:52: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::vector<std::string> words;\n\
    \  std::string word;\n  for (auto c : sentence) {\n    if (c == ' ') {\n     \
    \ words.push_back(word);\n      word.clear();\n    } else {\n      word.push_back(c);\n\
    \    }\n  }\n  words.push_back(word);\n  std::string result;\n  for (auto& word\
    \ : words) {\n    if (word.size() > 1) {\n      bool is_prime = true;\n      for\
    \ (int i = 2; i < word.size(); ++i) {\n        if (word.size() % i == 0) {\n \
    \         is_prime = false;\n          break;\n        }\n      }\n      if (is_prime)\
    \ {\n        result += word + \" \";\n      }\n    }\n  }\n  if (!result.empty())\
    \ {\n    result.pop_back();\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (auto word : words) {\n        if (word.size()\
    \ == 1) {\n            result.append(word);\n            result.push_back(' ');\n\
    \        } else if (word.size() == 2) {\n            result.append(word);\n  \
    \          result.push_back(' ');\n        } else if (word.size() == 3) {\n  \
    \          result.append(word);\n            result.push_back(' ');\n        }\
    \ else if (word.size() == 5) {\n            result.append(word);\n           \
    \ result.push_back(' ');\n        } else if (word.size() == 7) {\n           \
    \ result.append(word);\n            result.push_back(' ');\n        } else if\
    \ (word.size() == 11) {\n            result.append(word);\n            result.push_back('\
    \ ');\n        } else if (word.size() == 13) {\n            result.append(word);\n\
    \            result.push_back(' ');\n        } else if (word.size() == 17) {\n\
    \            result.append(word);\n            result.push_back(' ');\n      \
    \  } else if (word.size() == 19) {\n            result.append(word);\n       \
    \     result.push_back(' ');\n        } else if (word.size() == 23) {\n      \
    \      result.append(word);\n            result.push_back(' ');\n        } else\
    \ if (word.size() == 29) {\n            result.append(word);\n            result.push_back('\
    \ ');\n        } else if (word.size() == 31) {\n            result.append(word);\n\
    \            result.push_back(' ');\n        } else if (word.size() == 37) {\n\
    \            result.append(word);\n            result.push\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp91wfi5tq.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmp91wfi5tq.cpp:69:20: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018push\u2019\
    \n   69 |             result.push\n      |                    ^~~~\n/tmp/tmp91wfi5tq.cpp:71:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   71 | int main() {\n      |            ^\n/tmp/tmp91wfi5tq.cpp:80:1: error:\
    \ expected \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmp91wfi5tq.cpp:30:29:\
    \ note: to match this \u2018{\u2019\n   30 |     for (auto word : words) {\n \
    \     |                             ^\n/tmp/tmp91wfi5tq.cpp:80:1: error: expected\
    \ \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmp91wfi5tq.cpp:17:53:\
    \ note: to match this \u2018{\u2019\n   17 | std::string words_in_sentence(std::string\
    \ sentence) {\n      |                                                     ^\n\
    /tmp/tmp91wfi5tq.cpp:80:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n            bool is_prime = true;\n        \
    \    for (int i = 3; i <= sqrt(word.size()); i += 2) {\n                if (word.size()\
    \ % i == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   result += word + \" \";\n            }\n        }\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpsfm497kz: /tmp/tmpsfm497kz.cpp:40: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::vector<std::string>\
    \ words;\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        words.push_back(word);\n    }\n    for (auto word :\
    \ words) {\n        if (word.size() == 2 || word.size() == 3 || word.size() ==\
    \ 5 || word.size() == 7) {\n            result += word + \" \";\n        }\n \
    \   }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpvccha41y: /tmp/tmpvccha41y.cpp:40: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n            bool is_prime = true;\n        \
    \    for (int i = 3; i <= std::sqrt(word.size()); i += 2) {\n                if\
    \ (word.size() % i == 0) {\n                    is_prime = false;\n          \
    \          break;\n                }\n            }\n            if (is_prime)\
    \ {\n                result += word + \" \";\n            }\n        }\n    }\n\
    \    if (!result.empty()) {\n        result.pop_back();\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpx_jzi8or: /tmp/tmpx_jzi8or.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.length() > 1 && word.length() % 2 != 0) {\n            bool is_prime\
    \ = true;\n            for (int i = 3; i < word.length(); i += 2) {\n        \
    \        if (word.length() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp5j4_ex48: /tmp/tmp5j4_ex48.cpp:39: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.size() == 1) {\n            result += word + \" \";\n        \
    \    continue;\n        }\n        bool is_prime = true;\n        for (int i =\
    \ 2; i < word.size(); ++i) {\n            if (word.size() % i == 0) {\n      \
    \          is_prime = false;\n                break;\n            }\n        }\n\
    \        if (is_prime) {\n            result += word + \" \";\n        }\n   \
    \ }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpdkky4qzi: /tmp/tmpdkky4qzi.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size()))\
    \ {\n            result += word + \" \";\n        }\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa0bvdj0x.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmpa0bvdj0x.cpp:22:13: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   22 |         if (is_prime(word.size())) {\n      |          \
    \   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::stringstream ss(sentence);\n\
    \  std::string word;\n  std::string result;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      result\
    \ += word + \" \";\n    }\n  }\n  return result.substr(0, result.size() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::istringstream\
    \ iss(sentence);\n  std::string word;\n  while (iss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i < word.size(); i += 2) {\n        if (word.size() % i == 0) {\n   \
    \       is_prime = false;\n          break;\n        }\n      }\n      if (is_prime)\
    \ {\n        result += word + \" \";\n      }\n    }\n  }\n  if (result.size()\
    \ > 0) {\n    result.pop_back();\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpmxpduso0: /tmp/tmpmxpduso0.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size()))\
    \ {\n            result += word + \" \";\n        }\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa0bvdj0x.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmpa0bvdj0x.cpp:22:13: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   22 |         if (is_prime(word.size())) {\n      |          \
    \   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n            bool is_prime = true;\n        \
    \    for (int i = 3; i <= sqrt(word.size()); i += 2) {\n                if (word.size()\
    \ % i == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   result += word + \" \";\n            }\n        }\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpsfm497kz: /tmp/tmpsfm497kz.cpp:40: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::vector<std::string> words;\n\
    \  std::string word;\n  for (auto c : sentence) {\n    if (c == ' ') {\n     \
    \ words.push_back(word);\n      word.clear();\n    } else {\n      word.push_back(c);\n\
    \    }\n  }\n  if (!word.empty()) {\n    words.push_back(word);\n  }\n  std::vector<int>\
    \ primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97};\n  std::string result;\n  for (auto word : words)\
    \ {\n    if (std::find(primes.begin(), primes.end(), word.size()) != primes.end())\
    \ {\n      result += word + \" \";\n    }\n  }\n  if (!result.empty()) {\n   \
    \ result.pop_back();\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1) {\n      bool is_prime = true;\n      for (int i = 2; i < word.size();\
    \ ++i) {\n        if (word.size() % i == 0) {\n          is_prime = false;\n \
    \         break;\n        }\n      }\n      if (is_prime) {\n        result +=\
    \ word + \" \";\n      }\n    }\n  }\n  return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        words.push_back(word);\n    }\n    std::string result;\n  \
    \  for (const auto& word : words) {\n        if (word.size() == 2 || word.size()\
    \ == 3 || word.size() == 5 || word.size() == 7) {\n            result += word\
    \ + \" \";\n        }\n    }\n    result.pop_back();\n    return result;\n}\n\
    int main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpjsp7zab3: /tmp/tmpjsp7zab3.cpp:40: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::istringstream\
    \ iss(sentence);\n    std::string word;\n    while (iss >> word) {\n        if\
    \ (word.size() > 1 && word.size() < 10) {\n            int i = 2;\n          \
    \  for (; i <= word.size() / 2; ++i) {\n                if (word.size() % i ==\
    \ 0) {\n                    break;\n                }\n            }\n       \
    \     if (i > word.size() / 2) {\n                result += word + \" \";\n  \
    \          }\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098880
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.size())) {\n            result += word + \" \";\n   \
    \     }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplopfl4mr.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmplopfl4mr.cpp:22:13: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   22 |         if (is_prime(word.size())) {\n      |          \
    \   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1 && word.size() % 2 == 1) {\n            bool is_prime = true;\n        \
    \    for (int i = 3; i <= std::sqrt(word.size()); i += 2) {\n                if\
    \ (word.size() % i == 0) {\n                    is_prime = false;\n          \
    \          break;\n                }\n            }\n            if (is_prime)\
    \ {\n                result += word + \" \";\n            }\n        }\n    }\n\
    \    if (!result.empty()) {\n        result.pop_back();\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpwan44zyv: /tmp/tmpwan44zyv.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1) {\n      bool is_prime = true;\n      for (int i = 2; i < word.size();\
    \ ++i) {\n        if (word.size() % i == 0) {\n          is_prime = false;\n \
    \         break;\n        }\n      }\n      if (is_prime) {\n        result +=\
    \ word + \" \";\n      }\n    }\n  }\n  return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (std::getline(ss, word, ' '))\
    \ {\n        if (word.length() == 1) {\n            result += word + \" \";\n\
    \        } else {\n            bool is_prime = true;\n            for (int i =\
    \ 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n\
    \                    is_prime = false;\n                    break;\n         \
    \       }\n            }\n            if (is_prime) {\n                result\
    \ += word + \" \";\n            }\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpec39tdxm: /tmp/tmpec39tdxm.cpp:41: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::istringstream\
    \ iss(sentence);\n  std::string word;\n  while (iss >> word) {\n    if (word.size()\
    \ == 1) {\n      result += word + \" \";\n    } else {\n      bool is_prime =\
    \ true;\n      for (int i = 2; i < word.size(); ++i) {\n        if (word.size()\
    \ % i == 0) {\n          is_prime = false;\n          break;\n        }\n    \
    \  }\n      if (is_prime) {\n        result += word + \" \";\n      }\n    }\n\
    \  }\n  return result.substr(0, result.size() - 1);\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpzn62khxa: /tmp/tmpzn62khxa.cpp:41: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::istringstream\
    \ iss(sentence);\n    std::string word;\n    while (iss >> word) {\n        if\
    \ (word.size() == 1) {\n            result += word + \" \";\n        } else {\n\
    \            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpb59tivgh: /tmp/tmpb59tivgh.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::vector<std::string> words;\n\
    \  std::string word;\n  for (auto c : sentence) {\n    if (c == ' ') {\n     \
    \ words.push_back(word);\n      word.clear();\n    } else {\n      word.push_back(c);\n\
    \    }\n  }\n  words.push_back(word);\n  std::string result;\n  for (auto word\
    \ : words) {\n    if (word.size() == 1) {\n      result.append(word);\n      result.push_back('\
    \ ');\n    } else if (word.size() == 2) {\n      result.append(word);\n      result.push_back('\
    \ ');\n    } else if (word.size() == 3) {\n      result.append(word);\n      result.push_back('\
    \ ');\n    } else if (word.size() == 5) {\n      result.append(word);\n      result.push_back('\
    \ ');\n    } else if (word.size() == 7) {\n      result.append(word);\n      result.push_back('\
    \ ');\n    } else if (word.size() == 11) {\n      result.append(word);\n     \
    \ result.push_back(' ');\n    } else if (word.size() == 13) {\n      result.append(word);\n\
    \      result.push_back(' ');\n    } else if (word.size() == 17) {\n      result.append(word);\n\
    \      result.push_back(' ');\n    } else if (word.size() == 19) {\n      result.append(word);\n\
    \      result.push_back(' ');\n    } else if (word.size() == 23) {\n      result.append(word);\n\
    \      result.push_back(' ');\n    } else if (word.size() == 29) {\n      result.append(word);\n\
    \      result.push_back(' ');\n    } else if (word.size() == 31) {\n      result.append(word);\n\
    \      result.push_back(' ');\n    } else if (word.size() == 37) {\n      result.append(word);\n\
    \      result.push\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphx7i9gw0.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmphx7i9gw0.cpp:69:14: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018push\u2019\
    \n   69 |       result.push\n      |              ^~~~\n/tmp/tmphx7i9gw0.cpp:71:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   71 | int main() {\n      |            ^\n/tmp/tmphx7i9gw0.cpp:80:1: error:\
    \ expected \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmphx7i9gw0.cpp:30:27:\
    \ note: to match this \u2018{\u2019\n   30 |   for (auto word : words) {\n   \
    \   |                           ^\n/tmp/tmphx7i9gw0.cpp:80:1: error: expected\
    \ \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmphx7i9gw0.cpp:17:53:\
    \ note: to match this \u2018{\u2019\n   17 | std::string words_in_sentence(std::string\
    \ sentence) {\n      |                                                     ^\n\
    /tmp/tmphx7i9gw0.cpp:80:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::istringstream\
    \ iss(sentence);\n    std::string word;\n    while (iss >> word) {\n        if\
    \ (word.size() > 1 && word.size() % 2 == 1) {\n            bool is_prime = true;\n\
    \            for (int i = 3; i < word.size(); i += 2) {\n                if (word.size()\
    \ % i == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   result += word + \" \";\n            }\n        }\n    }\n    if (!result.empty())\
    \ {\n        result.pop_back();\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmped0xl25f: /tmp/tmped0xl25f.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 == 1) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i < word.size(); i += 2) {\n        if (word.size() % i == 0) {\n   \
    \       is_prime = false;\n          break;\n        }\n      }\n      if (is_prime)\
    \ {\n        result += word + \" \";\n      }\n    }\n  }\n  if (result.size()\
    \ > 0) {\n    result.pop_back();\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpe717qbiz: /tmp/tmpe717qbiz.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (auto word : words) {\n        int length =\
    \ word.size();\n        bool is_prime = true;\n        for (int i = 2; i < length;\
    \ ++i) {\n            if (length % i == 0) {\n                is_prime = false;\n\
    \                break;\n            }\n        }\n        if (is_prime) {\n \
    \           result += word + \" \";\n        }\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpc__958yc: /tmp/tmpc__958yc.cpp:48: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.size())) {\n            result += word + \" \";\n   \
    \     }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplopfl4mr.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmplopfl4mr.cpp:22:13: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   22 |         if (is_prime(word.size())) {\n      |          \
    \   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (char c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::vector<int> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n    std::string result;\n\
    \    for (const auto& word : words) {\n        if (std::find(primes.begin(), primes.end(),\
    \ word.size()) != primes.end()) {\n            result += word + \" \";\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp3alpjbcw: /tmp/tmp3alpjbcw.cpp:46: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 1) {\n      result += word + \" \";\n      continue;\n    }\n    bool is_prime\
    \ = true;\n    for (int i = 2; i < word.size(); ++i) {\n      if (word.size()\
    \ % i == 0) {\n        is_prime = false;\n        break;\n      }\n    }\n   \
    \ if (is_prime) {\n      result += word + \" \";\n    }\n  }\n  result.pop_back();\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp1a_4txkc: /tmp/tmp1a_4txkc.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        words.push_back(word);\n    }\n    std::string result;\n  \
    \  for (const auto& word : words) {\n        if (word.size() == 1 || word.size()\
    \ == 2) {\n            result += word + \" \";\n            continue;\n      \
    \  }\n        bool is_prime = true;\n        for (int i = 2; i <= std::sqrt(word.size());\
    \ ++i) {\n            if (word.size() % i == 0) {\n                is_prime =\
    \ false;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            result += word + \" \";\n        }\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpfsx1bt48: /tmp/tmpfsx1bt48.cpp:46: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::vector<std::string> words;\n\
    \  std::stringstream ss(sentence);\n  std::string word;\n  while (std::getline(ss,\
    \ word, ' ')) {\n    words.push_back(word);\n  }\n  std::string result;\n  for\
    \ (const auto& word : words) {\n    if (word.size() == 1) {\n      result += word\
    \ + \" \";\n      continue;\n    }\n    bool is_prime = true;\n    for (int i\
    \ = 2; i < word.size(); ++i) {\n      if (word.size() % i == 0) {\n        is_prime\
    \ = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      result\
    \ += word + \" \";\n    }\n  }\n  result.pop_back();\n  return result;\n}\nint\
    \ main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpn9m38vpk: /tmp/tmpn9m38vpk.cpp:46: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i <= std::sqrt(word.size()); i += 2) {\n        if (word.size() % i ==\
    \ 0) {\n          is_prime = false;\n          break;\n        }\n      }\n  \
    \    if (is_prime) {\n        result += word + \" \";\n      }\n    }\n  }\n \
    \ if (result.size() > 0) {\n    result.pop_back();\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpts_k9ibb: /tmp/tmpts_k9ibb.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    if (result.size() > 0) {\n\
    \        result.pop_back();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i <= sqrt(word.size()); i += 2) {\n        if (word.size() % i == 0)\
    \ {\n          is_prime = false;\n          break;\n        }\n      }\n     \
    \ if (is_prime) {\n        result += word + \" \";\n      }\n    }\n  }\n  if\
    \ (result.size() > 0) {\n    result.pop_back();\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpjbx3wwtv: /tmp/tmpjbx3wwtv.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 == 1) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i < word.size(); i += 2) {\n        if (word.size() % i == 0) {\n   \
    \       is_prime = false;\n          break;\n        }\n      }\n      if (is_prime)\
    \ {\n        result += word + \" \";\n      }\n    }\n  }\n  if (result.size()\
    \ > 0) {\n    result.pop_back();\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpe717qbiz: /tmp/tmpe717qbiz.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.length()\
    \ == 2 || word.length() == 3 || word.length() == 5 || word.length() == 7) {\n\
    \            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 1) {\n      result += word + \" \";\n    } else {\n      bool is_prime =\
    \ true;\n      for (int i = 2; i < word.size(); ++i) {\n        if (word.size()\
    \ % i == 0) {\n          is_prime = false;\n          break;\n        }\n    \
    \  }\n      if (is_prime) {\n        result += word + \" \";\n      }\n    }\n\
    \  }\n  result.pop_back();\n  return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmped61nfuc: /tmp/tmped61nfuc.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (char c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (const std::string& word : words) {\n      \
    \  if (word.size() == 1) {\n            result.append(word);\n            result.push_back('\
    \ ');\n        } else {\n            bool is_prime = true;\n            for (int\
    \ i = 2; i < word.size(); ++i) {\n                if (word.size() % i == 0) {\n\
    \                    is_prime = false;\n                    break;\n         \
    \       }\n            }\n            if (is_prime) {\n                result.append(word);\n\
    \                result.push_back(' ');\n            }\n        }\n    }\n   \
    \ if (!result.empty()) {\n        result.pop_back();\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpa8kubgy7: /tmp/tmpa8kubgy7.cpp:55: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::vector<std::string> words;\n\
    \  std::string word;\n  for (char c : sentence) {\n    if (c == ' ') {\n     \
    \ words.push_back(word);\n      word.clear();\n    } else {\n      word.push_back(c);\n\
    \    }\n  }\n  words.push_back(word);\n  std::string result;\n  for (const std::string&\
    \ word : words) {\n    if (word.size() > 1 && word.size() % 2 == 1) {\n      bool\
    \ is_prime = true;\n      for (int i = 3; i <= std::sqrt(word.size()); i += 2)\
    \ {\n        if (word.size() % i == 0) {\n          is_prime = false;\n      \
    \    break;\n        }\n      }\n      if (is_prime) {\n        result += word\
    \ + ' ';\n      }\n    }\n  }\n  if (!result.empty()) {\n    result.pop_back();\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp90d57ror: /tmp/tmp90d57ror.cpp:51: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1 || word.size() == 2) {\n            result += word + \" \";\n        }\
    \ else {\n            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpgbvqvq0n: /tmp/tmpgbvqvq0n.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.length()\
    \ == 2 || word.length() == 3 || word.length() == 5 || word.length() == 7) {\n\
    \            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i < word.size(); i += 2) {\n        if (word.size() % i == 0) {\n   \
    \       is_prime = false;\n          break;\n        }\n      }\n      if (is_prime)\
    \ {\n        result += word + \" \";\n      }\n    }\n  }\n  result.pop_back();\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpheqz0skk: /tmp/tmpheqz0skk.cpp:40: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.size() == 2 || word.size() == 3 || word.size() == 5 || word.size()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (auto word : words) {\n        if (word.size()\
    \ == 1) {\n            result.append(word);\n            result.push_back(' ');\n\
    \        } else if (word.size() == 2) {\n            result.append(word);\n  \
    \          result.push_back(' ');\n        } else if (word.size() == 3) {\n  \
    \          result.append(word);\n            result.push_back(' ');\n        }\
    \ else if (word.size() == 5) {\n            result.append(word);\n           \
    \ result.push_back(' ');\n        } else if (word.size() == 7) {\n           \
    \ result.append(word);\n            result.push_back(' ');\n        }\n    }\n\
    \    if (result.back() == ' ') {\n        result.pop_back();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpb350wd0f: /tmp/tmpb350wd0f.cpp:55: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::stringstream ss(sentence);\n\
    \  std::string word;\n  std::vector<std::string> words;\n  while (ss >> word)\
    \ {\n    words.push_back(word);\n  }\n  std::vector<int> primes = {2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97};\n  std::string result;\n  for (auto word : words) {\n    if (std::find(primes.begin(),\
    \ primes.end(), word.size()) != primes.end()) {\n      result += word + \" \"\
    ;\n    }\n  }\n  return result.substr(0, result.size() - 1);\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size()))\
    \ {\n            result += word + \" \";\n        }\n    }\n    if (result.size()\
    \ > 0) {\n        result.pop_back();\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo39flbv2.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmpo39flbv2.cpp:22:13: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   22 |         if (is_prime(word.size())) {\n      |          \
    \   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 1) {\n      result += word + \" \";\n      continue;\n    }\n    bool is_prime\
    \ = true;\n    for (int i = 2; i < word.size(); ++i) {\n      if (word.size()\
    \ % i == 0) {\n        is_prime = false;\n        break;\n      }\n    }\n   \
    \ if (is_prime) {\n      result += word + \" \";\n    }\n  }\n  result.pop_back();\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp1a_4txkc: /tmp/tmp1a_4txkc.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (auto word : words) {\n        if (word.size()\
    \ == 1) {\n            result.append(word);\n            result.push_back(' ');\n\
    \        } else if (word.size() == 2) {\n            result.append(word);\n  \
    \          result.push_back(' ');\n        } else if (word.size() == 3) {\n  \
    \          result.append(word);\n            result.push_back(' ');\n        }\
    \ else if (word.size() == 5) {\n            result.append(word);\n           \
    \ result.push_back(' ');\n        } else if (word.size() == 7) {\n           \
    \ result.append(word);\n            result.push_back(' ');\n        }\n    }\n\
    \    if (result.size() > 0) {\n        result.pop_back();\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpabnoc93r: /tmp/tmpabnoc93r.cpp:55: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    result.pop_back();\n   \
    \ return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n \
    \   assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpabm2xq80: /tmp/tmpabm2xq80.cpp:36: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::istringstream\
    \ iss(sentence);\n  std::string word;\n  while (iss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      result\
    \ += word + \" \";\n    }\n  }\n  return result.substr(0, result.size() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i <= std::sqrt(word.size()); i += 2) {\n        if (word.size() % i ==\
    \ 0) {\n          is_prime = false;\n          break;\n        }\n      }\n  \
    \    if (is_prime) {\n        result += word + \" \";\n      }\n    }\n  }\n \
    \ result.pop_back();\n  return result;\n}\nint main() {\n    auto candidate =\
    \ words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"));\n\
    \    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpsg85gcvx: /tmp/tmpsg85gcvx.cpp:40: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::vector<std::string> words;\n\
    \  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >> word)\
    \ {\n    words.push_back(word);\n  }\n  std::string result;\n  for (const auto&\
    \ word : words) {\n    if (word.size() == 2 || word.size() == 3 || word.size()\
    \ == 5 || word.size() == 7) {\n      result += word + \" \";\n    }\n  }\n  result.pop_back();\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmps226ibv2: /tmp/tmps226ibv2.cpp:40: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n            bool is_prime = true;\n        \
    \    for (int i = 3; i < word.size(); i += 2) {\n                if (word.size()\
    \ % i == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   result += word + \" \";\n            }\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpv52q61m8: /tmp/tmpv52q61m8.cpp:39: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::vector<std::string> words;\n    while (ss >>\
    \ word) {\n        words.push_back(word);\n    }\n    std::vector<int> primes\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97};\n    std::string result;\n    for (const auto& word : words)\
    \ {\n        if (std::find(primes.begin(), primes.end(), word.size()) != primes.end())\
    \ {\n            result += word + \" \";\n        }\n    }\n    if (result.size()\
    \ > 0) {\n        result.pop_back();\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (char c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (const std::string& word : words) {\n      \
    \  if (word.size() > 1 && word.size() % 2 != 0) {\n            result += word\
    \ + ' ';\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpd9fo_z8g: /tmp/tmpd9fo_z8g.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::vector<std::string> words;\n\
    \  std::string word;\n  std::istringstream iss(sentence);\n  while (iss >> word)\
    \ {\n    words.push_back(word);\n  }\n  std::string result;\n  for (auto w : words)\
    \ {\n    if (w.size() == 1 || w.size() == 2) {\n      result += w + \" \";\n \
    \   } else {\n      bool is_prime = true;\n      for (int i = 2; i <= w.size()\
    \ / 2; ++i) {\n        if (w.size() % i == 0) {\n          is_prime = false;\n\
    \          break;\n        }\n      }\n      if (is_prime) {\n        result +=\
    \ w + \" \";\n      }\n    }\n  }\n  return result.substr(0, result.size() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpzorqa1vh: /tmp/tmpzorqa1vh.cpp:45: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1 || word.size() == 2) {\n            result += word + \" \";\n        }\
    \ else {\n            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpgbvqvq0n: /tmp/tmpgbvqvq0n.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1) {\n            bool is_prime = true;\n            for (int i = 2; i <=\
    \ word.size() / 2; ++i) {\n                if (word.size() % i == 0) {\n     \
    \               is_prime = false;\n                    break;\n              \
    \  }\n            }\n            if (is_prime) {\n                result += word\
    \ + \" \";\n            }\n        }\n    }\n    if (!result.empty()) {\n    \
    \    result.pop_back();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::istringstream\
    \ iss(sentence);\n  std::string word;\n  while (iss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i < word.size(); i += 2) {\n        if (word.size() % i == 0) {\n   \
    \       is_prime = false;\n          break;\n        }\n      }\n      if (is_prime)\
    \ {\n        result += word + \" \";\n      }\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp5h_i30k8: /tmp/tmp5h_i30k8.cpp:39: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::vector<std::string> words;\n    while (ss >>\
    \ word) {\n        words.push_back(word);\n    }\n    std::vector<int> primes\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97};\n    std::string result;\n    for (auto& word : words)\
    \ {\n        if (std::find(primes.begin(), primes.end(), word.size()) != primes.end())\
    \ {\n            result += word + \" \";\n        }\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpt3vu8w1q: /tmp/tmpt3vu8w1q.cpp:41: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1 && word.size() % 2 != 0) {\n            bool is_prime = true;\n        \
    \    for (int i = 3; i <= std::sqrt(word.size()); i += 2) {\n                if\
    \ (word.size() % i == 0) {\n                    is_prime = false;\n          \
    \          break;\n                }\n            }\n            if (is_prime)\
    \ {\n                result += word + \" \";\n            }\n        }\n    }\n\
    \    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp9tr01o5f: /tmp/tmp9tr01o5f.cpp:40: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    if (result.size() > 0) {\n\
    \        result.pop_back();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    if (!word.empty())\
    \ {\n        words.push_back(word);\n    }\n    std::vector<std::string> result;\n\
    \    for (auto word : words) {\n        int len = word.size();\n        if (len\
    \ == 1) {\n            result.push_back(word);\n            continue;\n      \
    \  }\n        bool is_prime = true;\n        for (int i = 2; i < len; ++i) {\n\
    \            if (len % i == 0) {\n                is_prime = false;\n        \
    \        break;\n            }\n        }\n        if (is_prime) {\n         \
    \   result.push_back(word);\n        }\n    }\n    std::string res;\n    for (auto\
    \ word : result) {\n        res += word;\n        res += ' ';\n    }\n    if (!res.empty())\
    \ {\n        res.pop_back();\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpd4lhkkmk: /tmp/tmpd4lhkkmk.cpp:61: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::vector<std::string> words;\n\
    \  std::string word;\n  for (char c : sentence) {\n    if (c == ' ') {\n     \
    \ words.push_back(word);\n      word.clear();\n    } else {\n      word.push_back(c);\n\
    \    }\n  }\n  words.push_back(word);\n  std::vector<int> primes = {2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97};\n  std::string result;\n  for (std::string word : words) {\n    if\
    \ (std::find(primes.begin(), primes.end(), word.size()) != primes.end()) {\n \
    \     result += word + \" \";\n    }\n  }\n  result.pop_back();\n  return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp3pqi75hb: /tmp/tmp3pqi75hb.cpp:46: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::vector<std::string> words;\n\
    \  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >> word)\
    \ {\n    words.push_back(word);\n  }\n  std::string result;\n  for (const auto&\
    \ word : words) {\n    if (word.size() == 1) {\n      result += word + \" \";\n\
    \      continue;\n    }\n    bool is_prime = true;\n    for (int i = 2; i < word.size();\
    \ ++i) {\n      if (word.size() % i == 0) {\n        is_prime = false;\n     \
    \   break;\n      }\n    }\n    if (is_prime) {\n      result += word + \" \"\
    ;\n    }\n  }\n  result.pop_back();\n  return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpv73doo1l: /tmp/tmpv73doo1l.cpp:46: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (auto word : words) {\n        if (word.size()\
    \ == 1) {\n            result.append(word);\n            result.push_back(' ');\n\
    \        } else if (word.size() == 2) {\n            result.append(word);\n  \
    \          result.push_back(' ');\n        } else if (word.size() == 3) {\n  \
    \          result.append(word);\n            result.push_back(' ');\n        }\
    \ else if (word.size() == 5) {\n            result.append(word);\n           \
    \ result.push_back(' ');\n        } else if (word.size() == 7) {\n           \
    \ result.append(word);\n            result.push_back(' ');\n        } else if\
    \ (word.size() == 11) {\n            result.append(word);\n            result.push_back('\
    \ ');\n        } else if (word.size() == 13) {\n            result.append(word);\n\
    \            result.push_back(' ');\n        } else if (word.size() == 17) {\n\
    \            result.append(word);\n            result.push_back(' ');\n      \
    \  } else if (word.size() == 19) {\n            result.append(word);\n       \
    \     result.push_back(' ');\n        } else if (word.size() == 23) {\n      \
    \      result.append(word);\n            result.push_back(' ');\n        } else\
    \ if (word.size() == 29) {\n            result.append(word);\n            result.push_back('\
    \ ');\n        } else if (word.size() == 31) {\n            result.append(word);\n\
    \            result.push_back(' ');\n        } else if (word.size() == 37) {\n\
    \            result.append(word);\n            result.push\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp91wfi5tq.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmp91wfi5tq.cpp:69:20: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018push\u2019\
    \n   69 |             result.push\n      |                    ^~~~\n/tmp/tmp91wfi5tq.cpp:71:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   71 | int main() {\n      |            ^\n/tmp/tmp91wfi5tq.cpp:80:1: error:\
    \ expected \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmp91wfi5tq.cpp:30:29:\
    \ note: to match this \u2018{\u2019\n   30 |     for (auto word : words) {\n \
    \     |                             ^\n/tmp/tmp91wfi5tq.cpp:80:1: error: expected\
    \ \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmp91wfi5tq.cpp:17:53:\
    \ note: to match this \u2018{\u2019\n   17 | std::string words_in_sentence(std::string\
    \ sentence) {\n      |                                                     ^\n\
    /tmp/tmp91wfi5tq.cpp:80:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.size() == 1) {\n            result += word + \" \";\n        \
    \    continue;\n        }\n        bool is_prime = true;\n        for (int i =\
    \ 2; i <= word.size() / 2; ++i) {\n            if (word.size() % i == 0) {\n \
    \               is_prime = false;\n                break;\n            }\n   \
    \     }\n        if (is_prime) {\n            result += word + \" \";\n      \
    \  }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n   \
    \ auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpoa1efbnv: /tmp/tmpoa1efbnv.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098880
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (auto word : words) {\n        if (word.size()\
    \ == 1) {\n            result.append(word);\n            result.push_back(' ');\n\
    \        } else if (word.size() == 2) {\n            result.append(word);\n  \
    \          result.push_back(' ');\n        } else if (word.size() == 3) {\n  \
    \          result.append(word);\n            result.push_back(' ');\n        }\
    \ else if (word.size() == 5) {\n            result.append(word);\n           \
    \ result.push_back(' ');\n        } else if (word.size() == 7) {\n           \
    \ result.append(word);\n            result.push_back(' ');\n        } else if\
    \ (word.size() == 11) {\n            result.append(word);\n            result.push_back('\
    \ ');\n        } else if (word.size() == 13) {\n            result.append(word);\n\
    \            result.push_back(' ');\n        } else if (word.size() == 17) {\n\
    \            result.append(word);\n            result.push_back(' ');\n      \
    \  } else if (word.size() == 19) {\n            result.append(word);\n       \
    \     result.push_back(' ');\n        } else if (word.size() == 23) {\n      \
    \      result.append(word);\n            result.push_back(' ');\n        } else\
    \ if (word.size() == 29) {\n            result.append(word);\n            result.push_back('\
    \ ');\n        } else if (word.size() == 31) {\n            result.append(word);\n\
    \            result.push_back(' ');\n        } else if (word.size() == 37) {\n\
    \            result.append(word);\n            result.push\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp91wfi5tq.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmp91wfi5tq.cpp:69:20: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018push\u2019\
    \n   69 |             result.push\n      |                    ^~~~\n/tmp/tmp91wfi5tq.cpp:71:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   71 | int main() {\n      |            ^\n/tmp/tmp91wfi5tq.cpp:80:1: error:\
    \ expected \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmp91wfi5tq.cpp:30:29:\
    \ note: to match this \u2018{\u2019\n   30 |     for (auto word : words) {\n \
    \     |                             ^\n/tmp/tmp91wfi5tq.cpp:80:1: error: expected\
    \ \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmp91wfi5tq.cpp:17:53:\
    \ note: to match this \u2018{\u2019\n   17 | std::string words_in_sentence(std::string\
    \ sentence) {\n      |                                                     ^\n\
    /tmp/tmp91wfi5tq.cpp:80:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::istringstream\
    \ iss(sentence);\n    std::string word;\n    while (iss >> word) {\n        if\
    \ (word.size() == 2 || word.size() == 3 || word.size() == 5 || word.size() ==\
    \ 7 || word.size() == 11 || word.size() == 13 || word.size() == 17 || word.size()\
    \ == 19 || word.size() == 23 || word.size() == 29 || word.size() == 31 || word.size()\
    \ == 37 || word.size() == 41 || word.size() == 43 || word.size() == 47 || word.size()\
    \ == 53 || word.size() == 59 || word.size() == 61 || word.size() == 67 || word.size()\
    \ == 71 || word.size() == 73 || word.size() == 79 || word.size() == 83 || word.size()\
    \ == 89 || word.size() == 97) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.length()\
    \ == 2 || word.length() == 3 || word.length() == 5 || word.length() == 7 || word.length()\
    \ == 11 || word.length() == 13 || word.length() == 17 || word.length() == 19 ||\
    \ word.length() == 23 || word.length() == 29 || word.length() == 31 || word.length()\
    \ == 37 || word.length() == 41 || word.length() == 43 || word.length() == 47 ||\
    \ word.length() == 53 || word.length() == 59 || word.length() == 61 || word.length()\
    \ == 67 || word.length() == 71 || word.length() == 73 || word.length() == 79 ||\
    \ word.length() == 83 || word.length() == 89 || word.length() == 97) {\n     \
    \       result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098880
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result = \"\";\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.size() == 2 || word.size() == 3 || word.size() ==\
    \ 5 || word.size() == 7 || word.size() == 11 || word.size() == 13 || word.size()\
    \ == 17 || word.size() == 19 || word.size() == 23 || word.size() == 29 || word.size()\
    \ == 31 || word.size() == 37 || word.size() == 41 || word.size() == 43 || word.size()\
    \ == 47 || word.size() == 53 || word.size() == 59 || word.size() == 61 || word.size()\
    \ == 67 || word.size() == 71 || word.size() == 73 || word.size() == 79 || word.size()\
    \ == 83 || word.size() == 89 || word.size() == 97) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.size() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.length()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.length(); ++i) {\n\
    \                if (word.length() % i == 0) {\n                    is_prime =\
    \ false;\n                    break;\n                }\n            }\n     \
    \       if (is_prime) {\n                result += word + \" \";\n           \
    \ }\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmppy45zamu: /tmp/tmppy45zamu.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.length()\
    \ == 2 || word.length() == 3 || word.length() == 5 || word.length() == 7) {\n\
    \            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result = \"\";\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.size() == 1) {\n            result += word + \" \"\
    ;\n        } else {\n            bool is_prime = true;\n            for (int i\
    \ = 2; i < word.size(); i++) {\n                if (word.size() % i == 0) {\n\
    \                    is_prime = false;\n                    break;\n         \
    \       }\n            }\n            if (is_prime) {\n                result\
    \ += word + \" \";\n            }\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpct7w0m01: /tmp/tmpct7w0m01.cpp:41: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (char c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::vector<int> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n    std::string result;\n\
    \    for (std::string word : words) {\n        if (std::find(primes.begin(), primes.end(),\
    \ word.size()) != primes.end()) {\n            result += word + \" \";\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpr164t27h: /tmp/tmpr164t27h.cpp:46: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098881
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::istringstream\
    \ iss(sentence);\n    std::string word;\n    while (iss >> word) {\n        if\
    \ (word.size() == 1) {\n            result += word + \" \";\n        } else {\n\
    \            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpb59tivgh: /tmp/tmpb59tivgh.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp6chg1qah: /tmp/tmp6chg1qah.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (std::getline(ss,\
    \ word, ' ')) {\n        words.push_back(word);\n    }\n    std::string result;\n\
    \    for (const auto& word : words) {\n        if (word.size() == 2 || word.size()\
    \ == 3 || word.size() == 5 || word.size() == 7) {\n            result += word\
    \ + \" \";\n        }\n    }\n    result.pop_back();\n    return result;\n}\n\
    int main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp0beq3f1s: /tmp/tmp0beq3f1s.cpp:40: int main(): Assertion `candidate(("here"))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660098882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1 || word.size() == 2) {\n            result += word + \" \";\n        }\
    \ else {\n            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpgbvqvq0n: /tmp/tmpgbvqvq0n.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1 && word.size() % 2 == 1) {\n            bool is_prime = true;\n        \
    \    for (int i = 3; i <= sqrt(word.size()); i += 2) {\n                if (word.size()\
    \ % i == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   result += word + \" \";\n            }\n        }\n    }\n    if (result.size()\
    \ > 0) {\n        result.pop_back();\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpk78zpedh: /tmp/tmpk78zpedh.cpp:42: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098882
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::istringstream\
    \ iss(sentence);\n    std::string word;\n    while (iss >> word) {\n        if\
    \ (is_prime(word.size())) {\n            result += word + \" \";\n        }\n\
    \    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5x0_9fbj.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmp5x0_9fbj.cpp:22:13: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   22 |         if (is_prime(word.size())) {\n      |          \
    \   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660098881
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.size() == 2 || word.size() == 3 || word.size() == 5 || word.size()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::vector<std::string> words;\n\
    \    std::string word;\n    for (char c : sentence) {\n        if (c == ' ') {\n\
    \            words.push_back(word);\n            word.clear();\n        } else\
    \ {\n            word.push_back(c);\n        }\n    }\n    words.push_back(word);\n\
    \    std::string result;\n    for (const std::string& word : words) {\n      \
    \  if (word.size() == 1 || word.size() == 2) {\n            result += word + '\
    \ ';\n        } else {\n            bool is_prime = true;\n            for (int\
    \ i = 2; i < word.size(); ++i) {\n                if (word.size() % i == 0) {\n\
    \                    is_prime = false;\n                    break;\n         \
    \       }\n            }\n            if (is_prime) {\n                result\
    \ += word + ' ';\n            }\n        }\n    }\n    if (!result.empty()) {\n\
    \        result.pop_back();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpxg9tqt29: /tmp/tmpxg9tqt29.cpp:53: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098878
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::istringstream\
    \ iss(sentence);\n  std::string word;\n  while (iss >> word) {\n    if (word.size()\
    \ > 1 && word.size() % 2 == 1) {\n      bool is_prime = true;\n      for (int\
    \ i = 3; i < word.size(); i += 2) {\n        if (word.size() % i == 0) {\n   \
    \       is_prime = false;\n          break;\n        }\n      }\n      if (is_prime)\
    \ {\n        result += word + \" \";\n      }\n    }\n  }\n  result.pop_back();\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpx86evwf2: /tmp/tmpx86evwf2.cpp:40: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098882
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      \
    \      result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size()))\
    \ {\n            result += word + \" \";\n        }\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa0bvdj0x.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019\
    :\n/tmp/tmpa0bvdj0x.cpp:22:13: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   22 |         if (is_prime(word.size())) {\n      |          \
    \   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ > 1) {\n            bool is_prime = true;\n            for (int i = 2; i < word.size();\
    \ ++i) {\n                if (word.size() % i == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                result += word + \" \";\n         \
    \   }\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.length()\
    \ == 2 || word.length() == 3 || word.length() == 5 || word.length() == 7) {\n\
    \            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.length()\
    \ == 2 || word.length() == 3 || word.length() == 5 || word.length() == 7) {\n\
    \            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.length()\
    \ == 2 || word.length() == 3 || word.length() == 5 || word.length() == 7) {\n\
    \            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::vector<std::string>\
    \ words;\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        words.push_back(word);\n    }\n    for (int i = 0; i\
    \ < words.size(); i++) {\n        if (words[i].size() == 1) {\n            result\
    \ += words[i] + \" \";\n        } else {\n            bool is_prime = true;\n\
    \            for (int j = 2; j < words[i].size(); j++) {\n                if (words[i].size()\
    \ % j == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   result += words[i] + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmp2dwrvcx6: /tmp/tmp2dwrvcx6.cpp:45: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098882
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size()\
    \ == 1) {\n            result += word + \" \";\n        } else {\n           \
    \ bool is_prime = true;\n            for (int i = 2; i < word.size(); ++i) {\n\
    \                if (word.size() % i == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                result += word + \" \";\n            }\n     \
    \   }\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: Exception
  stderr: 'tmpez2u5ebx: /tmp/tmpez2u5ebx.cpp:41: int main(): Assertion `candidate(("This
    is a test")) == ("is")'' failed.

    '
  stdout: ''
  timestamp: 1660098882
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::string result;\n  std::stringstream\
    \ ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (word.size()\
    \ == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7 || word.size()\
    \ == 11 || word.size() == 13 || word.size() == 17 || word.size() == 19 || word.size()\
    \ == 23 || word.size() == 29 || word.size() == 31 || word.size() == 37 || word.size()\
    \ == 41 || word.size() == 43 || word.size() == 47 || word.size() == 53 || word.size()\
    \ == 59 || word.size() == 61 || word.size() == 67 || word.size() == 71 || word.size()\
    \ == 73 || word.size() == 79 || word.size() == 83 || word.size() == 89 || word.size()\
    \ == 97) {\n      result += word + \" \";\n    }\n  }\n  return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098877
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n\
    // Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
    // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string\
    \ words_in_sentence(std::string sentence) {\n  std::vector<std::string> words;\n\
    \  std::string word;\n  std::istringstream iss(sentence);\n  while (iss >> word)\
    \ {\n    words.push_back(word);\n  }\n  std::vector<int> primes = {2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97};\n  std::string result;\n  for (auto word : words) {\n    if (std::find(primes.begin(),\
    \ primes.end(), word.size()) != primes.end()) {\n      result += word + \" \"\
    ;\n    }\n  }\n  return result.substr(0, result.size() - 1);\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098882
