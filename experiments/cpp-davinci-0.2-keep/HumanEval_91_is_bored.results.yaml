language: cpp
name: HumanEval_91_is_bored
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyugl0zsd: /tmp/tmpyugl0zsd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    for (int i = 0; i < S.length();\
    \ i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfe8jeurb: /tmp/tmpfe8jeurb.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyugl0zsd: /tmp/tmpyugl0zsd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplge9enyz: /tmp/tmplge9enyz.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // your code here\n    long count=0;\n   \
    \ std::stringstream ss(S);\n    std::string word;\n    while(ss>>word){\n    \
    \    if(word==\"I\"){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjul9mzni: /tmp/tmpjul9mzni.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count=0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while(ss>>word){\n        if(word==\"I\"){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpc2oswaf0: /tmp/tmpc2oswaf0.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyugl0zsd: /tmp/tmpyugl0zsd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplge9enyz: /tmp/tmplge9enyz.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    long count = 0;\n \
    \   std::stringstream ss(S);\n    std::string word;\n    while(ss >> word) {\n\
    \        if(word == \"I\") {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0bi44g1g: /tmp/tmp0bi44g1g.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (std::getline(ss, word, '.')) {\n        std::stringstream\
    \ ss2(word);\n        std::string word2;\n        std::getline(ss2, word2, ' ');\n\
    \        if (word2 == \"I\") {\n            boredoms++;\n        }\n    }\n  \
    \  return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm4ut11xs: /tmp/tmpm4ut11xs.cpp:31: int main(): Assertion `candidate(("I
    feel good today. I will be productive. will kill It")) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while(ss >> word) {\n        if(word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqghhga47: /tmp/tmpqghhga47.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyugl0zsd: /tmp/tmpyugl0zsd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::stringstream ss(S);\n  std::string word;\n\
    \  long count = 0;\n  while (ss >> word) {\n    if (word == \"I\") {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4g1rbaey: /tmp/tmp4g1rbaey.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while(ss >> word) {\n        if(word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqghhga47: /tmp/tmpqghhga47.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long boredoms = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa6ydqru5: /tmp/tmpa6ydqru5.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while(ss >> word) {\n        if(word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqghhga47: /tmp/tmpqghhga47.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyugl0zsd: /tmp/tmpyugl0zsd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Your code here\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while(ss >> word) {\n    if(word == \"I\") {\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4fi14n0a: /tmp/tmp4fi14n0a.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count=0;\n    std::stringstream ss(S);\n\
    \    std::string temp;\n    while(getline(ss,temp,'.')){\n        if(temp[0]=='I'){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbbbp8d4g: /tmp/tmpbbbp8d4g.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    long count = 0;\n \
    \   std::stringstream ss(S);\n    std::string word;\n    while(ss >> word) {\n\
    \        if(word == \"I\") {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0bi44g1g: /tmp/tmp0bi44g1g.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // your code here\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while(ss >> word) {\n    if(word == \"I\") {\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa7vwsmxy: /tmp/tmpa7vwsmxy.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplge9enyz: /tmp/tmplge9enyz.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::istringstream iss(S);\n  std::string word;\n\
    \  long count = 0;\n  while (iss >> word) {\n    if (word == \"I\") {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpv3vl5kqa: /tmp/tmpv3vl5kqa.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count=0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while(ss>>word){\n        if(word==\"I\"){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpc2oswaf0: /tmp/tmpc2oswaf0.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    for (int i = 0; i < S.length();\
    \ i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfe8jeurb: /tmp/tmpfe8jeurb.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::transform(S.begin(), S.end(), S.begin(),\
    \ ::tolower);\n    std::istringstream iss(S);\n    std::string word;\n    long\
    \ count = 0;\n    while (iss >> word) {\n        if (word == \"i\") {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpexb2kuzf: /tmp/tmpexb2kuzf.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    long count = 0;\n \
    \   std::stringstream ss(S);\n    std::string word;\n    while(ss >> word) {\n\
    \        if(word == \"I\") {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0bi44g1g: /tmp/tmp0bi44g1g.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::string delimiter\
    \ = \"!?.\";\n    size_t pos = 0;\n    std::string token;\n    while ((pos = S.find(delimiter))\
    \ != std::string::npos) {\n        token = S.substr(0, pos);\n        if(token.find(\"\
    I\") == 0)\n            count++;\n        S.erase(0, pos + delimiter.length());\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpupezub2o: /tmp/tmpupezub2o.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::istringstream iss(S);\n\
    \    std::string word;\n    while (iss >> word) {\n        if (word == \"I\")\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9qh4w55u: /tmp/tmp9qh4w55u.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while(ss >> word) {\n        if(word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqghhga47: /tmp/tmpqghhga47.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long boredoms = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa6ydqru5: /tmp/tmpa6ydqru5.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while(ss >> word) {\n        if(word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqghhga47: /tmp/tmpqghhga47.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while(ss >> word) {\n        if(word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqghhga47: /tmp/tmpqghhga47.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplge9enyz: /tmp/tmplge9enyz.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyugl0zsd: /tmp/tmpyugl0zsd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplge9enyz: /tmp/tmplge9enyz.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplge9enyz: /tmp/tmplge9enyz.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyugl0zsd: /tmp/tmpyugl0zsd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    long count = 0;\n \
    \   std::stringstream ss(S);\n    std::string word;\n    while(ss >> word) {\n\
    \        if(word == \"I\") {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0bi44g1g: /tmp/tmp0bi44g1g.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplge9enyz: /tmp/tmplge9enyz.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyugl0zsd: /tmp/tmpyugl0zsd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    long count = 0;\n \
    \   std::stringstream ss(S);\n    std::string temp;\n    while(std::getline(ss,\
    \ temp, '.')) {\n        if(temp[0] == 'I') {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpekpt_ylu: /tmp/tmpekpt_ylu.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long boredoms = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa6ydqru5: /tmp/tmpa6ydqru5.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while(ss >> word) {\n        if(word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqghhga47: /tmp/tmpqghhga47.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while(ss >> word) {\n        if(word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqghhga47: /tmp/tmpqghhga47.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    long count = 0;\n \
    \   std::string delimiter = \"?!.\";\n    std::string token;\n    size_t pos =\
    \ 0;\n    while ((pos = S.find(delimiter)) != std::string::npos) {\n        token\
    \ = S.substr(0, pos);\n        if (token.find(\"I\") == 0) {\n            count++;\n\
    \        }\n        S.erase(0, pos + delimiter.length());\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpidbvagty: /tmp/tmpidbvagty.cpp:30: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long boredoms = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa6ydqru5: /tmp/tmpa6ydqru5.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long boredoms = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa6ydqru5: /tmp/tmpa6ydqru5.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while(ss >> word) {\n        if(word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqghhga47: /tmp/tmpqghhga47.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // your code here\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while(ss >> word) {\n    if(word == \"I\") {\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa7vwsmxy: /tmp/tmpa7vwsmxy.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplge9enyz: /tmp/tmplge9enyz.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::istringstream iss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (iss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnxqt37hb: /tmp/tmpnxqt37hb.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::string word = \"\
    \";\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            if (word == \"I\") {\n               \
    \ count++;\n            }\n            word = \"\";\n        } else if (S[i] ==\
    \ ' ') {\n            if (word == \"I\") {\n                count++;\n       \
    \     }\n            word = \"\";\n        } else {\n            word += S[i];\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6mcgvbu9: /tmp/tmp6mcgvbu9.cpp:38: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp99na9_j9: /tmp/tmp99na9_j9.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong boredoms = 0;\n\tstd::string delimiters\
    \ = \"!?.\";\n\tstd::string word = \"I\";\n\tstd::string::size_type start = 0;\n\
    \tstd::string::size_type end = 0;\n\twhile ((end = S.find_first_of(delimiters,\
    \ start)) != std::string::npos) {\n\t\tstd::string sentence = S.substr(start,\
    \ end - start);\n\t\tif (sentence.find(word) == 0) {\n\t\t\tboredoms++;\n\t\t\
    }\n\t\tstart = end + 1;\n\t}\n\treturn boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmjfnq3qx: /tmp/tmpmjfnq3qx.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnm9ijn3i: /tmp/tmpnm9ijn3i.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Your code here\n  long count = 0;\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  while(ss >> word) {\n    if(word == \"I\") {\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4fi14n0a: /tmp/tmp4fi14n0a.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // your code here\n    std::stringstream ss(S);\n\
    \    std::string word;\n    long count = 0;\n    while(ss >> word) {\n       \
    \ if(word == \"I\") {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq2qsapts: /tmp/tmpq2qsapts.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::string delimiter\
    \ = \"!?.\";\n    size_t pos = 0;\n    std::string token;\n    while ((pos = S.find(delimiter))\
    \ != std::string::npos) {\n        token = S.substr(0, pos);\n        if (token.substr(0,2)\
    \ == \"I \") {\n            count++;\n        }\n        S.erase(0, pos + delimiter.length());\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmptpq62net: /tmp/tmptpq62net.cpp:29: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660084290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    long count=0;\n   \
    \ std::stringstream ss(S);\n    std::string word;\n    while(ss>>word){\n    \
    \    if(word==\"I\"){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwrvjiorc: /tmp/tmpwrvjiorc.cpp:30: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long count = 0;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplxt4cgwd: /tmp/tmplxt4cgwd.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmj1ehlke: /tmp/tmpmj1ehlke.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  std::stringstream ss(S);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"I\") {\n     \
    \ count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplge9enyz: /tmp/tmplge9enyz.cpp:29: int main(): Assertion `candidate(("You
    and I are going for a walk")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660084289
