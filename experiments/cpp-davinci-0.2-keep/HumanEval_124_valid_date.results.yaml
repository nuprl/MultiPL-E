language: cpp
name: HumanEval_124_valid_date
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(day < 1 || day > 31) {\n     \
    \   return false;\n    }\n    if(month == 2) {\n        if(day > 29) {\n     \
    \       return false;\n        }\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if(day > 30) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) return\
    \ false;\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n \
    \   int year = std::stoi(v[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2) {\n        if(day\
    \ > 29) return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    if(date.length()==0)\n\
    \        return false;\n    if(date[2]!='-' || date[5]!='-')\n        return false;\n\
    \    int day = (date[0]-'0')*10 + (date[1]-'0');\n    int month = (date[3]-'0')*10\
    \ + (date[4]-'0');\n    int year = (date[6]-'0')*1000 + (date[7]-'0')*100 + (date[8]-'0')*10\
    \ + (date[9]-'0');\n    if(month<1 || month>12)\n        return false;\n    if(day<1\
    \ || day>31)\n        return false;\n    if(month==2 && day>29)\n        return\
    \ false;\n    if(month==4 || month==6 || month==9 || month==11)\n    {\n     \
    \   if(day>30)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe8w9sjed: /tmp/tmpe8w9sjed.cpp:41: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0) return false;\n \
    \   std::stringstream ss(date);\n    int month, day, year;\n    char c;\n    ss\
    \ >> month >> c >> day >> c >> year;\n    if(month < 1 || month > 12) return false;\n\
    \    if(month == 2) {\n        if(day < 1 || day > 29) return false;\n    } else\
    \ if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ < 1 || day > 30) return false;\n    } else {\n        if(day < 1 || day > 31)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::stringstream ss(date);\n    int d,\
    \ m, y;\n    char c;\n    ss >> m >> c >> d >> c >> y;\n    if (ss.fail()) return\
    \ false;\n    if (m < 1 || m > 12) return false;\n    if (d < 1 || d > 31) return\
    \ false;\n    if (m == 2) {\n        if (d > 29) return false;\n        if (d\
    \ == 29) {\n            if (y % 4 != 0) return false;\n            if (y % 100\
    \ == 0 && y % 400 != 0) return false;\n        }\n    }\n    if (m == 4 || m ==\
    \ 6 || m == 9 || m == 11) {\n        if (d > 30) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    int day,month,year;\n\
    \    int flag=0;\n    if(date.length()==0)\n    {\n        return false;\n   \
    \ }\n    for(int i=0;i<date.length();i++)\n    {\n        if(date[i]=='-')\n \
    \       {\n            flag++;\n        }\n    }\n    if(flag!=2)\n    {\n   \
    \     return false;\n    }\n    std::stringstream ss(date);\n    std::string token;\n\
    \    std::vector<std::string> v;\n    while(std::getline(ss,token,'-'))\n    {\n\
    \        v.push_back(token);\n    }\n    if(v.size()!=3)\n    {\n        return\
    \ false;\n    }\n    for(int i=0;i<v.size();i++)\n    {\n        if(v[i].length()!=4\
    \ && i==2)\n        {\n            return false;\n        }\n        if(v[i].length()!=2\
    \ && i!=2)\n        {\n            return false;\n        }\n    }\n    month=std::stoi(v[0]);\n\
    \    day=std::stoi(v[1]);\n    year=std::stoi(v[2]);\n    if(month<1 || month>12)\n\
    \    {\n        return false;\n    }\n    if(month==1 || month==3 || month==5\
    \ || month==7 || month==8 || month==10 || month==12)\n    {\n        if(day<1\
    \ || day>31)\n        {\n            return false;\n        }\n    }\n    if(month==4\
    \ || month==6 || month==9 || month==11)\n    {\n        if(day<1 || day>30)\n\
    \        {\n            return false;\n        }\n    }\n    if(month==2)\n  \
    \  {\n        if(day<1 || day>29)\n        {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::stringstream ss(date);\n    int d,\
    \ m, y;\n    char c;\n    if(ss >> m >> c >> d >> c >> y) {\n        if(c != '-')\
    \ return false;\n        if(m < 1 || m > 12) return false;\n        if(m == 2)\
    \ {\n            if(d < 1 || d > 29) return false;\n        } else if(m == 4 ||\
    \ m == 6 || m == 9 || m == 11) {\n            if(d < 1 || d > 30) return false;\n\
    \        } else {\n            if(d < 1 || d > 31) return false;\n        }\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = stoi(tokens[0]);\n    int day = stoi(tokens[1]);\n    int year = stoi(tokens[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day < 1 || day > 29) {\n            return false;\n    \
    \    }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if(day < 1 || day\
    \ > 31) {\n            return false;\n        }\n    }\n    else {\n        if(day\
    \ < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // your code here\n  int day, month, year;\n\
    \  std::stringstream ss(date);\n  char c;\n  ss >> month >> c >> day >> c >> year;\n\
    \  if(month < 1 || month > 12) return false;\n  if(day < 1 || day > 31) return\
    \ false;\n  if(month == 2 && day > 29) return false;\n  if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n    if(day > 30) return false;\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    if(date.size()==0)\n\
    \        return false;\n    int dd,mm,yyyy;\n    char ch;\n    std::stringstream\
    \ ss(date);\n    ss>>mm>>ch>>dd>>ch>>yyyy;\n    if(mm<1 || mm>12)\n        return\
    \ false;\n    if(dd<1 || dd>31)\n        return false;\n    if(mm==2 && dd>29)\n\
    \        return false;\n    if(mm==4 || mm==6 || mm==9 || mm==11)\n    {\n   \
    \     if(dd>30)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int m,d,y;\n    std::stringstream\
    \ ss(date);\n    char ch;\n    ss>>m>>ch>>d>>ch>>y;\n    if(m<1 || m>12) return\
    \ false;\n    if(d<1 || d>31) return false;\n    if(m==2 && d>29) return false;\n\
    \    if(m==4 || m==6 || m==9 || m==11)\n    {\n        if(d>30) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length()==0) return false;\n   \
    \ std::vector<std::string> v;\n    std::stringstream ss(date);\n    std::string\
    \ temp;\n    while(std::getline(ss,temp,'-')){\n        v.push_back(temp);\n \
    \   }\n    if(v.size()!=3) return false;\n    int month = stoi(v[0]);\n    int\
    \ day = stoi(v[1]);\n    int year = stoi(v[2]);\n    if(month<1 || month>12) return\
    \ false;\n    if(month==2){\n        if(day<1 || day>29) return false;\n    }\n\
    \    else if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10\
    \ || month==12){\n        if(day<1 || day>31) return false;\n    }\n    else{\n\
    \        if(day<1 || day>30) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::stringstream ss(date);\n    std::string\
    \ item;\n    std::vector<std::string> tokens;\n    while (std::getline(ss, item,\
    \ '-')) {\n        tokens.push_back(item);\n    }\n    if(tokens.size() != 3)\
    \ return false;\n    int month = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n\
    \    int year = std::stoi(tokens[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2 && day\
    \ > 29) return false;\n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0)\n        return false;\n\
    \    int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n\
    \    int year = stoi(date.substr(6,4));\n    if(month < 1 || month > 12)\n   \
    \     return false;\n    if(month == 2 && day > 29)\n        return false;\n \
    \   if(month == 2 && day < 1)\n        return false;\n    if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n\
    \    {\n        if(day > 31 || day < 1)\n            return false;\n    }\n  \
    \  else\n    {\n        if(day > 30 || day < 1)\n            return false;\n \
    \   }\n    if(year < 0)\n        return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmps9jj87rb: /tmp/tmps9jj87rb.cpp:55: int main(): Assertion `candidate(("04122003"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  int days, month, year;\n  std::stringstream\
    \ ss(date);\n  char delim;\n  ss >> month >> delim >> days >> delim >> year;\n\
    \  if(month < 1 || month > 12) return false;\n  if(days < 1 || days > 31) return\
    \ false;\n  if(month == 2 && days > 29) return false;\n  if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n    if(days > 30) return false;\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) return\
    \ false;\n    if(v[0].length() != 2 || v[1].length() != 2 || v[2].length() !=\
    \ 4) return false;\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n\
    \    int year = std::stoi(v[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2) {\n        if(day\
    \ > 29) return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    // std::cout << date\
    \ << std::endl;\n    int len = date.length();\n    if(len == 0)\n        return\
    \ false;\n    int i = 0;\n    int month = 0;\n    int day = 0;\n    int year =\
    \ 0;\n    while(date[i] != '-'){\n        month = month*10 + (date[i] - '0');\n\
    \        i++;\n    }\n    i++;\n    while(date[i] != '-'){\n        day = day*10\
    \ + (date[i] - '0');\n        i++;\n    }\n    i++;\n    while(i < len){\n   \
    \     year = year*10 + (date[i] - '0');\n        i++;\n    }\n    // std::cout\
    \ << month << \" \" << day << \" \" << year << std::endl;\n    if(month < 1 ||\
    \ month > 12)\n        return false;\n    if(month == 2){\n        if(day < 1\
    \ || day > 29)\n            return false;\n    }\n    else if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31)\n            return false;\n    }\n    else{\n\
    \        if(day < 1 || day > 30)\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    // std::cout << date\
    \ << std::endl;\n    if (date.length() == 0)\n        return false;\n    if (date.length()\
    \ != 10)\n        return false;\n    if (date[2] != '-' || date[5] != '-')\n \
    \       return false;\n    int month = std::stoi(date.substr(0, 2));\n    int\
    \ day = std::stoi(date.substr(3, 2));\n    int year = std::stoi(date.substr(6,\
    \ 4));\n    if (month < 1 || month > 12)\n        return false;\n    if (month\
    \ == 2) {\n        if (day < 1 || day > 29)\n            return false;\n    }\n\
    \    else if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31)\n     \
    \       return false;\n    }\n    else {\n        if (day < 1 || day > 30)\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  int days, months, years;\n  std::stringstream\
    \ ss(date);\n  char c;\n  ss >> months >> c >> days >> c >> years;\n  if (ss.fail())\
    \ return false;\n  if (months < 1 || months > 12) return false;\n  if (days <\
    \ 1 || days > 31) return false;\n  if (months == 2) {\n    if (days > 29) return\
    \ false;\n  } else if (months == 4 || months == 6 || months == 9 || months ==\
    \ 11) {\n    if (days > 30) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // your code here\n  // std::cout << date.length()\
    \ << \"\\n\";\n  if(date.length() == 0)\n    return false;\n  std::stringstream\
    \ ss(date);\n  int month, day, year;\n  char c;\n  ss >> month >> c >> day >>\
    \ c >> year;\n  if(month < 1 || month > 12)\n    return false;\n  if(month ==\
    \ 2)\n  {\n    if(day < 1 || day > 29)\n      return false;\n  }\n  else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12)\n  {\n    if(day < 1 || day > 31)\n      return false;\n  }\n\
    \  else\n  {\n    if(day < 1 || day > 30)\n      return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // your code here\n  if(date.size() == 0)\n\
    \    return false;\n  std::stringstream ss(date);\n  std::string temp;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, temp, '-'))\n    v.push_back(temp);\n  if(v.size()\
    \ != 3)\n    return false;\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month < 1 || month > 12)\n    return false;\n\
    \  if(month == 2)\n  {\n    if(day < 1 || day > 29)\n      return false;\n  }\n\
    \  else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12)\n  {\n    if(day < 1 || day > 31)\n      return\
    \ false;\n  }\n  else\n  {\n    if(day < 1 || day > 30)\n      return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int d,m,y;\n    char\
    \ c;\n    std::stringstream ss(date);\n    ss>>m>>c>>d>>c>>y;\n    if(m<1 || m>12\
    \ || d<1 || d>31 || y<0)\n        return false;\n    if(m==2 && d>29)\n      \
    \  return false;\n    if(m==4 || m==6 || m==9 || m==11)\n    {\n        if(d>30)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::stringstream ss(date);\n    std::string\
    \ token;\n    std::vector<std::string> tokens;\n    while (std::getline(ss, token,\
    \ '-')) {\n        tokens.push_back(token);\n    }\n    if (tokens.size() != 3)\
    \ {\n        return false;\n    }\n    int month = std::stoi(tokens[0]);\n   \
    \ int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (month ==\
    \ 2) {\n        if (day < 1 || day > 29) {\n            return false;\n      \
    \  }\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  std::regex pattern(\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}\"\
    );\n  return std::regex_match(date, pattern);\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpuyx5h8l9: /tmp/tmpuyx5h8l9.cpp:29: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    int day, month, year;\n    std::getline(ss,\
    \ token, '-');\n    month = std::stoi(token);\n    std::getline(ss, token, '-');\n\
    \    day = std::stoi(token);\n    std::getline(ss, token, '-');\n    year = std::stoi(token);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ == 2) {\n        if (day < 1 || day > 29) {\n            return false;\n   \
    \     }\n    }\n    else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day\
    \ > 31) {\n            return false;\n        }\n    }\n    else {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    if(date.length()==0)\n\
    \    return false;\n    if(date[2]!='-' || date[5]!='-')\n    return false;\n\
    \    int d=stoi(date.substr(0,2));\n    int m=stoi(date.substr(3,2));\n    int\
    \ y=stoi(date.substr(6,4));\n    if(d<1 || d>31 || m<1 || m>12 || y<1)\n    return\
    \ false;\n    if(m==2)\n    {\n        if(d>29)\n        return false;\n    }\n\
    \    else if(m==4 || m==6 || m==9 || m==11)\n    {\n        if(d>30)\n       \
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_2v29pvg: /tmp/tmp_2v29pvg.cpp:42: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(day < 1 || day > 31) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day > 29) {\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0) return false;\n \
    \   int d, m, y;\n    std::stringstream ss(date);\n    char c;\n    ss >> d >>\
    \ c >> m >> c >> y;\n    if(d < 1 || d > 31 || m < 1 || m > 12) return false;\n\
    \    if(m == 2) {\n        if(d > 29) return false;\n        if(d == 29) {\n \
    \           if(y % 4 != 0) return false;\n            if(y % 100 == 0 && y % 400\
    \ != 0) return false;\n        }\n    }\n    if(m == 4 || m == 6 || m == 9 ||\
    \ m == 11) {\n        if(d > 30) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfjpom24t: /tmp/tmpfjpom24t.cpp:38: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0) return false;\n \
    \   std::stringstream ss(date);\n    std::string item;\n    std::vector<std::string>\
    \ splittedStrings;\n    while (std::getline(ss, item, '-')) {\n        splittedStrings.push_back(item);\n\
    \    }\n    if(splittedStrings.size() != 3) return false;\n    int month = std::stoi(splittedStrings[0]);\n\
    \    int day = std::stoi(splittedStrings[1]);\n    int year = std::stoi(splittedStrings[2]);\n\
    \    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2 && day > 29) return false;\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if(day > 30) return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n \
    \   assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::stringstream ss(date);\n    int d,\
    \ m, y;\n    char c;\n    if (!(ss >> m >> c >> d >> c >> y)) return false;\n\
    \    if (c != '-') return false;\n    if (m < 1 || m > 12) return false;\n   \
    \ if (d < 1 || d > 31) return false;\n    if (m == 2) return d <= 29;\n    if\
    \ (m == 4 || m == 6 || m == 9 || m == 11) return d <= 30;\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0)\n        return false;\n\
    \    int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n\
    \    int year = stoi(date.substr(6,4));\n    if(month < 1 || month > 12)\n   \
    \     return false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month\
    \ == 2 && day > 29)\n        return false;\n    if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11)\n        if(day > 30)\n            return false;\n\
    \    if(date[2] != '-' || date[5] != '-')\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool flag = true;\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        flag = false;\n    }\n    else {\n        int month = std::stoi(v[0]);\n\
    \        int day = std::stoi(v[1]);\n        int year = std::stoi(v[2]);\n   \
    \     if(month < 1 || month > 12) {\n            flag = false;\n        }\n  \
    \      else if(month == 2) {\n            if(day < 1 || day > 29) {\n        \
    \        flag = false;\n            }\n        }\n        else if(month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n            if(day < 1 || day > 31) {\n                flag = false;\n\
    \            }\n        }\n        else {\n            if(day < 1 || day > 30)\
    \ {\n                flag = false;\n            }\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) return\
    \ false;\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n \
    \   int year = std::stoi(v[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(month == 2) {\n        if(day < 1 || day > 29) return false;\n    }\n\
    \    else if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n        if(day < 1 || day > 31) return false;\n\
    \    }\n    else {\n        if(day < 1 || day > 30) return false;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.size() == 0) return false;\n   \
    \ std::vector<std::string> v;\n    std::stringstream ss(date);\n    std::string\
    \ temp;\n    while(std::getline(ss, temp, '-')) {\n        v.push_back(temp);\n\
    \    }\n    if(v.size() != 3) return false;\n    int month = std::stoi(v[0]);\n\
    \    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month\
    \ < 1 || month > 12) return false;\n    if(month == 2) {\n        if(day < 1 ||\
    \ day > 29) return false;\n    }\n    else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) return false;\n    }\n    else {\n        if(day < 1 || day\
    \ > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::stringstream ss(date);\n    std::string\
    \ token;\n    std::vector<std::string> v;\n    while(std::getline(ss, token, '-'))\
    \ {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n        return\
    \ false;\n    }\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n\
    \    int year = std::stoi(v[2]);\n    if(month < 1 || month > 12) {\n        return\
    \ false;\n    }\n    if(day < 1 || day > 31) {\n        return false;\n    }\n\
    \    if(month == 2) {\n        if(day > 29) {\n            return false;\n   \
    \     }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if(day > 30) {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int month, day, year;\n    char c;\n    ss >> month >> c >> day\
    \ >> c >> year;\n    if(ss.fail() || ss.peek() != EOF) return false;\n    if(month\
    \ < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return false;\n\
    \    if(month == 2 && day > 29) return false;\n    if(month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n        if(day > 30) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::stringstream ss(date);\n    int d,\
    \ m, y;\n    char c;\n    if(ss >> m >> c >> d >> c >> y) {\n        if(c != '-')\
    \ return false;\n        if(m < 1 || m > 12) return false;\n        if(m == 2)\
    \ {\n            if(d < 1 || d > 29) return false;\n        } else if(m == 4 ||\
    \ m == 6 || m == 9 || m == 11) {\n            if(d < 1 || d > 30) return false;\n\
    \        } else {\n            if(d < 1 || d > 31) return false;\n        }\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char ch;\n    ss >> m >> ch >> d >> ch >> y;\n\
    \    if(m < 1 || m > 12) return false;\n    if(m == 2) {\n        if(d < 1 ||\
    \ d > 29) return false;\n    }\n    else if(m == 4 || m == 6 || m == 9 || m ==\
    \ 11) {\n        if(d < 1 || d > 30) return false;\n    }\n    else {\n      \
    \  if(d < 1 || d > 31) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int dd, mm, yyyy;\n    std::stringstream\
    \ ss(date);\n    char ch;\n    ss >> dd >> ch >> mm >> ch >> yyyy;\n    if (ss.fail())\
    \ return false;\n    if (mm < 1 || mm > 12) return false;\n    if (dd < 1) return\
    \ false;\n    if (mm == 2) {\n        if (dd > 29) return false;\n        if (dd\
    \ == 29) {\n            if (yyyy % 4 != 0) return false;\n            if (yyyy\
    \ % 100 == 0 && yyyy % 400 != 0) return false;\n        }\n    } else if (mm ==\
    \ 4 || mm == 6 || mm == 9 || mm == 11) {\n        if (dd > 30) return false;\n\
    \    } else {\n        if (dd > 31) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2dfx1yxr: /tmp/tmp2dfx1yxr.cpp:40: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::vector<std::string>\
    \ v;\n    std::stringstream ss(date);\n    std::string temp;\n    while(std::getline(ss,\
    \ temp, '-')) {\n        v.push_back(temp);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    if(v[0].size() != 2 || v[1].size() != 2 ||\
    \ v[2].size() != 4) {\n        return false;\n    }\n    if(v[0] == \"00\" ||\
    \ v[1] == \"00\" || v[2] == \"0000\") {\n        return false;\n    }\n    if(v[0]\
    \ == \"02\" && v[1] == \"29\" && v[2] == \"2020\") {\n        return true;\n \
    \   }\n    if(v[0] == \"02\" && v[1] == \"29\") {\n        return false;\n   \
    \ }\n    if(v[0] == \"02\" && (std::stoi(v[1]) > 29 || std::stoi(v[1]) < 1)) {\n\
    \        return false;\n    }\n    if(v[0] == \"01\" || v[0] == \"03\" || v[0]\
    \ == \"05\" || v[0] == \"07\" || v[0] == \"08\" || v[0] == \"10\" || v[0] == \"\
    12\") {\n        if(std::stoi(v[1]) > 31 || std::stoi(v[1]) < 1) {\n         \
    \   return false;\n        }\n    }\n    if(v[0] == \"04\" || v[0] == \"06\" ||\
    \ v[0] == \"09\" || v[0] == \"11\") {\n        if(std::stoi(v[1]) > 30 || std::stoi(v[1])\
    \ < 1) {\n            return false;\n        }\n    }\n    if(std::stoi(v[0])\
    \ > 12 || std::stoi(v[0]) < 1) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int day, month, year;\n\
    \    std::stringstream ss(date);\n    char ch;\n    ss >> month >> ch >> day >>\
    \ ch >> year;\n    if (month < 1 || month > 12)\n        return false;\n    if\
    \ (day < 1 || day > 31)\n        return false;\n    if (month == 2) {\n      \
    \  if (day > 29)\n            return false;\n        if (day == 29) {\n      \
    \      if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0))\n          \
    \      return true;\n            return false;\n        }\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int len = date.length();\n\
    \    if(len == 0)\n        return false;\n    int i = 0;\n    int month = 0;\n\
    \    int day = 0;\n    int year = 0;\n    while(date[i] != '-'){\n        if(date[i]\
    \ < '0' || date[i] > '9')\n            return false;\n        month = month *\
    \ 10 + (date[i] - '0');\n        i++;\n    }\n    if(month < 1 || month > 12)\n\
    \        return false;\n    i++;\n    while(date[i] != '-'){\n        if(date[i]\
    \ < '0' || date[i] > '9')\n            return false;\n        day = day * 10 +\
    \ (date[i] - '0');\n        i++;\n    }\n    if(month == 2){\n        if(day <\
    \ 1 || day > 29)\n            return false;\n    }\n    else if(month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12){\n        if(day < 1 || day > 31)\n            return false;\n    }\n\
    \    else{\n        if(day < 1 || day > 30)\n            return false;\n    }\n\
    \    i++;\n    while(i < len){\n        if(date[i] < '0' || date[i] > '9')\n \
    \           return false;\n        year = year * 10 + (date[i] - '0');\n     \
    \   i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    ss >> m >> c >> d >> c >> y;\n\
    \    if(m < 1 || m > 12 || d < 1 || d > 31 || y < 0) return false;\n    if(m ==\
    \ 2 && d > 29) return false;\n    if(m == 4 || m == 6 || m == 9 || m == 11) {\n\
    \        if(d > 30) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    ss >> m >> c >> d >> c >> y;\n\
    \    if(ss.fail()) return false;\n    if(m < 1 || m > 12) return false;\n    if(d\
    \ < 1 || d > 31) return false;\n    if(m == 2 && d > 29) return false;\n    if(m\
    \ == 4 || m == 6 || m == 9 || m == 11)\n        if(d > 30) return false;\n   \
    \ return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(day < 1 || day > 31) {\n     \
    \   return false;\n    }\n    if(month == 2) {\n        if(day > 29) {\n     \
    \       return false;\n        }\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if(day > 30) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    ss >> m >> c >> d >> c >> y;\n\
    \    if (m < 1 || m > 12) return false;\n    if (d < 1 || d > 31) return false;\n\
    \    if (m == 2) {\n        if (d > 29) return false;\n    }\n    if (m == 4 ||\
    \ m == 6 || m == 9 || m == 11) {\n        if (d > 30) return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int d,m,y;\n    int\
    \ i=0;\n    std::string s=\"\";\n    while(date[i]!='-')\n    {\n        s+=date[i];\n\
    \        i++;\n    }\n    m=std::stoi(s);\n    s=\"\";\n    i++;\n    while(date[i]!='-')\n\
    \    {\n        s+=date[i];\n        i++;\n    }\n    d=std::stoi(s);\n    s=\"\
    \";\n    i++;\n    while(i<date.length())\n    {\n        s+=date[i];\n      \
    \  i++;\n    }\n    y=std::stoi(s);\n    if(date.length()!=10)\n    {\n      \
    \  return false;\n    }\n    if(date[2]!='-'||date[5]!='-')\n    {\n        return\
    \ false;\n    }\n    if(m<1||m>12)\n    {\n        return false;\n    }\n    if(m==1||m==3||m==5||m==7||m==8||m==10||m==12)\n\
    \    {\n        if(d<1||d>31)\n        {\n            return false;\n        }\n\
    \    }\n    else if(m==4||m==6||m==9||m==11)\n    {\n        if(d<1||d>30)\n \
    \       {\n            return false;\n        }\n    }\n    else if(m==2)\n  \
    \  {\n        if(d<1||d>29)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0)\n        return false;\n\
    \    std::stringstream ss(date);\n    std::string temp;\n    std::vector<std::string>\
    \ date_vec;\n    while(getline(ss, temp, '-'))\n        date_vec.push_back(temp);\n\
    \    if(date_vec.size() != 3)\n        return false;\n    int month = std::stoi(date_vec[0]);\n\
    \    int day = std::stoi(date_vec[1]);\n    int year = std::stoi(date_vec[2]);\n\
    \    if(month < 1 || month > 12)\n        return false;\n    if(month == 2)\n\
    \    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n  \
    \  else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n   \
    \         return false;\n    }\n    else\n    {\n        if(day < 1 || day > 30)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int month, day, year;\n\
    \    std::stringstream ss(date);\n    char c;\n    ss >> month >> c >> day >>\
    \ c >> year;\n    if(month < 1 || month > 12)\n        return false;\n    if(month\
    \ == 2)\n    {\n        if(day < 1 || day > 29)\n            return false;\n \
    \   }\n    else if(month == 4 || month == 6 || month == 9 || month == 11)\n  \
    \  {\n        if(day < 1 || day > 30)\n            return false;\n    }\n    else\n\
    \    {\n        if(day < 1 || day > 31)\n            return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(day < 1 || day > 31) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day > 29) {\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n\t// your code here\n\tstd::stringstream ss(date);\n\
    \tstd::string token;\n\tstd::vector<std::string> tokens;\n\twhile (std::getline(ss,\
    \ token, '-')) {\n\t\ttokens.push_back(token);\n\t}\n\tif (tokens.size() != 3)\
    \ {\n\t\treturn false;\n\t}\n\tint month = std::stoi(tokens[0]);\n\tint day =\
    \ std::stoi(tokens[1]);\n\tint year = std::stoi(tokens[2]);\n\tif (month < 1 ||\
    \ month > 12) {\n\t\treturn false;\n\t}\n\tif (month == 2) {\n\t\tif (day < 1\
    \ || day > 29) {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n\t\tif (day < 1 || day > 31) {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\
    \t\tif (day < 1 || day > 30) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(day < 1 || day > 31) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day > 29) {\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int len = date.length();\n\
    \    if(len != 10)\n        return false;\n    int i = 0;\n    while(i < len){\n\
    \        if(date[i] == '-')\n            i++;\n        else if(date[i] >= '0'\
    \ && date[i] <= '9')\n            i++;\n        else\n            return false;\n\
    \    }\n    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ result;\n    while(std::getline(ss, token, '-')){\n        result.push_back(token);\n\
    \    }\n    int month = std::stoi(result[0]);\n    int day = std::stoi(result[1]);\n\
    \    int year = std::stoi(result[2]);\n    if(month < 1 || month > 12)\n     \
    \   return false;\n    if(month == 2){\n        if(day < 1 || day > 29)\n    \
    \        return false;\n    }\n    else if(month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31)\n            return false;\n    }\n    else{\n        if(day\
    \ < 1 || day > 30)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) return false;\n    int month = std::stoi(tokens[0]);\n\
    \    int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2 && day > 29) return false;\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if(day > 30) return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n \
    \   assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    std::stringstream ss(date);\n    std::string temp;\n    while(std::getline(ss,\
    \ temp, '-')){\n        v.push_back(temp);\n    }\n    if(v.size() != 3)\n   \
    \     return false;\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n\
    \    int year = std::stoi(v[2]);\n    if(month < 1 || month > 12)\n        return\
    \ false;\n    if(month == 2){\n        if(day < 1 || day > 29)\n            return\
    \ false;\n    }\n    else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day >\
    \ 31)\n            return false;\n    }\n    else{\n        if(day < 1 || day\
    \ > 30)\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) return\
    \ false;\n    if(v[0].size() != 2 || v[1].size() != 2 || v[2].size() != 4) return\
    \ false;\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n \
    \   int year = std::stoi(v[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2) {\n        if(day\
    \ > 29) return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0)\n        return false;\n\
    \    int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n\
    \    int year = stoi(date.substr(6,4));\n    if(month < 1 || month > 12)\n   \
    \     return false;\n    if(day < 1 || day > 31)\n        return false;\n    if(month\
    \ == 2 && day > 29)\n        return false;\n    if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11)\n        if(day > 30)\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuyjws7xd: /tmp/tmpuyjws7xd.cpp:46: int main(): Assertion `candidate(("04122003"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> result;\n  \
    \  while (std::getline(ss, token, '-')) {\n        result.push_back(token);\n\
    \    }\n    if(result.size()!=3){\n        return false;\n    }\n    int month\
    \ = stoi(result[0]);\n    int day = stoi(result[1]);\n    int year = stoi(result[2]);\n\
    \    if(month<1 || month>12){\n        return false;\n    }\n    if(month==1 ||\
    \ month==3 || month==5 || month==7 || month==8 || month==10 || month==12){\n \
    \       if(day<1 || day>31){\n            return false;\n        }\n    }\n  \
    \  else if(month==4 || month==6 || month==9 || month==11){\n        if(day<1 ||\
    \ day>30){\n            return false;\n        }\n    }\n    else if(month==2){\n\
    \        if(day<1 || day>29){\n            return false;\n        }\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int month, day, year;\n    if (date.size()\
    \ != 10) return false;\n    if (date[2] != '-' || date[5] != '-') return false;\n\
    \    if (date[0] == '0') month = date[1] - '0';\n    else month = (date[0] - '0')\
    \ * 10 + date[1] - '0';\n    if (date[3] == '0') day = date[4] - '0';\n    else\
    \ day = (date[3] - '0') * 10 + date[4] - '0';\n    year = (date[6] - '0') * 1000\
    \ + (date[7] - '0') * 100 + (date[8] - '0') * 10 + date[9] - '0';\n    if (month\
    \ < 1 || month > 12) return false;\n    if (month == 2) {\n        if (year %\
    \ 4 == 0) {\n            if (day < 1 || day > 29) return false;\n        } else\
    \ {\n            if (day < 1 || day > 28) return false;\n        }\n    } else\
    \ if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n  \
    \  } else {\n        if (day < 1 || day > 30) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string item;\n    std::vector<std::string> tokens;\n   \
    \ while (std::getline(ss, item, '-')) {\n        tokens.push_back(item);\n   \
    \ }\n    if(tokens.size() != 3) return false;\n    int month = std::stoi(tokens[0]);\n\
    \    int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2 && day > 29) return false;\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if(day > 30) return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n \
    \   assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0) return false;\n \
    \   int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n\
    \    int year = stoi(date.substr(6,4));\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2 && day\
    \ > 29) return false;\n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoge5j_rf: /tmp/tmpoge5j_rf.cpp:42: int main(): Assertion `candidate(("04122003"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    std::stringstream ss(date);\n    std::string temp;\n    while(std::getline(ss,\
    \ temp, '-')){\n        v.push_back(temp);\n    }\n    if(v.size() != 3){\n  \
    \      return false;\n    }\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n\
    \    int year = std::stoi(v[2]);\n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n     \
    \       return false;\n        }\n    }\n    else if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    else{\n        if(day < 1 || day > 30){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    // std::cout<<date<<std::endl;\n\
    \    if(date.length()==0)\n        return false;\n    std::stringstream ss(date);\n\
    \    std::string token;\n    std::vector<std::string> tokens;\n    while(std::getline(ss,\
    \ token, '-')) {\n        tokens.push_back(token);\n    }\n    if(tokens.size()!=3)\n\
    \        return false;\n    int month = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n\
    \    int year = std::stoi(tokens[2]);\n    if(month<1 || month>12)\n        return\
    \ false;\n    if(day<1 || day>31)\n        return false;\n    if(month==2 && day>29)\n\
    \        return false;\n    if((month==4 || month==6 || month==9 || month==11)\
    \ && day>30)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(day < 1 || day > 31) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day > 29) {\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int day, month, year;\n    char c;\n    ss >> month >> c >> day\
    \ >> c >> year;\n    if (month > 12 || month < 1 || day < 1 || day > 31 || year\
    \ < 1) {\n        return false;\n    }\n    if (month == 2) {\n        if (day\
    \ > 29) {\n            return false;\n        }\n    }\n    if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n        if (day > 30) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    ss >> m >> c >> d >> c >> y;\n\
    \    if (m < 1 || m > 12) return false;\n    if (d < 1 || d > 31) return false;\n\
    \    if (m == 2) {\n        if (d > 29) return false;\n    }\n    if (m == 4 ||\
    \ m == 6 || m == 9 || m == 11) {\n        if (d > 30) return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> result;\n  \
    \  while (std::getline(ss, token, '-')) {\n        result.push_back(token);\n\
    \    }\n    if(result.size() != 3)\n        return false;\n    int month = std::stoi(result[0]);\n\
    \    int day = std::stoi(result[1]);\n    int year = std::stoi(result[2]);\n \
    \   if(month < 1 || month > 12)\n        return false;\n    if(day < 1 || day\
    \ > 31)\n        return false;\n    if(month == 2 && day > 29)\n        return\
    \ false;\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n    \
    \    if(day > 30)\n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int len = date.length();\n\
    \    if(len == 0)\n        return false;\n    int i = 0;\n    int month = 0;\n\
    \    while(date[i] != '-')\n    {\n        month = month*10 + (date[i] - '0');\n\
    \        i++;\n    }\n    if(month < 1 || month > 12)\n        return false;\n\
    \    i++;\n    int day = 0;\n    while(date[i] != '-')\n    {\n        day = day*10\
    \ + (date[i] - '0');\n        i++;\n    }\n    if(month == 2)\n    {\n       \
    \ if(day < 1 || day > 29)\n            return false;\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12)\n    {\n        if(day < 1 || day > 31)\n            return\
    \ false;\n    }\n    else if(month == 4 || month == 6 || month == 9 || month ==\
    \ 11)\n    {\n        if(day < 1 || day > 30)\n            return false;\n   \
    \ }\n    i++;\n    int year = 0;\n    while(i < len)\n    {\n        year = year*10\
    \ + (date[i] - '0');\n        i++;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char ch;\n    ss >> m >> ch >> d >> ch >> y;\n\
    \    if(m < 1 || m > 12) return false;\n    if(d < 1 || d > 31) return false;\n\
    \    if(m == 2 && d > 29) return false;\n    if(m == 4 || m == 6 || m == 9 ||\
    \ m == 11) {\n        if(d > 30) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // your code here\n  std::stringstream ss(date);\n\
    \  int d, m, y;\n  char c;\n  ss >> m >> c >> d >> c >> y;\n  if (ss.fail()) return\
    \ false;\n  if (m < 1 || m > 12) return false;\n  if (d < 1 || d > 31) return\
    \ false;\n  if (m == 2) {\n    if (d > 29) return false;\n    if (d == 29) {\n\
    \      if (y % 4 != 0) return false;\n      if (y % 100 == 0 && y % 400 != 0)\
    \ return false;\n    }\n  }\n  if (m == 4 || m == 6 || m == 9 || m == 11) {\n\
    \    if (d > 30) return false;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> vec;\n    while(std::getline(ss,\
    \ token, '-')) {\n        vec.push_back(token);\n    }\n    if(vec.size() != 3)\
    \ {\n        return false;\n    }\n    int month = std::stoi(vec[0]);\n    int\
    \ day = std::stoi(vec[1]);\n    int year = std::stoi(vec[2]);\n    if(month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if(month == 2) {\n   \
    \     if(day < 1 || day > 29) {\n            return false;\n        }\n    }\n\
    \    else if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n        if(day < 1 || day > 31) {\n    \
    \        return false;\n        }\n    }\n    else {\n        if(day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int day, month, year;\n\
    \    char delim;\n    std::stringstream ss(date);\n    ss >> month >> delim >>\
    \ day >> delim >> year;\n    if(ss.fail()) return false;\n    if(month < 1 ||\
    \ month > 12) return false;\n    if(day < 1 || day > 31) return false;\n    if(month\
    \ == 2 && day > 29) return false;\n    if(month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126823
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    if (ss >> m >> c >> d >> c >>\
    \ y) {\n        if (c != '-') return false;\n        if (m < 1 || m > 12) return\
    \ false;\n        if (d < 1 || d > 31) return false;\n        if (m == 2) {\n\
    \            if (d > 29) return false;\n        } else if (m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n            if (d > 30) return false;\n        }\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    if(date.length()==0)\n\
    \        return false;\n    int i=0;\n    int month=0;\n    int day=0;\n    int\
    \ year=0;\n    while(date[i]!='-')\n    {\n        month=month*10+(date[i]-'0');\n\
    \        i++;\n    }\n    i++;\n    while(date[i]!='-')\n    {\n        day=day*10+(date[i]-'0');\n\
    \        i++;\n    }\n    i++;\n    while(i<date.length())\n    {\n        year=year*10+(date[i]-'0');\n\
    \        i++;\n    }\n    if(month<1 || month>12)\n        return false;\n   \
    \ if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10 ||\
    \ month==12)\n    {\n        if(day<1 || day>31)\n            return false;\n\
    \    }\n    else if(month==4 || month==6 || month==9 || month==11)\n    {\n  \
    \      if(day<1 || day>30)\n            return false;\n    }\n    else if(month==2)\n\
    \    {\n        if(day<1 || day>29)\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    std::vector<std::string>\
    \ v;\n    std::stringstream ss(date);\n    std::string temp;\n    while(std::getline(ss,\
    \ temp, '-')) {\n        v.push_back(temp);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-'))\n    {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3)\n    {\n        return false;\n    }\n    int\
    \ month = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int\
    \ year = std::stoi(tokens[2]);\n    if(month < 1 || month > 12)\n    {\n     \
    \   return false;\n    }\n    if(month == 2)\n    {\n        if(day < 1 || day\
    \ > 29)\n        {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12)\n    {\n        if(day < 1 || day > 31)\n        {\n       \
    \     return false;\n        }\n    }\n    else\n    {\n        if(day < 1 ||\
    \ day > 30)\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    std::stringstream\
    \ ss(date);\n    std::string item;\n    std::vector<std::string> splittedStrings;\n\
    \    while (std::getline(ss, item, '-')) {\n        splittedStrings.push_back(item);\n\
    \    }\n    if(splittedStrings.size() != 3)\n        return false;\n    int day\
    \ = std::stoi(splittedStrings[1]);\n    int month = std::stoi(splittedStrings[0]);\n\
    \    int year = std::stoi(splittedStrings[2]);\n    if(day < 1 || day > 31 ||\
    \ month < 1 || month > 12 || year < 1)\n        return false;\n    if(month ==\
    \ 2 && day > 29)\n        return false;\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11)\n        if(day > 30)\n            return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int days, month, year;\n    std::stringstream\
    \ ss(date);\n    char ch;\n    ss >> month >> ch >> days >> ch >> year;\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(days < 1 || days > 31)\n \
    \       return false;\n    if(month == 2)\n        if(days > 29)\n           \
    \ return false;\n    if(month == 4 || month == 6 || month == 9 || month == 11)\n\
    \        if(days > 30)\n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  std::regex pattern(\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})\"\
    );\n  return std::regex_match(date, pattern);\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpax82_b0_: /tmp/tmpax82_b0_.cpp:29: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    int m,d,y;\n    std::stringstream\
    \ ss(date);\n    char ch;\n    ss>>m>>ch>>d>>ch>>y;\n    if(m<1 || m>12)\n   \
    \     return false;\n    if(m==2)\n    {\n        if(d<1 || d>29)\n          \
    \  return false;\n    }\n    else if(m==4 || m==6 || m==9 || m==11)\n    {\n \
    \       if(d<1 || d>30)\n            return false;\n    }\n    else\n    {\n \
    \       if(d<1 || d>31)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(day < 1 || day > 31) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day > 29) {\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::vector<std::string>\
    \ v;\n    std::stringstream ss(date);\n    std::string temp;\n    while(std::getline(ss,\
    \ temp, '-')){\n        v.push_back(temp);\n    }\n    if(v.size() != 3){\n  \
    \      return false;\n    }\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n\
    \    int year = std::stoi(v[2]);\n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n     \
    \       return false;\n        }\n    }\n    else if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    else{\n        if(day < 1 || day > 30){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::regex pattern(\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})\"\
    );\n    return std::regex_match(date, pattern);\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpjjifa9_c: /tmp/tmpjjifa9_c.cpp:29: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126826
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    if(date.size()==0)\n\
    \        return false;\n    std::stringstream ss(date);\n    std::string token;\n\
    \    std::vector<std::string> v;\n    while(std::getline(ss, token, '-')) {\n\
    \        v.push_back(token);\n    }\n    int month = std::stoi(v[0]);\n    int\
    \ day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month<1 || month>12)\n\
    \        return false;\n    if(month==2) {\n        if(day<1 || day>29)\n    \
    \        return false;\n    }\n    else if(month==1 || month==3 || month==5 ||\
    \ month==7 || month==8 || month==10 || month==12) {\n        if(day<1 || day>31)\n\
    \            return false;\n    }\n    else {\n        if(day<1 || day>30)\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int month, day, year;\n    std::stringstream\
    \ ss(date);\n    char c;\n    ss >> month >> c >> day >> c >> year;\n    if (month\
    \ < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n  \
    \      return false;\n    if (month == 2) {\n        if (day > 29)\n         \
    \   return false;\n        if (day == 29) {\n            if (year % 4 != 0)\n\
    \                return false;\n            if (year % 100 == 0 && year % 400\
    \ != 0)\n                return false;\n        }\n    }\n    if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n        if (day > 30)\n        \
    \    return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0) return false;\n \
    \   std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) return false;\n    int month = std::stoi(tokens[0]);\n\
    \    int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) return false;\n    } else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) return false;\n    } else {\n        if(day < 1 || day > 30)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.size() == 0)\n        return false;\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3)\n        return false;\n    int month = std::stoi(tokens[0]);\n\
    \    int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n \
    \   if(month < 1 || month > 12)\n        return false;\n    if(month == 2) {\n\
    \        if(day < 1 || day > 29)\n            return false;\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31)\n            return false;\n\
    \    }\n    else {\n        if(day < 1 || day > 30)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    if(date.length()==0)\n\
    \    return false;\n    int i=0;\n    int month=0;\n    int day=0;\n    int year=0;\n\
    \    while(date[i]!='-')\n    {\n        month=month*10+(date[i]-'0');\n     \
    \   i++;\n    }\n    i++;\n    while(date[i]!='-')\n    {\n        day=day*10+(date[i]-'0');\n\
    \        i++;\n    }\n    i++;\n    while(i<date.length())\n    {\n        year=year*10+(date[i]-'0');\n\
    \        i++;\n    }\n    if(month<1 || month>12)\n    return false;\n    if(month==1\
    \ || month==3 || month==5 || month==7 || month==8 || month==10 || month==12)\n\
    \    {\n        if(day<1 || day>31)\n        return false;\n    }\n    else if(month==4\
    \ || month==6 || month==9 || month==11)\n    {\n        if(day<1 || day>30)\n\
    \        return false;\n    }\n    else if(month==2)\n    {\n        if(day<1\
    \ || day>29)\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int len = date.length();\n\
    \    if(len == 0)\n        return false;\n    int i = 0;\n    int month = 0;\n\
    \    int day = 0;\n    int year = 0;\n    while(date[i] != '-')\n    {\n     \
    \   month = month*10 + (date[i] - '0');\n        i++;\n    }\n    i++;\n    while(date[i]\
    \ != '-')\n    {\n        day = day*10 + (date[i] - '0');\n        i++;\n    }\n\
    \    i++;\n    while(i < len)\n    {\n        year = year*10 + (date[i] - '0');\n\
    \        i++;\n    }\n    if(month > 12 || month < 1)\n        return false;\n\
    \    if(month == 2)\n    {\n        if(day > 29 || day < 1)\n            return\
    \ false;\n    }\n    else if(month == 4 || month == 6 || month == 9 || month ==\
    \ 11)\n    {\n        if(day > 30 || day < 1)\n            return false;\n   \
    \ }\n    else\n    {\n        if(day > 31 || day < 1)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int d,m,y;\n    if(date.length()==0)\n\
    \        return false;\n    if(date[2]!='-' || date[5]!='-')\n        return false;\n\
    \    d=stoi(date.substr(0,2));\n    m=stoi(date.substr(3,2));\n    y=stoi(date.substr(6,4));\n\
    \    if(d<1 || d>31 || m<1 || m>12 || y<1)\n        return false;\n    if(m==2\
    \ && d>29)\n        return false;\n    if(m==4 || m==6 || m==9 || m==11)\n   \
    \ {\n        if(d>30)\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxkyoubas: /tmp/tmpxkyoubas.cpp:40: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    if(ss >> m >> c >> d >> c >> y)\
    \ {\n        if(m < 1 || m > 12) return false;\n        if(m == 2) {\n       \
    \     if(d < 1 || d > 29) return false;\n        } else if(m == 4 || m == 6 ||\
    \ m == 9 || m == 11) {\n            if(d < 1 || d > 30) return false;\n      \
    \  } else {\n            if(d < 1 || d > 31) return false;\n        }\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0)\n        return false;\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-'))\n        tokens.push_back(token);\n\
    \    if(tokens.size() != 3)\n        return false;\n    int month = std::stoi(tokens[0]);\n\
    \    int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n \
    \   if(month < 1 || month > 12)\n        return false;\n    if(month == 2)\n \
    \   {\n        if(day < 1 || day > 29)\n            return false;\n    }\n   \
    \ else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 ||\
    \ month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n      \
    \      return false;\n    }\n    else\n    {\n        if(day < 1 || day > 30)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string item;\n    std::vector<std::string> splittedStrings;\n\
    \    while (std::getline(ss, item, '-')) {\n        splittedStrings.push_back(item);\n\
    \    }\n    if(splittedStrings.size()!=3){\n        return false;\n    }\n   \
    \ int month = std::stoi(splittedStrings[0]);\n    int day = std::stoi(splittedStrings[1]);\n\
    \    int year = std::stoi(splittedStrings[2]);\n    if(month<1 || month>12){\n\
    \        return false;\n    }\n    if(month==1 || month==3 || month==5 || month==7\
    \ || month==8 || month==10 || month==12){\n        if(day<1 || day>31){\n    \
    \        return false;\n        }\n    }\n    else if(month==4 || month==6 ||\
    \ month==9 || month==11){\n        if(day<1 || day>30){\n            return false;\n\
    \        }\n    }\n    else if(month==2){\n        if(day<1 || day>29){\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::vector<std::string>\
    \ v;\n    std::stringstream ss(date);\n    std::string temp;\n    while(getline(ss,\
    \ temp, '-')){\n        v.push_back(temp);\n    }\n    if(v.size() != 3){\n  \
    \      return false;\n    }\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n\
    \    int year = std::stoi(v[2]);\n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    else if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    else if(month == 2){\n        if(day\
    \ < 1 || day > 29){\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0)\n        return false;\n\
    \    int day = stoi(date.substr(0, 2));\n    int month = stoi(date.substr(3, 2));\n\
    \    int year = stoi(date.substr(6, 4));\n    if(day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1)\n        return false;\n    if(month == 2)\n\
    \        return day <= 29;\n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11)\n        return day <= 30;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv7cmh5pv: /tmp/tmpv7cmh5pv.cpp:33: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126824
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day, month, year;\n    int len = date.length();\n\
    \    if(len != 10)\n        return false;\n    if(date[2] != '-' || date[5] !=\
    \ '-')\n        return false;\n    day = stoi(date.substr(0, 2));\n    month =\
    \ stoi(date.substr(3, 2));\n    year = stoi(date.substr(6, 4));\n    if(day <\
    \ 1 || day > 31)\n        return false;\n    if(month < 1 || month > 12)\n   \
    \     return false;\n    if(month == 2 && day > 29)\n        return false;\n \
    \   if(month == 4 || month == 6 || month == 9 || month == 11)\n        if(day\
    \ > 30)\n            return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_12dnxxs: /tmp/tmp_12dnxxs.cpp:40: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126825
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int len = date.length();\n\
    \    if(len == 0)\n        return false;\n    int i = 0;\n    int month = 0;\n\
    \    int day = 0;\n    int year = 0;\n    while(date[i] != '-'){\n        if(date[i]\
    \ < '0' || date[i] > '9')\n            return false;\n        month = month *\
    \ 10 + (date[i] - '0');\n        i++;\n    }\n    i++;\n    while(date[i] != '-'){\n\
    \        if(date[i] < '0' || date[i] > '9')\n            return false;\n     \
    \   day = day * 10 + (date[i] - '0');\n        i++;\n    }\n    i++;\n    while(i\
    \ < len){\n        if(date[i] < '0' || date[i] > '9')\n            return false;\n\
    \        year = year * 10 + (date[i] - '0');\n        i++;\n    }\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(month == 1 || month == 3 ||\
    \ month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n   \
    \     if(day < 1 || day > 31)\n            return false;\n    }\n    else if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day\
    \ > 30)\n            return false;\n    }\n    else{\n        if(day < 1 || day\
    \ > 29)\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    if(date.length()\
    \ == 0)\n        return false;\n    std::stringstream ss(date);\n    std::string\
    \ temp;\n    std::vector<std::string> v;\n    while(std::getline(ss, temp, '-'))\n\
    \        v.push_back(temp);\n    if(v.size() != 3)\n        return false;\n  \
    \  int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year\
    \ = std::stoi(v[2]);\n    if(month < 1 || month > 12)\n        return false;\n\
    \    if(day < 1 || day > 31)\n        return false;\n    if(month == 2 && day\
    \ > 29)\n        return false;\n    if((month == 4 || month == 6 || month == 9\
    \ || month == 11) && day > 30)\n        return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::vector<std::string>\
    \ v;\n    std::stringstream ss(date);\n    std::string token;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) return\
    \ false;\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n \
    \   int year = std::stoi(v[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2) {\n        if(day\
    \ > 29) return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    ss >> m >> c >> d >> c >> y;\n\
    \    if (ss.fail()) return false;\n    if (m < 1 || m > 12) return false;\n  \
    \  if (d < 1 || d > 31) return false;\n    if (m == 2) {\n        if (d > 29)\
    \ return false;\n        if (d == 29) {\n            if (y % 4 != 0) return false;\n\
    \            if (y % 100 == 0 && y % 400 != 0) return false;\n        }\n    }\n\
    \    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        if (d > 30) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int days,month,year;\n\
    \    if(date.size()==0)\n        return false;\n    if(date[2]!='-' || date[5]!='-')\n\
    \        return false;\n    for(int i=0;i<date.size();i++)\n    {\n        if(i==2\
    \ || i==5)\n            continue;\n        if(date[i]<'0' || date[i]>'9')\n  \
    \          return false;\n    }\n    month=10*(date[0]-'0')+(date[1]-'0');\n \
    \   days=10*(date[3]-'0')+(date[4]-'0');\n    year=1000*(date[6]-'0')+100*(date[7]-'0')+10*(date[8]-'0')+(date[9]-'0');\n\
    \    if(month<1 || month>12)\n        return false;\n    if(month==1 || month==3\
    \ || month==5 || month==7 || month==8 || month==10 || month==12)\n    {\n    \
    \    if(days<1 || days>31)\n            return false;\n    }\n    else if(month==4\
    \ || month==6 || month==9 || month==11)\n    {\n        if(days<1 || days>30)\n\
    \            return false;\n    }\n    else\n    {\n        if(days<1 || days>29)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day, month, year;\n    std::stringstream\
    \ ss(date);\n    char ch;\n    ss >> month >> ch >> day >> ch >> year;\n    if\
    \ (ss.fail()) return false;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if\
    \ (day > 29) return false;\n        if (day == 29) {\n            if (year % 4\
    \ != 0) return false;\n            if (year % 100 == 0 && year % 400 != 0) return\
    \ false;\n        }\n    }\n    else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0)\n        return false;\n\
    \    int days, months, years;\n    std::stringstream ss(date);\n    char ch;\n\
    \    ss >> months >> ch >> days >> ch >> years;\n    if(months < 1 || months >\
    \ 12)\n        return false;\n    if(days < 1 || days > 31)\n        return false;\n\
    \    if(months == 2)\n        if(days > 29)\n            return false;\n    if(months\
    \ == 4 || months == 6 || months == 9 || months == 11)\n        if(days > 30)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int n = date.length();\n\
    \    if(n==0)\n        return false;\n    int i=0;\n    int month=0,day=0,year=0;\n\
    \    while(date[i]!='-')\n    {\n        month = month*10 + (date[i]-'0');\n \
    \       i++;\n    }\n    i++;\n    while(date[i]!='-')\n    {\n        day = day*10\
    \ + (date[i]-'0');\n        i++;\n    }\n    i++;\n    while(i<n)\n    {\n   \
    \     year = year*10 + (date[i]-'0');\n        i++;\n    }\n    if(month<1 ||\
    \ month>12)\n        return false;\n    if(month==1 || month==3 || month==5 ||\
    \ month==7 || month==8 || month==10 || month==12)\n    {\n        if(day<1 ||\
    \ day>31)\n            return false;\n    }\n    else if(month==4 || month==6\
    \ || month==9 || month==11)\n    {\n        if(day<1 || day>30)\n            return\
    \ false;\n    }\n    else\n    {\n        if(day<1 || day>29)\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    int m,d,y;\n    char\
    \ ch;\n    std::stringstream ss(date);\n    ss>>m>>ch>>d>>ch>>y;\n    if(m<1 ||\
    \ m>12)\n        return false;\n    if(d<1 || d>31)\n        return false;\n \
    \   if(m==2)\n    {\n        if(d>29)\n            return false;\n    }\n    if(m==4\
    \ || m==6 || m==9 || m==11)\n    {\n        if(d>30)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  std::stringstream ss(date);\n  std::string\
    \ item;\n  std::vector<std::string> tokens;\n  while (std::getline(ss, item, '-'))\
    \ {\n    tokens.push_back(item);\n  }\n  if (tokens.size() != 3) {\n    return\
    \ false;\n  }\n  int month = std::stoi(tokens[0]);\n  int day = std::stoi(tokens[1]);\n\
    \  int year = std::stoi(tokens[2]);\n  if (month < 1 || month > 12) {\n    return\
    \ false;\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return\
    \ false;\n    }\n  } else if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n    if (day < 1 || day\
    \ > 31) {\n      return false;\n    }\n  } else {\n    if (day < 1 || day > 30)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(day < 1 || day > 31) {\n     \
    \   return false;\n    }\n    if(month == 2) {\n        if(day > 29) {\n     \
    \       return false;\n        }\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if(day > 30) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::stringstream ss(date);\n    int d,\
    \ m, y;\n    char c;\n    if (!(ss >> m >> c >> d >> c >> y)) return false;\n\
    \    if (c != '-') return false;\n    if (m < 1 || m > 12) return false;\n   \
    \ if (d < 1 || d > 31) return false;\n    if (m == 2) return d <= 29;\n    if\
    \ (m == 4 || m == 6 || m == 9 || m == 11) return d <= 30;\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0) return false;\n \
    \   std::stringstream ss(date);\n    std::string item;\n    std::vector<std::string>\
    \ tokens;\n    while (std::getline(ss, item, '-')) {\n        tokens.push_back(item);\n\
    \    }\n    if(tokens.size() != 3) return false;\n    int month = std::stoi(tokens[0]);\n\
    \    int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(month == 2 && day > 29)\
    \ return false;\n    if(month == 2 && day < 1) return false;\n    if(month ==\
    \ 2 && day == 29 && year % 4 != 0) return false;\n    if(month == 2 && day ==\
    \ 29 && year % 100 == 0 && year % 400 != 0) return false;\n    if(month == 2 &&\
    \ day == 29 && year % 400 == 0) return true;\n    if(month == 2 && day < 29) return\
    \ true;\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12) {\n        if(day < 1 || day > 31) return\
    \ false;\n        return true;\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if(day < 1 || day > 30) return false;\n    \
    \    return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // your code here\n  std::stringstream ss(date);\n\
    \  std::string token;\n  std::vector<std::string> v;\n  while(std::getline(ss,\
    \ token, '-')) {\n    v.push_back(token);\n  }\n  if(v.size() != 3) {\n    return\
    \ false;\n  }\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if(month == 2) {\n    if(day < 1 || day > 29) {\n      return false;\n\
    \    }\n  }\n  else if(month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n    if(day < 1 || day > 31) {\n\
    \      return false;\n    }\n  }\n  else {\n    if(day < 1 || day > 30) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    if(date.length()==0)\n\
    \        return false;\n    std::vector<std::string> v;\n    std::stringstream\
    \ ss(date);\n    std::string temp;\n    while(std::getline(ss,temp,'-'))\n   \
    \ {\n        v.push_back(temp);\n    }\n    if(v.size()!=3)\n        return false;\n\
    \    int month=std::stoi(v[0]);\n    int day=std::stoi(v[1]);\n    int year=std::stoi(v[2]);\n\
    \    if(month<1 || month>12)\n        return false;\n    if(day<1 || day>31)\n\
    \        return false;\n    if(month==2)\n    {\n        if(day>29)\n        \
    \    return false;\n    }\n    if(month==4 || month==6 || month==9 || month==11)\n\
    \    {\n        if(day>30)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) return\
    \ false;\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n \
    \   int year = std::stoi(v[2]);\n    if(month < 1 || month > 12) return false;\n\
    \    if(day < 1 || day > 31) return false;\n    if(month == 2 && day > 29) return\
    \ false;\n    if(month == 4 || month == 6 || month == 9 || month == 11) {\n  \
    \      if(day > 30) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int m,d,y;\n    std::stringstream\
    \ ss(date);\n    char ch;\n    ss>>m>>ch>>d>>ch>>y;\n    if(m<1 || m>12 || d<1\
    \ || d>31 || y<1)\n        return false;\n    if(m==2 && d>29)\n        return\
    \ false;\n    if(m==4 || m==6 || m==9 || m==11)\n    {\n        if(d>30)\n   \
    \         return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char ch;\n    ss >> m >> ch >> d >> ch >> y;\n\
    \    if(m > 12 || m < 1 || d < 1 || d > 31 || y < 0)\n        return false;\n\
    \    if(m == 2 && d > 29)\n        return false;\n    if(m == 4 || m == 6 || m\
    \ == 9 || m == 11)\n        if(d > 30)\n            return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::regex pattern(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    );\n    return std::regex_match(date, pattern);\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9cynoy8g: /tmp/tmp9cynoy8g.cpp:29: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0)\n        return false;\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3)\n        return false;\n    int month = std::stoi(tokens[0]);\n\
    \    int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n \
    \   if(month < 1 || month > 12)\n        return false;\n    if(month == 2) {\n\
    \        if(day < 1 || day > 29)\n            return false;\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31)\n            return false;\n\
    \    }\n    else {\n        if(day < 1 || day > 30)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(day < 1 || day > 31) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day > 29) {\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::vector<std::string>\
    \ v;\n    std::stringstream ss(date);\n    std::string temp;\n    while(std::getline(ss,\
    \ temp, '-'))\n    {\n        v.push_back(temp);\n    }\n    if(v.size()!=3)\n\
    \    {\n        return false;\n    }\n    if(v[0].size()!=2 || v[1].size()!=2\
    \ || v[2].size()!=4)\n    {\n        return false;\n    }\n    int month = std::stoi(v[0]);\n\
    \    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month<1\
    \ || month>12)\n    {\n        return false;\n    }\n    if(day<1 || day>31)\n\
    \    {\n        return false;\n    }\n    if(month==2)\n    {\n        if(day>29)\n\
    \        {\n            return false;\n        }\n    }\n    if(month==4 || month==6\
    \ || month==9 || month==11)\n    {\n        if(day>30)\n        {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // your code here\n  std::stringstream ss(date);\n\
    \  std::string token;\n  std::vector<std::string> tokens;\n  while(std::getline(ss,\
    \ token, '-')) {\n    tokens.push_back(token);\n  }\n  if(tokens.size() != 3)\
    \ {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n  int day =\
    \ std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if(month < 1 ||\
    \ month > 12) {\n    return false;\n  }\n  if(day < 1 || day > 31) {\n    return\
    \ false;\n  }\n  if(month == 2) {\n    if(day > 29) {\n      return false;\n \
    \   }\n  }\n  if(month == 4 || month == 6 || month == 9 || month == 11) {\n  \
    \  if(day > 30) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    ss >> m >> c >> d >> c >> y;\n\
    \    if (ss.fail()) return false;\n    if (m < 1 || m > 12) return false;\n  \
    \  if (d < 1 || d > 31) return false;\n    if (m == 2) {\n        if (d > 29)\
    \ return false;\n        if (d == 29) {\n            if (y % 4 != 0) return false;\n\
    \            if (y % 100 == 0 && y % 400 != 0) return false;\n        }\n    }\n\
    \    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        if (d > 30) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    ss >> m >> c >> d >> c >> y;\n\
    \    if(m < 1 || m > 12)\n        return false;\n    if(d < 1 || d > 31)\n   \
    \     return false;\n    if(m == 2 && d > 29)\n        return false;\n    if(m\
    \ == 4 || m == 6 || m == 9 || m == 11)\n        if(d > 30)\n            return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::regex pattern(\"\\\\d{2}-\\\\d{2}-\\\
    \\d{4}\");\n    if(!std::regex_match(date, pattern))\n        return false;\n\
    \    int day = std::stoi(date.substr(0, 2));\n    int month = std::stoi(date.substr(3,\
    \ 2));\n    int year = std::stoi(date.substr(6, 4));\n    if(month < 1 || month\
    \ > 12)\n        return false;\n    if(month == 2) {\n        if(year % 4 == 0)\
    \ {\n            if(day < 1 || day > 29)\n                return false;\n    \
    \    }\n        else {\n            if(day < 1 || day > 28)\n                return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31)\n            return false;\n    }\n    else {\n        if(day\
    \ < 1 || day > 30)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9ulpzhsg: /tmp/tmp9ulpzhsg.cpp:48: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126829
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int month,day,year;\n\
    \    std::stringstream ss(date);\n    char ch;\n    ss>>month>>ch>>day>>ch>>year;\n\
    \    if(month<1 || month>12)\n        return false;\n    if(day<1 || day>31)\n\
    \        return false;\n    if(month==4 || month==6 || month==9 || month==11)\n\
    \    {\n        if(day>30)\n            return false;\n    }\n    if(month==2)\n\
    \    {\n        if(day>29)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::stringstream ss(date);\n    std::string\
    \ item;\n    std::vector<std::string> splittedStrings;\n    while (std::getline(ss,\
    \ item, '-')) {\n        splittedStrings.push_back(item);\n    }\n    if(splittedStrings.size()!=3){\n\
    \        return false;\n    }\n    int month = stoi(splittedStrings[0]);\n   \
    \ int day = stoi(splittedStrings[1]);\n    int year = stoi(splittedStrings[2]);\n\
    \    if(month<1 || month>12){\n        return false;\n    }\n    if(month==1 ||\
    \ month==3 || month==5 || month==7 || month==8 || month==10 || month==12){\n \
    \       if(day<1 || day>31){\n            return false;\n        }\n    }\n  \
    \  else if(month==4 || month==6 || month==9 || month==11){\n        if(day<1 ||\
    \ day>30){\n            return false;\n        }\n    }\n    else if(month==2){\n\
    \        if(day<1 || day>29){\n            return false;\n        }\n    }\n \
    \   if(year<0){\n        return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int month, day, year;\n    int m, d, y;\n\
    \    int len = date.length();\n    if(len != 10)\n        return false;\n    for(int\
    \ i = 0; i < len; i++) {\n        if(date[i] == '-') {\n            if(i == 2)\
    \ {\n                month = stoi(date.substr(0, 2));\n                m = i;\n\
    \            }\n            else if(i == 5) {\n                day = stoi(date.substr(3,\
    \ 2));\n                d = i;\n            }\n        }\n    }\n    year = stoi(date.substr(6,\
    \ 4));\n    y = len;\n    if(month < 1 || month > 12)\n        return false;\n\
    \    if(day < 1 || day > 31)\n        return false;\n    if(month == 2) {\n  \
    \      if(day > 29)\n            return false;\n    }\n    else if(month == 4\
    \ || month == 6 || month == 9 || month == 11) {\n        if(day > 30)\n      \
    \      return false;\n    }\n    if(year < 1)\n        return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // your code here\n  std::vector<std::string>\
    \ v;\n  std::stringstream ss(date);\n  std::string temp;\n  while(std::getline(ss,\
    \ temp, '-')) {\n    v.push_back(temp);\n  }\n  if(v.size() != 3) {\n    return\
    \ false;\n  }\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if(month == 2) {\n    if(day < 1 || day > 29) {\n      return false;\n\
    \    }\n  }\n  else if(month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n    if(day < 1 || day > 31) {\n\
    \      return false;\n    }\n  }\n  else {\n    if(day < 1 || day > 30) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // your code here\n  std::vector<std::string>\
    \ v;\n  std::stringstream ss(date);\n  std::string temp;\n  while(std::getline(ss,\
    \ temp, '-')){\n    v.push_back(temp);\n  }\n  if(v.size() != 3){\n    return\
    \ false;\n  }\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month < 1 || month > 12){\n    return false;\n\
    \  }\n  if(month == 2){\n    if(day < 1 || day > 29){\n      return false;\n \
    \   }\n  }\n  else if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \    if(day < 1 || day > 30){\n      return false;\n    }\n  }\n  else{\n    if(day\
    \ < 1 || day > 31){\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::stringstream ss(date);\n    int d,\
    \ m, y;\n    char c;\n    ss >> m >> c >> d >> c >> y;\n    if (ss.fail()) return\
    \ false;\n    if (m < 1 || m > 12) return false;\n    if (d < 1 || d > 31) return\
    \ false;\n    if (m == 2) {\n        if (d > 29) return false;\n        if (d\
    \ == 29) {\n            if (y % 4 != 0) return false;\n            if (y % 100\
    \ == 0 && y % 400 != 0) return false;\n        }\n    }\n    if (m == 4 || m ==\
    \ 6 || m == 9 || m == 11) {\n        if (d > 30) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> vec;\n    while(std::getline(ss,\
    \ token, '-')) {\n        vec.push_back(token);\n    }\n    if(vec.size() != 3)\
    \ {\n        return false;\n    }\n    int month = std::stoi(vec[0]);\n    int\
    \ day = std::stoi(vec[1]);\n    int year = std::stoi(vec[2]);\n    if(month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if(month == 2) {\n   \
    \     if(day < 1 || day > 29) {\n            return false;\n        }\n    }\n\
    \    else if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n        if(day < 1 || day > 31) {\n    \
    \        return false;\n        }\n    }\n    else {\n        if(day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) return false;\n    int month = std::stoi(tokens[0]);\n\
    \    int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) return false;\n    } else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) return false;\n    } else {\n        if(day < 1 || day > 30)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n\tstd::regex pattern(\"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})\"\
    );\n\treturn std::regex_match(date, pattern);\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpm6fycafa: /tmp/tmpm6fycafa.cpp:29: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126829
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    ss >> m >> c >> d >> c >> y;\n\
    \    if (ss.fail()) return false;\n    if (m < 1 || m > 12) return false;\n  \
    \  if (d < 1 || d > 31) return false;\n    if (m == 2) {\n        if (d > 29)\
    \ return false;\n        if (d == 29) {\n            if (y % 4 != 0) return false;\n\
    \            if (y % 100 == 0 && y % 400 != 0) return false;\n        }\n    }\n\
    \    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        if (d > 30) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::stringstream ss(date);\n    std::string\
    \ token;\n    std::vector<std::string> tokens;\n    while (std::getline(ss, token,\
    \ '-')) {\n        tokens.push_back(token);\n    }\n    if (tokens.size() != 3)\
    \ {\n        return false;\n    }\n    int month = std::stoi(tokens[0]);\n   \
    \ int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (month ==\
    \ 2) {\n        if (day < 1 || day > 29) {\n            return false;\n      \
    \  }\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126821
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::stringstream ss(date);\n    int d,\
    \ m, y;\n    char c;\n    ss >> m >> c >> d >> c >> y;\n    if (ss.fail()) return\
    \ false;\n    if (m < 1 || m > 12) return false;\n    if (d < 1 || d > 31) return\
    \ false;\n    if (m == 2) {\n        if (d > 29) return false;\n        if (d\
    \ == 29) {\n            if (y % 4 != 0) return false;\n            if (y % 100\
    \ == 0 && y % 400 != 0) return false;\n        }\n    }\n    if (m == 4 || m ==\
    \ 6 || m == 9 || m == 11) {\n        if (d > 30) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  if(date.length() == 0)\n    return false;\n\
    \  std::stringstream ss(date);\n  std::string token;\n  std::vector<std::string>\
    \ v;\n  while(std::getline(ss, token, '-')) {\n    v.push_back(token);\n  }\n\
    \  if(v.size() != 3)\n    return false;\n  int month = std::stoi(v[0]);\n  int\
    \ day = std::stoi(v[1]);\n  int year = std::stoi(v[2]);\n  if(month < 1 || month\
    \ > 12)\n    return false;\n  if(month == 2) {\n    if(day < 1 || day > 29)\n\
    \      return false;\n  }\n  else if(month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12) {\n    if(day < 1 ||\
    \ day > 31)\n      return false;\n  }\n  else {\n    if(day < 1 || day > 30)\n\
    \      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n  \
    \  while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n \
    \   }\n    if(tokens.size() != 3) {\n        return false;\n    }\n    int month\
    \ = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year =\
    \ std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(month == 2) {\n        if(day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    else {\n\
    \        if(day < 1 || day > 30) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // your code here\n  std::stringstream ss(date);\n\
    \  std::string token;\n  std::vector<std::string> v;\n  while(std::getline(ss,\
    \ token, '-')) {\n    v.push_back(token);\n  }\n  if(v.size() != 3) {\n    return\
    \ false;\n  }\n  int month = std::stoi(v[0]);\n  int day = std::stoi(v[1]);\n\
    \  int year = std::stoi(v[2]);\n  if(month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if(month == 2) {\n    if(day < 1 || day > 29) {\n      return false;\n\
    \    }\n  }\n  else if(month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n    if(day < 1 || day > 31) {\n\
    \      return false;\n    }\n  }\n  else {\n    if(day < 1 || day > 30) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int day, month, year;\n\
    \    std::stringstream ss(date);\n    char c;\n    ss >> month >> c >> day >>\
    \ c >> year;\n    if (month < 1 || month > 12) return false;\n    if (day < 1\
    \ || day > 31) return false;\n    if (month == 2) {\n        if (day > 29) return\
    \ false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if (day > 30) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n\t// your code here\n\tstd::stringstream ss(date);\n\
    \tstd::string token;\n\tstd::vector<std::string> date_vec;\n\twhile (std::getline(ss,\
    \ token, '-')) {\n\t\tdate_vec.push_back(token);\n\t}\n\tif (date_vec.size() !=\
    \ 3) {\n\t\treturn false;\n\t}\n\tint month = std::stoi(date_vec[0]);\n\tint day\
    \ = std::stoi(date_vec[1]);\n\tint year = std::stoi(date_vec[2]);\n\tif (month\
    \ < 1 || month > 12) {\n\t\treturn false;\n\t}\n\tif (month == 2) {\n\t\tif (day\
    \ < 1 || day > 29) {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n\t\tif (day < 1 || day > 31) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    else {\n\t\tif (day < 1 || day > 30) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int len = date.length();\n\
    \    if(len != 10)\n        return false;\n    std::stringstream ss(date);\n \
    \   std::string temp;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ temp, '-'))\n        v.push_back(temp);\n    if(v.size() != 3)\n        return\
    \ false;\n    int month = std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n \
    \   int year = std::stoi(v[2]);\n    if(month < 1 || month > 12)\n        return\
    \ false;\n    if(month == 2)\n    {\n        if(day < 1 || day > 29)\n       \
    \     return false;\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12)\n    {\n        if(day\
    \ < 1 || day > 31)\n            return false;\n    }\n    else\n    {\n      \
    \  if(day < 1 || day > 30)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    int d, m, y;\n    char c;\n    ss >> m >> c >> d >> c >> y;\n\
    \    if(ss.fail()) return false;\n    if(m < 1 || m > 12) return false;\n    if(d\
    \ < 1 || d > 31) return false;\n    if(m == 2 && d > 29) return false;\n    if(m\
    \ == 4 || m == 6 || m == 9 || m == 11) {\n        if(d > 30) return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n \
    \   assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int len = date.length();\n\
    \    if(len == 0)\n        return false;\n    int i = 0;\n    int month = 0;\n\
    \    int day = 0;\n    int year = 0;\n    while(date[i] != '-')\n    {\n     \
    \   if(date[i] < '0' || date[i] > '9')\n            return false;\n        month\
    \ = month * 10 + (date[i] - '0');\n        i++;\n    }\n    if(month < 1 || month\
    \ > 12)\n        return false;\n    i++;\n    while(date[i] != '-')\n    {\n \
    \       if(date[i] < '0' || date[i] > '9')\n            return false;\n      \
    \  day = day * 10 + (date[i] - '0');\n        i++;\n    }\n    if(month == 2)\n\
    \    {\n        if(day < 1 || day > 29)\n            return false;\n    }\n  \
    \  else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 31)\n   \
    \         return false;\n    }\n    else\n    {\n        if(day < 1 || day > 30)\n\
    \            return false;\n    }\n    i++;\n    while(i < len)\n    {\n     \
    \   if(date[i] < '0' || date[i] > '9')\n            return false;\n        year\
    \ = year * 10 + (date[i] - '0');\n        i++;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int n = date.length();\n\
    \    if(n==0)\n        return false;\n    int i=0;\n    int month = 0;\n    int\
    \ day = 0;\n    int year = 0;\n    while(date[i]!='-')\n    {\n        month =\
    \ month*10 + (date[i]-'0');\n        i++;\n    }\n    i++;\n    while(date[i]!='-')\n\
    \    {\n        day = day*10 + (date[i]-'0');\n        i++;\n    }\n    i++;\n\
    \    while(i<n)\n    {\n        year = year*10 + (date[i]-'0');\n        i++;\n\
    \    }\n    if(month>12 || month<1)\n        return false;\n    if(month==1 ||\
    \ month==3 || month==5 || month==7 || month==8 || month==10 || month==12)\n  \
    \  {\n        if(day>31 || day<1)\n            return false;\n    }\n    else\
    \ if(month==4 || month==6 || month==9 || month==11)\n    {\n        if(day>30\
    \ || day<1)\n            return false;\n    }\n    else if(month==2)\n    {\n\
    \        if(day>29 || day<1)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.length() == 0) return false;\n \
    \   std::stringstream ss(date);\n    std::string item;\n    std::vector<std::string>\
    \ splittedStrings;\n    while (std::getline(ss, item, '-')) {\n        splittedStrings.push_back(item);\n\
    \    }\n    if(splittedStrings.size() != 3) return false;\n    int month = stoi(splittedStrings[0]);\n\
    \    int day = stoi(splittedStrings[1]);\n    int year = stoi(splittedStrings[2]);\n\
    \    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2) {\n        if(day > 29) return false;\n    }\n  \
    \  if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // your code here\n  std::stringstream ss(date);\n\
    \  std::string token;\n  std::vector<std::string> tokens;\n  while(std::getline(ss,\
    \ token, '-')) {\n    tokens.push_back(token);\n  }\n  if(tokens.size() != 3)\
    \ {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n  int day =\
    \ std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if(month < 1 ||\
    \ month > 12) {\n    return false;\n  }\n  if(day < 1 || day > 31) {\n    return\
    \ false;\n  }\n  if(month == 2) {\n    if(day > 29) {\n      return false;\n \
    \   }\n  }\n  if(month == 4 || month == 6 || month == 9 || month == 11) {\n  \
    \  if(day > 30) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126826
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::vector<std::string> v;\n    std::stringstream\
    \ ss(date);\n    std::string temp;\n    while(getline(ss, temp, '-')) {\n    \
    \    v.push_back(temp);\n    }\n    if(v.size() != 3) return false;\n    int month\
    \ = stoi(v[0]);\n    int day = stoi(v[1]);\n    int year = stoi(v[2]);\n    if(month\
    \ < 1 || month > 12) return false;\n    if(month == 2) {\n        if(day < 1 ||\
    \ day > 29) return false;\n    }\n    else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) return false;\n    }\n    else {\n        if(day < 1 || day\
    \ > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126827
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    // if(date.length()\
    \ == 0)\n    //     return false;\n    // int i = 0;\n    // while(date[i] !=\
    \ '-')\n    //     i++;\n    // int month = stoi(date.substr(0, i));\n    // if(month\
    \ < 1 || month > 12)\n    //     return false;\n    // int j = i + 1;\n    //\
    \ while(date[j] != '-')\n    //     j++;\n    // int day = stoi(date.substr(i\
    \ + 1, j - i - 1));\n    // if(day < 1 || day > 31)\n    //     return false;\n\
    \    // int year = stoi(date.substr(j + 1, date.length() - j - 1));\n    // if(year\
    \ < 0)\n    //     return false;\n    // return true;\n    // std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n    // return std::regex_match(date,\
    \ pattern);\n    std::regex pattern(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    );\n    if(std::regex_match(date, pattern))\n    {\n        int month = stoi(date.substr(0,\
    \ 2));\n        int day = stoi(date.substr(3, 2));\n        int year = stoi(date.substr(6,\
    \ 4));\n        if(year < 0)\n            return false;\n        if(month == 2)\n\
    \        {\n            if(day < 1 || day > 29)\n                return false;\n\
    \        }\n        else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12)\n        {\n            if(day\
    \ < 1 || day > 31)\n                return false;\n        }\n\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_to67e_y.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp_to67e_y.cpp:58:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   58 | int main() {\n      |            ^\n/tmp/tmp_to67e_y.cpp:76:1:\
    \ error: expected \u2018}\u2019 at end of input\n   76 | }\n      | ^\n/tmp/tmp_to67e_y.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmp_to67e_y.cpp:76:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   76 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660126828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.size() == 0) return false;\n   \
    \ std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ tokens;\n    while(std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n\
    \    }\n    if(tokens.size() != 3) return false;\n    int month = std::stoi(tokens[0]);\n\
    \    int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2) {\n        if(day > 29) return false;\n    }\n  \
    \  if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    // std::cout << date\
    \ << std::endl;\n    std::stringstream ss(date);\n    std::string token;\n   \
    \ std::vector<std::string> tokens;\n    while(std::getline(ss, token, '-')) {\n\
    \        tokens.push_back(token);\n    }\n    // std::cout << tokens.size() <<\
    \ std::endl;\n    if(tokens.size() != 3) {\n        return false;\n    }\n   \
    \ int month = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n   \
    \ int year = std::stoi(tokens[2]);\n    if(month < 1 || month > 12) {\n      \
    \  return false;\n    }\n    if(month == 2) {\n        if(day < 1 || day > 29)\
    \ {\n            return false;\n        }\n    }\n    else if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n        if(day < 1 || day > 31) {\n            return false;\n        }\n\
    \    }\n    else {\n        if(day < 1 || day > 30) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126828
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    // return true;\n\
    \    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string>\
    \ v;\n    while(std::getline(ss, token, '-')) {\n        v.push_back(token);\n\
    \    }\n    if(v.size() != 3) {\n        return false;\n    }\n    int month =\
    \ std::stoi(v[0]);\n    int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day < 1 || day > 29) {\n            return false;\n    \
    \    }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if(day < 1 || day\
    \ > 31) {\n            return false;\n        }\n    }\n    else {\n        if(day\
    \ < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126829
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int day,month,year;\n\
    \    std::stringstream ss(date);\n    char ch;\n    ss>>month>>ch>>day>>ch>>year;\n\
    \    if(month>12 || month<1)\n        return false;\n    if(day>31 || day<1)\n\
    \        return false;\n    if(month==2 && day>29)\n        return false;\n  \
    \  if(month==4 || month==6 || month==9 || month==11)\n    {\n        if(day>30)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126829
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::regex pattern(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\");\n    return std::regex_match(date,\
    \ pattern);\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp41zkghkp: /tmp/tmp41zkghkp.cpp:30: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126831
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::regex pattern(\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    );\n    return std::regex_match(date, pattern);\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpxi3j9cmx: /tmp/tmpxi3j9cmx.cpp:29: int main(): Assertion `candidate(("04-31-3000"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126831
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int month, day, year;\n\
    \    char dash1, dash2;\n    std::stringstream ss(date);\n    ss >> month >> dash1\
    \ >> day >> dash2 >> year;\n    if (ss.fail() || dash1 != '-' || dash2 != '-'\
    \ || month < 1 || month > 12 || day < 1 || day > 31 || year < 1) {\n        return\
    \ false;\n    }\n    if (month == 2) {\n        if (day > 29) {\n            return\
    \ false;\n        }\n    }\n    if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126829
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int len = date.length();\n\
    \    if(len == 0) return false;\n    int i = 0;\n    while(i < len && date[i]\
    \ != '-') i++;\n    if(i == len) return false;\n    std::string month = date.substr(0,\
    \ i);\n    if(month.length() == 0) return false;\n    int m = std::stoi(month);\n\
    \    if(m < 1 || m > 12) return false;\n    int j = i + 1;\n    while(j < len\
    \ && date[j] != '-') j++;\n    if(j == len) return false;\n    std::string day\
    \ = date.substr(i + 1, j - i - 1);\n    if(day.length() == 0) return false;\n\
    \    int d = std::stoi(day);\n    if(d < 1 || d > 31) return false;\n    if(m\
    \ == 2 && d > 29) return false;\n    if((m == 4 || m == 6 || m == 9 || m == 11)\
    \ && d > 30) return false;\n    std::string year = date.substr(j + 1, len - j\
    \ - 1);\n    if(year.length() == 0) return false;\n    int y = std::stoi(year);\n\
    \    if(y < 0) return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126829
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    //your code here\n    std::vector<std::string>\
    \ v;\n    std::stringstream ss(date);\n    std::string temp;\n    while(std::getline(ss,\
    \ temp, '-')) {\n        v.push_back(temp);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126829
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    if(date.length()==0)\
    \ return false;\n    int i=0;\n    while(date[i]!='-'){\n        if(!isdigit(date[i]))\
    \ return false;\n        i++;\n    }\n    int month=stoi(date.substr(0,i));\n\
    \    if(month<1 || month>12) return false;\n    int j=i+1;\n    while(date[j]!='-'){\n\
    \        if(!isdigit(date[j])) return false;\n        j++;\n    }\n    int day=stoi(date.substr(i+1,j-i-1));\n\
    \    if(month==2){\n        if(day<1 || day>29) return false;\n    }\n    else\
    \ if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10 ||\
    \ month==12){\n        if(day<1 || day>31) return false;\n    }\n    else{\n \
    \       if(day<1 || day>30) return false;\n    }\n    int k=j+1;\n    while(k<date.length()){\n\
    \        if(!isdigit(date[k])) return false;\n        k++;\n    }\n    int year=stoi(date.substr(j+1,k-j-1));\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126829
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    //your code here\n    std::vector<std::string>\
    \ v;\n    std::stringstream ss(date);\n    std::string temp;\n    while(std::getline(ss,\
    \ temp, '-')){\n        v.push_back(temp);\n    }\n    if(v.size() != 3){\n  \
    \      return false;\n    }\n    if(v[0].size() != 2 || v[1].size() != 2 || v[2].size()\
    \ != 4){\n        return false;\n    }\n    int month = std::stoi(v[0]);\n   \
    \ int day = std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month <\
    \ 1 || month > 12){\n        return false;\n    }\n    if(month == 2){\n     \
    \   if(day < 1 || day > 29){\n            return false;\n        }\n    }\n  \
    \  else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n        \
    \    return false;\n        }\n    }\n    else{\n        if(day < 1 || day > 30){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126829
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    std::stringstream\
    \ ss(date);\n    std::string token;\n    std::vector<std::string> v;\n    while(std::getline(ss,\
    \ token, '-')) {\n        v.push_back(token);\n    }\n    if(v.size() != 3) {\n\
    \        return false;\n    }\n    int month = std::stoi(v[0]);\n    int day =\
    \ std::stoi(v[1]);\n    int year = std::stoi(v[2]);\n    if(month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if(month == 2) {\n        if(day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if(day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    else {\n        if(day < 1 || day > 30) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126820
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    int day, month, year;\n\
    \    std::stringstream ss(date);\n    char delim;\n    ss >> month >> delim >>\
    \ day >> delim >> year;\n    if(ss.fail()) return false;\n    if(month < 1 ||\
    \ month > 12) return false;\n    if(month == 2 && day > 29) return false;\n  \
    \  if(month == 2 && day == 29 && year % 4 != 0) return false;\n    if(month ==\
    \ 2 && day == 29 && year % 100 == 0 && year % 400 != 0) return false;\n    if(month\
    \ == 2 && day < 1) return false;\n    if(month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if(day\
    \ < 1 || day > 31) return false;\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if(day < 1 || day > 30) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126829
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // your code here\n  std::stringstream ss(date);\n\
    \  std::string token;\n  std::vector<std::string> tokens;\n  while(std::getline(ss,\
    \ token, '-')) {\n    tokens.push_back(token);\n  }\n  if(tokens.size() != 3)\
    \ {\n    return false;\n  }\n  int month = std::stoi(tokens[0]);\n  int day =\
    \ std::stoi(tokens[1]);\n  int year = std::stoi(tokens[2]);\n  if(month < 1 ||\
    \ month > 12) {\n    return false;\n  }\n  if(month == 2) {\n    if(day < 1 ||\
    \ day > 29) {\n      return false;\n    }\n  } else if(month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \    if(day < 1 || day > 31) {\n      return false;\n    }\n  } else {\n    if(day\
    \ < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660126829
