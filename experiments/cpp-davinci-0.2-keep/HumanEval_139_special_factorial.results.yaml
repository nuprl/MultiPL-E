name: HumanEval_139_special_factorial
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long long int fact = 1;\n  for(int i =\
    \ 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpim9fwp_n: /tmp/tmpim9fwp_n.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp4i6234dg: /tmp/tmp4i6234dg.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvlc8cq81: /tmp/tmpvlc8cq81.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpw3t3ykvw: /tmp/tmpw3t3ykvw.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp4vipsb3w: /tmp/tmp4vipsb3w.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpm_5ov8q7: /tmp/tmpm_5ov8q7.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpfs9k73gw: /tmp/tmpfs9k73gw.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpukxlxpfb: /tmp/tmpukxlxpfb.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpmzqftwot: /tmp/tmpmzqftwot.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqudl9gra: /tmp/tmpqudl9gra.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp4o7s8fvc: /tmp/tmp4o7s8fvc.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpe3klx62h: /tmp/tmpe3klx62h.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpncbb4j09: /tmp/tmpncbb4j09.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement this\
    \ function\n  if(n==0)\n    return 1;\n  long fact=1;\n  for(int i=1;i<=n;i++)\n\
    \    fact*=i;\n  return fact*special_factorial(n-1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp_kb5g5gc: /tmp/tmp_kb5g5gc.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = 1; i\
    \ <= n; i++) {\n    result *= i;\n  }\n  for (long i = 1; i < n; i++) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpczsajrsf: /tmp/tmpczsajrsf.cpp:26: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpiogxjglp: /tmp/tmpiogxjglp.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdmfp3jp5: /tmp/tmpdmfp3jp5.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp_k86yyrr: /tmp/tmp_k86yyrr.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = n; i > 0; i--)\n    {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0pjk8d5s: /tmp/tmp0pjk8d5s.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8vk6wevn: /tmp/tmp8vk6wevn.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmplgnih5fv: /tmp/tmplgnih5fv.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdb_s5q04: /tmp/tmpdb_s5q04.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpmbatkbyt: /tmp/tmpmbatkbyt.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpndevuavu: /tmp/tmpndevuavu.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpra0vh57c: /tmp/tmpra0vh57c.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp7xm0isqi: /tmp/tmp7xm0isqi.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp1y_wbap5: /tmp/tmp1y_wbap5.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2gfqfoh0: /tmp/tmp2gfqfoh0.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // TODO: Your code here\n\
    \  long factorial = 1;\n  for (long i = 1; i <= n; i++) {\n    factorial *= i;\n\
    \  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp3k66r9ai: /tmp/tmp3k66r9ai.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpk5hmlom9: /tmp/tmpk5hmlom9.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp44m4cpa3: /tmp/tmp44m4cpa3.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpo8jdlgep: /tmp/tmpo8jdlgep.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpyl_lgpz9: /tmp/tmpyl_lgpz9.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5w6axwzp: /tmp/tmp5w6axwzp.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpf563f8zx: /tmp/tmpf563f8zx.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3u_sbf96: /tmp/tmp3u_sbf96.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n      fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp06det35d: /tmp/tmp06det35d.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpo51wruvv: /tmp/tmpo51wruvv.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0on1moa6: /tmp/tmp0on1moa6.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpapf9bohz: /tmp/tmpapf9bohz.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp79_4btje: /tmp/tmp79_4btje.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpemaqqa0t: /tmp/tmpemaqqa0t.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp73y0k3ie: /tmp/tmp73y0k3ie.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Your code here\n\
    \    long fact = 1;\n    for(int i = 1; i <= n; i++)\n    {\n        fact = fact\
    \ * i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp5zzzp7pr: /tmp/tmp5zzzp7pr.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpiejiwujb: /tmp/tmpiejiwujb.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpeviuw9v_: /tmp/tmpeviuw9v_.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp765qxmgy: /tmp/tmp765qxmgy.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpxjovv23o: /tmp/tmpxjovv23o.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpj0qmmxrc: /tmp/tmpj0qmmxrc.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0yqgxeda: /tmp/tmp0yqgxeda.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp7_j_n9rw: /tmp/tmp7_j_n9rw.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long long fact = 1;\n\
    \  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvjtpgrve: /tmp/tmpvjtpgrve.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpr29ziw4_: /tmp/tmpr29ziw4_.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp466hjt8r: /tmp/tmp466hjt8r.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) return 1;\n\
    \  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp29vlvicl: /tmp/tmp29vlvicl.cpp:17: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = n; i > 0; i--) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpb890ic17: /tmp/tmpb890ic17.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpl5kdbmvw: /tmp/tmpl5kdbmvw.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmptn2cbsxk: /tmp/tmptn2cbsxk.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = 1; i <= n; i++) {\n    result *= i;\n  }\n  for (long i = n - 1; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpub_7xmix: /tmp/tmpub_7xmix.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpjlmemztt: /tmp/tmpjlmemztt.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpskxx2jz9: /tmp/tmpskxx2jz9.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp9f5yu_yd: /tmp/tmp9f5yu_yd.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long long int fact=1;\n  for(int i=1;i<=n;i++)\n\
    \  {\n      fact=fact*i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp3z9egkjb: /tmp/tmp3z9egkjb.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = n; i >\
    \ 0; i--) {\n    result *= i;\n  }\n  for (int i = n - 1; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  for (int i = n - 2; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvscv8e3a: /tmp/tmpvscv8e3a.cpp:30: int main(): Assertion `candidate((5))\
    \ == (34560)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpyvfrhsv1: /tmp/tmpyvfrhsv1.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpgcp7cx3m: /tmp/tmpgcp7cx3m.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp003cgmw8: /tmp/tmp003cgmw8.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp7lxk3tql: /tmp/tmp7lxk3tql.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmptpptnj3p: /tmp/tmptpptnj3p.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpzkksojj6: /tmp/tmpzkksojj6.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = 1; i\
    \ <= n; i++) {\n    long factorial = 1;\n    for (long j = 1; j <= i; j++) {\n\
    \      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpr9z6g_g6: /tmp/tmpr9z6g_g6.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpnpc7hjiq: /tmp/tmpnpc7hjiq.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpb1iz33je: /tmp/tmpb1iz33je.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp9fat_5co: /tmp/tmp9fat_5co.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5moghjep: /tmp/tmp5moghjep.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp4hyo4__c: /tmp/tmp4hyo4__c.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmps2mm3omo: /tmp/tmps2mm3omo.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  for (int i = 1; i < n; i++) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpjgmgusx_: /tmp/tmpjgmgusx_.cpp:26: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpx9icptx4: /tmp/tmpx9icptx4.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpbky_5h04: /tmp/tmpbky_5h04.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpi8biweg3: /tmp/tmpi8biweg3.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = 1; i\
    \ <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpglkk01ao: /tmp/tmpglkk01ao.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpue_g02os: /tmp/tmpue_g02os.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpbpy8hn2w: /tmp/tmpbpy8hn2w.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpudgf_6k1: /tmp/tmpudgf_6k1.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp0_e_ltcx: /tmp/tmp0_e_ltcx.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp4yc5flut: /tmp/tmp4yc5flut.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3r4_v9xl: /tmp/tmp3r4_v9xl.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpa0yvyrs3: /tmp/tmpa0yvyrs3.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmps0bazgns: /tmp/tmps0bazgns.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6zuk259k: /tmp/tmp6zuk259k.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpr0zv_vfv: /tmp/tmpr0zv_vfv.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long long int fact=1;\n    for(int i=1;i<=n;i++)\n\
    \    {\n        fact=fact*i;\n    }\n    return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpyx25n6qb: /tmp/tmpyx25n6qb.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpkcgoqpcw: /tmp/tmpkcgoqpcw.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++)\n        fact *= i;\n    return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp216uow5x: /tmp/tmp216uow5x.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp16yqbe5k: /tmp/tmp16yqbe5k.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  int fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n \
    \ }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpdimlnspn: /tmp/tmpdimlnspn.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long res = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n    res *= i;\n  return res;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp4on5tneq: /tmp/tmp4on5tneq.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmphr01413c: /tmp/tmphr01413c.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpo3z2xgjo: /tmp/tmpo3z2xgjo.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n    fact *= i;\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_k5ymnf9: /tmp/tmp_k5ymnf9.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact=1;\n  for(int i=1;i<=n;i++)\n\
    \  {\n      fact=fact*i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp9021jkgr: /tmp/tmp9021jkgr.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpywxr_5fy: /tmp/tmpywxr_5fy.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long res = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    res *= i;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpxts2nxcr: /tmp/tmpxts2nxcr.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpi1s9tzz_: /tmp/tmpi1s9tzz_.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3tupow_d: /tmp/tmp3tupow_d.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpx2n_5u7c: /tmp/tmpx2n_5u7c.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp5v5ofa71: /tmp/tmp5v5ofa71.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpo58ywki4: /tmp/tmpo58ywki4.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpufn9doco: /tmp/tmpufn9doco.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpz_b0ecbb: /tmp/tmpz_b0ecbb.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpmegf3xe5: /tmp/tmpmegf3xe5.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdnp6ovat: /tmp/tmpdnp6ovat.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpclcqe4ut: /tmp/tmpclcqe4ut.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long factorial = 1;\n  for (long i = 1;\
    \ i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp86mtk1_h: /tmp/tmp86mtk1_h.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmppb76d6ay: /tmp/tmppb76d6ay.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpj91wpuzj: /tmp/tmpj91wpuzj.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8sq5o8qp: /tmp/tmp8sq5o8qp.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpil5dyknm: /tmp/tmpil5dyknm.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpgbdgcg0m: /tmp/tmpgbdgcg0m.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8y1izapp: /tmp/tmp8y1izapp.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpf_6cria6: /tmp/tmpf_6cria6.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long factorial = 1;\n  for (long i = n;\
    \ i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp1t9f_pat: /tmp/tmp1t9f_pat.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) {\n    \
    \    return 1;\n    }\n    long fact = 1;\n    for (int i = 1; i <= n; i++) {\n\
    \        fact *= i;\n    }\n    return fact * special_factorial(n - 1);\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp73qnfnrf: /tmp/tmp73qnfnrf.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long factorial = 1;\n\
    \  for (int i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpd27wovon: /tmp/tmpd27wovon.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmprbcefi24: /tmp/tmprbcefi24.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0mcgrvis: /tmp/tmp0mcgrvis.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = n; i > 0; i--)\n        fact *= i;\n    return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6ikqyy7f: /tmp/tmp6ikqyy7f.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpzevlxn57: /tmp/tmpzevlxn57.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2u749pct: /tmp/tmp2u749pct.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_nqiz8sx: /tmp/tmp_nqiz8sx.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpgahuql_f: /tmp/tmpgahuql_f.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpp9x1foly: /tmp/tmpp9x1foly.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp2h3_mzbm: /tmp/tmp2h3_mzbm.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp48o1t77g: /tmp/tmp48o1t77g.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Your code here\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp08bjy2hu: /tmp/tmp08bjy2hu.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpbgvoa0kx: /tmp/tmpbgvoa0kx.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6fiyimxb: /tmp/tmp6fiyimxb.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpbj9llkhf: /tmp/tmpbj9llkhf.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Your code here\n  long\
    \ fact = 1;\n  for(int i = n; i > 0; i--)\n  {\n    fact *= i;\n  }\n  return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpm9_yodr0: /tmp/tmpm9_yodr0.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp1xvbkybv: /tmp/tmp1xvbkybv.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmphmwqgfn6: /tmp/tmphmwqgfn6.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpdueey_u3: /tmp/tmpdueey_u3.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqhuggbi4: /tmp/tmpqhuggbi4.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpputbet2v: /tmp/tmpputbet2v.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpjzl95lgn: /tmp/tmpjzl95lgn.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  for (int i = n - 1; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp5zl41qav: /tmp/tmp5zl41qav.cpp:26: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpz0kwhl_h: /tmp/tmpz0kwhl_h.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Your code here\n  long\
    \ result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  for\
    \ (long i = n - 1; i > 0; i--) {\n    result *= i;\n  }\n  for (long i = n - 2;\
    \ i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp08rf22_v: /tmp/tmp08rf22_v.cpp:28: int main(): Assertion `candidate((5))\
    \ == (34560)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) {\n    \
    \    return 1;\n    }\n    long result = 1;\n    for (long i = 1; i <= n; i++)\
    \ {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpu8rkm6m0: /tmp/tmpu8rkm6m0.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpkckrstap: /tmp/tmpkckrstap.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpafzlp1m2: /tmp/tmpafzlp1m2.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpec8kauke: /tmp/tmpec8kauke.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long factorial = 1;\n\
    \  for (int i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp02fox50k: /tmp/tmp02fox50k.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = n; i > 0; i--) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpq0jkwi6r: /tmp/tmpq0jkwi6r.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpoysixgfn: /tmp/tmpoysixgfn.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqq5rttao: /tmp/tmpqq5rttao.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long factorial = 1;\n  for (long i = n; i > 0; i--) {\n    factorial *= i;\n\
    \  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpm2flw8lx: /tmp/tmpm2flw8lx.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++) {\n    fact *= i;\n  }\n  return fact * special_factorial(n-1);\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8p_50wb4: /tmp/tmp8p_50wb4.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpulfr415u: /tmp/tmpulfr415u.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = n; i >\
    \ 0; i--) {\n    result *= i;\n  }\n  for (int i = n-1; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  for (int i = n-2; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmphsahp2et: /tmp/tmphsahp2et.cpp:30: int main(): Assertion `candidate((5))\
    \ == (34560)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmph_qecpea: /tmp/tmph_qecpea.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpend_ukyl: /tmp/tmpend_ukyl.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpa2etm1z9: /tmp/tmpa2etm1z9.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpx5apqre2: /tmp/tmpx5apqre2.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) return 1;\n\
    \  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmplxhfiwgq: /tmp/tmplxhfiwgq.cpp:17: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long factorial = 1;\n  for (int i = 1; i <= n; i++) {\n    factorial *= i;\n\
    \  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpln04j0j_: /tmp/tmpln04j0j_.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp15o7ig6c: /tmp/tmp15o7ig6c.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long res = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    res *= i;\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdjad8j13: /tmp/tmpdjad8j13.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp6f2hjr1u: /tmp/tmp6f2hjr1u.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2wx46qpq: /tmp/tmp2wx46qpq.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpr7gow8i1: /tmp/tmpr7gow8i1.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpucrsq8ke: /tmp/tmpucrsq8ke.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpg781xqmt: /tmp/tmpg781xqmt.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long long int fact =\
    \ 1;\n    for(int i = n; i > 0; i--)\n    {\n        fact = fact * i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpsdyn3kpi: /tmp/tmpsdyn3kpi.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpsku0f7tf: /tmp/tmpsku0f7tf.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpbk1zwcrz: /tmp/tmpbk1zwcrz.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpkxcr5nyi: /tmp/tmpkxcr5nyi.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp4jwbubtf: /tmp/tmp4jwbubtf.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpz0zaxh1l: /tmp/tmpz0zaxh1l.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // TODO: implement this\
    \ function\n  long factorial = 1;\n  for (long i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpya35xjlc: /tmp/tmpya35xjlc.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdnzgq4t0: /tmp/tmpdnzgq4t0.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpseo9yrvf: /tmp/tmpseo9yrvf.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long ans = 1;\n  for(int i = n; i > 0;\
    \ i--) {\n    ans *= i;\n  }\n  for(int i = n-1; i > 0; i--) {\n    ans *= i;\n\
    \  }\n  for(int i = n-2; i > 0; i--) {\n    ans *= i;\n  }\n  return ans;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6lv7kumc: /tmp/tmp6lv7kumc.cpp:30: int main(): Assertion `candidate((5))\
    \ == (34560)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long factorial = 1;\n\
    \  for (long i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5mp5lzfb: /tmp/tmp5mp5lzfb.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp1nz_tf3k: /tmp/tmp1nz_tf3k.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp0vb9i28l: /tmp/tmp0vb9i28l.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = n; i >\
    \ 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp3xce2t28: /tmp/tmp3xce2t28.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpfn_7gilm: /tmp/tmpfn_7gilm.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpahaj3_gz: /tmp/tmpahaj3_gz.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  for (long i = n - 1; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  for (long i = n - 2; i > 0; i--) {\n \
    \   result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpz4wugb6a: /tmp/tmpz4wugb6a.cpp:27: int main(): Assertion `candidate((5))\
    \ == (34560)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpkmsnoz09: /tmp/tmpkmsnoz09.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  for (int i = n - 1; i >\
    \ 0; i--) {\n    result *= i;\n  }\n  for (int i = n - 2; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp8ma84djh: /tmp/tmp8ma84djh.cpp:27: int main(): Assertion `candidate((5))\
    \ == (34560)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpj22y46df: /tmp/tmpj22y46df.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long factorial = 1;\n\
    \  for (int i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2nygu0in: /tmp/tmp2nygu0in.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpn65oakql: /tmp/tmpn65oakql.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
