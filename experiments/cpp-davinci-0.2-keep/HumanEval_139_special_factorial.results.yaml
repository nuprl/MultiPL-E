language: cpp
name: HumanEval_139_special_factorial
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long long int fact = 1;\n  for(int i =\
    \ 1; i <= n; i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpxi78a9u1: /tmp/tmpxi78a9u1.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzvzf1ji7: /tmp/tmpzvzf1ji7.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzvzf1ji7: /tmp/tmpzvzf1ji7.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp79pa7arc: /tmp/tmp79pa7arc.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8jeye27t: /tmp/tmp8jeye27t.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpf9z_tys2: /tmp/tmpf9z_tys2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // TODO: Implement this\
    \ function\n  if(n==0)\n    return 1;\n  long fact=1;\n  for(int i=1;i<=n;i++)\n\
    \    fact*=i;\n  return fact*special_factorial(n-1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpc4n1v4uu: /tmp/tmpc4n1v4uu.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = 1; i\
    \ <= n; i++) {\n    result *= i;\n  }\n  for (long i = 1; i < n; i++) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp6urho5as: /tmp/tmp6urho5as.cpp:26: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4geezghn: /tmp/tmp4geezghn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvzb1s0ww: /tmp/tmpvzb1s0ww.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = n; i > 0; i--)\n    {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpsfqmiq20: /tmp/tmpsfqmiq20.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpgz7yvdrn: /tmp/tmpgz7yvdrn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpc4n1v4uu: /tmp/tmpc4n1v4uu.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4geezghn: /tmp/tmp4geezghn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // TODO: Your code here\n\
    \  long factorial = 1;\n  for (long i = 1; i <= n; i++) {\n    factorial *= i;\n\
    \  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpnl6wipkr: /tmp/tmpnl6wipkr.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmplsww4gi5: /tmp/tmplsww4gi5.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8jeye27t: /tmp/tmp8jeye27t.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpf9z_tys2: /tmp/tmpf9z_tys2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n      fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpb7elkksd: /tmp/tmpb7elkksd.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4geezghn: /tmp/tmp4geezghn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzvzf1ji7: /tmp/tmpzvzf1ji7.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp273qtmbd: /tmp/tmp273qtmbd.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Your code here\n\
    \    long fact = 1;\n    for(int i = 1; i <= n; i++)\n    {\n        fact = fact\
    \ * i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpddm7bviv: /tmp/tmpddm7bviv.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4geezghn: /tmp/tmp4geezghn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvzb1s0ww: /tmp/tmpvzb1s0ww.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long long fact = 1;\n\
    \  for (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp_8372tdu: /tmp/tmp_8372tdu.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpf9z_tys2: /tmp/tmpf9z_tys2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) return 1;\n\
    \  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp16mx1nbg: /tmp/tmp16mx1nbg.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = n; i > 0; i--) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpwcw9bnsb: /tmp/tmpwcw9bnsb.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzvzf1ji7: /tmp/tmpzvzf1ji7.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = 1; i <= n; i++) {\n    result *= i;\n  }\n  for (long i = n - 1; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpiitxc7_w: /tmp/tmpiitxc7_w.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp273qtmbd: /tmp/tmp273qtmbd.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4geezghn: /tmp/tmp4geezghn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long long int fact=1;\n  for(int i=1;i<=n;i++)\n\
    \  {\n      fact=fact*i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpk8yfepyp: /tmp/tmpk8yfepyp.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = n; i >\
    \ 0; i--) {\n    result *= i;\n  }\n  for (int i = n - 1; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  for (int i = n - 2; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpiain65oo: /tmp/tmpiain65oo.cpp:30: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvzb1s0ww: /tmp/tmpvzb1s0ww.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = 1; i\
    \ <= n; i++) {\n    long factorial = 1;\n    for (long j = 1; j <= i; j++) {\n\
    \      factorial *= j;\n    }\n    result *= factorial;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvzb1s0ww: /tmp/tmpvzb1s0ww.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvzb1s0ww: /tmp/tmpvzb1s0ww.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4geezghn: /tmp/tmp4geezghn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpa_z2jd6i: /tmp/tmpa_z2jd6i.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmppmzuupwi: /tmp/tmppmzuupwi.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  for (int i = 1; i < n; i++) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpro8uas5_: /tmp/tmpro8uas5_.cpp:26: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp273qtmbd: /tmp/tmp273qtmbd.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = 1; i\
    \ <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpg84xtqlz: /tmp/tmpg84xtqlz.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8jeye27t: /tmp/tmp8jeye27t.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpf9z_tys2: /tmp/tmpf9z_tys2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpf9z_tys2: /tmp/tmpf9z_tys2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4geezghn: /tmp/tmp4geezghn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp73f1mr4s: /tmp/tmp73f1mr4s.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8jeye27t: /tmp/tmp8jeye27t.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    long long int fact=1;\n    for(int i=1;i<=n;i++)\n\
    \    {\n        fact=fact*i;\n    }\n    return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpq24u1ksz: /tmp/tmpq24u1ksz.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp9v9zd_j7: /tmp/tmp9v9zd_j7.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++)\n        fact *= i;\n    return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp26xvee83: /tmp/tmp26xvee83.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  int fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n \
    \ }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpdtfaeqeu: /tmp/tmpdtfaeqeu.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long res = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n    res *= i;\n  return res;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxo6qnfqp: /tmp/tmpxo6qnfqp.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmplsww4gi5: /tmp/tmplsww4gi5.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8jeye27t: /tmp/tmp8jeye27t.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n    fact *= i;\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpzdnnrg_3: /tmp/tmpzdnnrg_3.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact=1;\n  for(int i=1;i<=n;i++)\n\
    \  {\n      fact=fact*i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp2igi1t1u: /tmp/tmp2igi1t1u.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long res = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    res *= i;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpsrv0_7np: /tmp/tmpsrv0_7np.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpc4n1v4uu: /tmp/tmpc4n1v4uu.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpf9z_tys2: /tmp/tmpf9z_tys2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvzb1s0ww: /tmp/tmpvzb1s0ww.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzvzf1ji7: /tmp/tmpzvzf1ji7.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmplsww4gi5: /tmp/tmplsww4gi5.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpf9z_tys2: /tmp/tmpf9z_tys2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4geezghn: /tmp/tmp4geezghn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long factorial = 1;\n  for (long i = 1;\
    \ i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpvj6bbya0: /tmp/tmpvj6bbya0.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpimw1djcf: /tmp/tmpimw1djcf.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmplsww4gi5: /tmp/tmplsww4gi5.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzvzf1ji7: /tmp/tmpzvzf1ji7.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long factorial = 1;\n  for (long i = n;\
    \ i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpocvbqi7n: /tmp/tmpocvbqi7n.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) {\n    \
    \    return 1;\n    }\n    long fact = 1;\n    for (int i = 1; i <= n; i++) {\n\
    \        fact *= i;\n    }\n    return fact * special_factorial(n - 1);\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4geezghn: /tmp/tmp4geezghn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long factorial = 1;\n\
    \  for (int i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpzakuvk65: /tmp/tmpzakuvk65.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = n; i > 0; i--)\n        fact *= i;\n    return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpacjviyvx: /tmp/tmpacjviyvx.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8jeye27t: /tmp/tmp8jeye27t.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpf9z_tys2: /tmp/tmpf9z_tys2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpimw1djcf: /tmp/tmpimw1djcf.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Your code here\n  long\
    \ fact = 1;\n  for(int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp216jyqah: /tmp/tmp216jyqah.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4geezghn: /tmp/tmp4geezghn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp79pa7arc: /tmp/tmp79pa7arc.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Your code here\n  long\
    \ fact = 1;\n  for(int i = n; i > 0; i--)\n  {\n    fact *= i;\n  }\n  return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpdpx97db_: /tmp/tmpdpx97db_.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmplsww4gi5: /tmp/tmplsww4gi5.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp79pa7arc: /tmp/tmp79pa7arc.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmplsww4gi5: /tmp/tmplsww4gi5.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmplsww4gi5: /tmp/tmplsww4gi5.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  for (int i = n - 1; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpcfeirbou: /tmp/tmpcfeirbou.cpp:26: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Your code here\n  long\
    \ result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  for\
    \ (long i = n - 1; i > 0; i--) {\n    result *= i;\n  }\n  for (long i = n - 2;\
    \ i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5dtslmvo: /tmp/tmp5dtslmvo.cpp:28: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) {\n    \
    \    return 1;\n    }\n    long result = 1;\n    for (long i = 1; i <= n; i++)\
    \ {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp9zn5hu2d: /tmp/tmp9zn5hu2d.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp79pa7arc: /tmp/tmp79pa7arc.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzvzf1ji7: /tmp/tmpzvzf1ji7.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long factorial = 1;\n\
    \  for (int i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpzakuvk65: /tmp/tmpzakuvk65.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = n; i > 0; i--) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpwcw9bnsb: /tmp/tmpwcw9bnsb.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp4geezghn: /tmp/tmp4geezghn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long factorial = 1;\n  for (long i = n; i > 0; i--) {\n    factorial *= i;\n\
    \  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpf6h4ycak: /tmp/tmpf6h4ycak.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++) {\n    fact *= i;\n  }\n  return fact * special_factorial(n-1);\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660077288
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8jeye27t: /tmp/tmp8jeye27t.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = n; i >\
    \ 0; i--) {\n    result *= i;\n  }\n  for (int i = n-1; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  for (int i = n-2; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpglj702j4: /tmp/tmpglj702j4.cpp:30: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzvzf1ji7: /tmp/tmpzvzf1ji7.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmplsww4gi5: /tmp/tmplsww4gi5.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int i = 1; i <= n;\
    \ i++)\n  {\n    fact = fact * i;\n  }\n  return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp79pa7arc: /tmp/tmp79pa7arc.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvzb1s0ww: /tmp/tmpvzb1s0ww.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) return 1;\n\
    \  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp16mx1nbg: /tmp/tmp16mx1nbg.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long factorial = 1;\n  for (int i = 1; i <= n; i++) {\n    factorial *= i;\n\
    \  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp6qcz1p60: /tmp/tmp6qcz1p60.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpf9z_tys2: /tmp/tmpf9z_tys2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long res = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    res *= i;\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpn9k3rjkt: /tmp/tmpn9k3rjkt.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzvzf1ji7: /tmp/tmpzvzf1ji7.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpc4n1v4uu: /tmp/tmpc4n1v4uu.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzvzf1ji7: /tmp/tmpzvzf1ji7.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long long int fact =\
    \ 1;\n    for(int i = n; i > 0; i--)\n    {\n        fact = fact * i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpczjoai6w: /tmp/tmpczjoai6w.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8jeye27t: /tmp/tmp8jeye27t.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmppmzuupwi: /tmp/tmppmzuupwi.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (long i = n; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpc4n1v4uu: /tmp/tmpc4n1v4uu.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz65ycvi8: /tmp/tmpz65ycvi8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // TODO: implement this\
    \ function\n  long factorial = 1;\n  for (long i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpozk7temb: /tmp/tmpozk7temb.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long ans = 1;\n  for(int i = n; i > 0;\
    \ i--) {\n    ans *= i;\n  }\n  for(int i = n-1; i > 0; i--) {\n    ans *= i;\n\
    \  }\n  for(int i = n-2; i > 0; i--) {\n    ans *= i;\n  }\n  return ans;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp780h_1wk: /tmp/tmp780h_1wk.cpp:30: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long factorial = 1;\n\
    \  for (long i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpzj_wifyn: /tmp/tmpzj_wifyn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpf9z_tys2: /tmp/tmpf9z_tys2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpi15n6s0l: /tmp/tmpi15n6s0l.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = n; i >\
    \ 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp25jkvk_l: /tmp/tmp25jkvk_l.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpphhy77c4: /tmp/tmpphhy77c4.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use printf()\n  // Example:\
    \ printf(\"%s\", \"Hello world!\");\n  long result = 1;\n  for (int i = 1; i <=\
    \ n; i++) {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzvzf1ji7: /tmp/tmpzvzf1ji7.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  for (long i = n - 1; i\
    \ > 0; i--) {\n    result *= i;\n  }\n  for (long i = n - 2; i > 0; i--) {\n \
    \   result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp489v74yb: /tmp/tmp489v74yb.cpp:27: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpf9z_tys2: /tmp/tmpf9z_tys2.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  for (int i = n - 1; i >\
    \ 0; i--) {\n    result *= i;\n  }\n  for (int i = n - 2; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp7c3nr4gk: /tmp/tmp7c3nr4gk.cpp:27: int main(): Assertion `candidate((5))
    == (34560)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  long fact = 1;\n  for(int i = 1; i <= n; i++)\n  {\n    fact = fact * i;\n\
    \  }\n  return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvzb1s0ww: /tmp/tmpvzb1s0ww.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long factorial = 1;\n\
    \  for (int i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpwkbbjb2r: /tmp/tmpwkbbjb2r.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long result = 1;\n  for\
    \ (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfch1xya8: /tmp/tmpfch1xya8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660077279
