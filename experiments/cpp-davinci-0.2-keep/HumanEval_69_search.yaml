name: HumanEval_69_search
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
  \ list of positive integers. Return the greatest integer that is greater than \n\
  // zero, and has a frequency greater than or equal to the value of the integer itself.\
  \ \n// The frequency of an integer is the number of times it appears in the list.\n\
  // If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3,\
  \ 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4,\
  \ 4]) == -1\nlong search(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
  \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
  \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
  \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
  \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
  \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
  \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
  \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
  \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
  \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
  \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
  \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
  \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
  \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) ==\
  \ (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1,\
  \ (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) ==\
  \ (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1,\
  \ (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3,\
  \ (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9,\
  \ (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
  \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
  \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
  \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
  \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
  \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) ==\
  \ (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9,\
  \ (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10,\
  \ (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) ==\
  \ (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7,\
  \ (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1,\
  \ (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9,\
  \ (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2,\
  \ (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7,\
  \ (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n"
completions: ["    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n\
    \    for(auto i : m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "\tstd::map<long, long> m;\n\tfor (auto i : lst) {\n\t\tm[i]++;\n\
    \t}\n\tfor (auto i : m) {\n\t\tif (i.first <= i.second) {\n\t\t\treturn i.first;\n\
    \t\t}\n\t}\n\treturn -1;", "    std::map<long, long> m;\n    for(int i = 0; i\
    \ < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long max = -1;\n    for(auto\
    \ it = m.begin(); it != m.end(); it++) {\n        if(it->first <= it->second &&\
    \ it->first > max) {\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "    std::map<long,long> m;\n    for(auto i:lst)\n        m[i]++;\n \
    \   for(auto i:m)\n        if(i.first<=i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i: lst)\n       \
    \ m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n            return\
    \ i.first;\n    return -1;", "    std::map<long, long> m;\n    for(long i = 0;\
    \ i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long max = -1;\n  \
    \  for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->first <= it->second\
    \ && it->first > max) {\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "    std::map<long, long> m;\n    for(auto i : lst) {\n        m[i]++;\n\
    \    }\n    for(auto i : m) {\n        if(i.first <= i.second) {\n           \
    \ return i.first;\n        }\n    }\n    return -1;", "    std::map<long, long>\
    \ frequency;\n    for (auto i : lst) {\n        frequency[i]++;\n    }\n    for\
    \ (auto i : frequency) {\n        if (i.first <= i.second) {\n            return\
    \ i.first;\n        }\n    }\n    return -1;", "    std::map<long, long> m;\n\
    \    for(int i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long\
    \ max = -1;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->first\
    \ <= it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "    std::map<long, long> map;\n    for(long i = 0;\
    \ i < lst.size(); i++) {\n        map[lst[i]]++;\n    }\n    for(long i = 1; i\
    \ < lst.size(); i++) {\n        if(map[i] >= i) {\n            return i;\n   \
    \     }\n    }\n    return -1;", "  std::unordered_map<long, long> freq;\n  for\
    \ (auto i : lst) {\n    freq[i]++;\n  }\n  for (auto i : lst) {\n    if (i <=\
    \ freq[i]) {\n      return i;\n    }\n  }\n  return -1;", "    std::map<long,\
    \ long> m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++)\
    \ {\n        if(it->first <= it->second && it->first > max) {\n            max\
    \ = it->first;\n        }\n    }\n    return max;", "    std::map<long, long>\
    \ m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> map;\n    for(auto i : lst)\n        map[i]++;\n    for(auto i : map)\n\
    \        if(i.first <= i.second)\n            return i.first;\n    return -1;",
  "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(long i = 0; i < lst.size(); i++)\
    \ {\n        m[lst[i]]++;\n    }\n    long max = -1;\n    for(auto it = m.begin();\
    \ it != m.end(); it++) {\n        if(it->first <= it->second && it->first > max)\
    \ {\n            max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++)\
    \ {\n        if(it->first <= it->second && it->first > max) {\n            max\
    \ = it->first;\n        }\n    }\n    return max;", "    std::map<long, long>\
    \ m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;", "  \
    \  std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(int i = 0; i < lst.size(); i++)\n\
    \        m[lst[i]]++;\n    long max = -1;\n    for(auto it = m.begin(); it !=\
    \ m.end(); it++)\n        if(it->first <= it->second && it->first > max)\n   \
    \         max = it->first;\n    return max;", "    std::map<long, long> m;\n \
    \   for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \ std::map<long, long> freq;\n  for (auto i : lst) {\n    freq[i]++;\n  }\n  long\
    \ max = -1;\n  for (auto i : freq) {\n    if (i.first <= i.second && i.first >\
    \ max) {\n      max = i.first;\n    }\n  }\n  return max;", "    std::map<long,\
    \ long> map;\n    for(auto i : lst)\n        map[i]++;\n    for(auto i : map)\n\
    \        if(i.first <= i.second)\n            return i.first;\n    return -1;",
  "  std::map<long, long> m;\n  for (auto i : lst) {\n    m[i]++;\n  }\n  for (auto\
    \ i : m) {\n    if (i.first <= i.second) {\n      return i.first;\n    }\n  }\n\
    \  return -1;", "    std::map<long, long> m;\n    for(long i = 0; i < lst.size();\
    \ i++) {\n        m[lst[i]]++;\n    }\n    for(long i = lst.size(); i > 0; i--)\
    \ {\n        if(m[i] >= i) {\n            return i;\n        }\n    }\n    return\
    \ -1;", "  std::map<long, long> m;\n  for (auto i : lst) {\n    m[i]++;\n  }\n\
    \  std::map<long, long>::iterator it;\n  for (it = m.begin(); it != m.end(); it++)\
    \ {\n    if (it->first <= it->second) {\n      return it->first;\n    }\n  }\n\
    \  return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n\
    \    for(auto i : m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::unordered_map<long, long> map;\n    for(int i = 0;\
    \ i < lst.size(); i++) {\n        map[lst[i]]++;\n    }\n    long max = -1;\n\
    \    for(auto it = map.begin(); it != map.end(); it++) {\n        if(it->first\
    \ <= it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "    std::unordered_map<long, long> freq;\n    for (auto\
    \ i : lst) {\n        freq[i]++;\n    }\n    long max = -1;\n    for (auto i :\
    \ freq) {\n        if (i.first <= i.second && i.first > max) {\n            max\
    \ = i.first;\n        }\n    }\n    return max;", "    std::map<long, long> m;\n\
    \    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n   \
    \ long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++) {\n      \
    \  if(it->first <= it->second && it->first > max) {\n            max = it->first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> m;\n    for(long\
    \ i = 0; i < lst.size(); i++)\n        m[lst[i]]++;\n    long max = -1;\n    for(auto\
    \ it = m.begin(); it != m.end(); it++)\n        if(it->first <= it->second &&\
    \ it->first > max)\n            max = it->first;\n    return max;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> freq;\n    for(auto i : lst)\n        freq[i]++;\n\
    \    for(auto i : freq)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n      \
    \  m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n           \
    \ return i.first;\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "  std::map<long, long> m;\n  for\
    \ (auto i : lst) {\n    m[i]++;\n  }\n  for (auto i : m) {\n    if (i.first <=\
    \ i.second) {\n      return i.first;\n    }\n  }\n  return -1;", "    std::map<long,\
    \ long> freq;\n    for(auto i : lst)\n        freq[i]++;\n    for(auto i : freq)\n\
    \        if(i.first <= i.second)\n            return i.first;\n    return -1;",
  "    std::map<long, long> freq;\n    for(auto i : lst)\n        freq[i]++;\n   \
    \ for(auto i : freq)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> freq;\n    for(auto i : lst)\n   \
    \     freq[i]++;\n    for(auto i : freq)\n        if(i.first <= i.second)\n  \
    \          return i.first;\n    return -1;", "    std::map<long, long> m;\n  \
    \  for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> freq;\n    for(auto i : lst)\n        freq[i]++;\n    for(auto i : freq)\n\
    \        if(i.first <= i.second)\n            return i.first;\n    return -1;",
  "    std::map<long, long> m;\n    for(long i = 0; i < lst.size(); i++) {\n     \
    \   m[lst[i]]++;\n    }\n    long max = -1;\n    for(auto it = m.begin(); it !=\
    \ m.end(); it++) {\n        if(it->first <= it->second && it->first > max) {\n\
    \            max = it->first;\n        }\n    }\n    return max;", "  std::map<long,\
    \ long> freq;\n  for (auto i : lst) {\n    freq[i]++;\n  }\n  for (auto i : lst)\
    \ {\n    if (i > 0 && freq[i] >= i) {\n      return i;\n    }\n  }\n  return -1;",
  "    std::map<long, long> freq;\n    for(auto i : lst) {\n        freq[i]++;\n \
    \   }\n    for(auto i : freq) {\n        if(i.first <= i.second) {\n         \
    \   return i.first;\n        }\n    }\n    return -1;", "    std::map<long, long>\
    \ freq;\n    for(auto x: lst) {\n        freq[x]++;\n    }\n    for(auto x: freq)\
    \ {\n        if(x.first <= x.second) {\n            return x.first;\n        }\n\
    \    }\n    return -1;", "    long max = -1;\n    std::map<long, long> m;\n  \
    \  for(auto i : lst) {\n        if(m.find(i) == m.end()) {\n            m[i] =\
    \ 1;\n        } else {\n            m[i]++;\n        }\n    }\n    for(auto i\
    \ : m) {\n        if(i.first <= i.second && i.first > max) {\n            max\
    \ = i.first;\n        }\n    }\n    return max;", "    std::map<long, long> m;\n\
    \    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::unordered_map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> m;\n    for(auto i : lst) {\n        m[i]++;\n    }\n\
    \    for(auto i : m) {\n        if(i.first <= i.second) {\n            return\
    \ i.first;\n        }\n    }\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> m;\n    for(long i = 0; i < lst.size(); i++) {\n    \
    \    m[lst[i]]++;\n    }\n    long max = -1;\n    for(auto itr = m.begin(); itr\
    \ != m.end(); itr++) {\n        if(itr->first <= itr->second && itr->first > max)\
    \ {\n            max = itr->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n\
    \    for(auto i : m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n      \
    \  m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n           \
    \ return i.first;\n    return -1;", "  std::map<long, long> m;\n  for (auto i\
    \ : lst) {\n    m[i]++;\n  }\n  long max = -1;\n  for (auto i : m) {\n    if (i.first\
    \ <= i.second && i.first > max) {\n      max = i.first;\n    }\n  }\n  return\
    \ max;", "  // your code here\n  std::map<long,long> m;\n  for(auto i:lst)\n \
    \ {\n    m[i]++;\n  }\n  for(auto i:m)\n  {\n    if(i.first<=i.second)\n    {\n\
    \      return i.first;\n    }\n  }\n  return -1;", "    std::map<long, long> m;\n\
    \    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n   \
    \ long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++) {\n      \
    \  if(it->first <= it->second && it->first > max) {\n            max = it->first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> freq;\n    for(auto\
    \ i : lst)\n        freq[i]++;\n    for(auto i : freq)\n        if(i.first <=\
    \ i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n\
    \    for(auto i : m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i: lst)\n       \
    \ m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n            return\
    \ i.first;\n    return -1;", "  std::map<long, long> m;\n  for (long i : lst)\
    \ {\n    m[i]++;\n  }\n  for (auto it = m.rbegin(); it != m.rend(); it++) {\n\
    \    if (it->first <= it->second) {\n      return it->first;\n    }\n  }\n  return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n\
    \    for(auto i : m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n      \
    \  m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n           \
    \ return i.first;\n    return -1;", "    std::map<long, long> m;\n    for(long\
    \ i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long max = -1;\n\
    \    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->first <=\
    \ it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "    std::map<long, long> m;\n    for(auto i : lst)\n\
    \        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n     \
    \       return i.first;\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i: lst) {\n        m[i]++;\n    }\n    for(auto i: m) {\n        if(i.first\
    \ <= i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "    std::map<long, long> m;\n    for(int i = 0; i < lst.size(); i++) {\n      \
    \  m[lst[i]]++;\n    }\n    long max = -1;\n    for(auto it = m.begin(); it !=\
    \ m.end(); it++) {\n        if(it->first <= it->second && it->first > max) {\n\
    \            max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> freq;\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    std::map<long, long>::iterator it;\n    for(it = freq.begin(); it\
    \ != freq.end(); it++) {\n        if(it->first <= it->second) {\n            return\
    \ it->first;\n        }\n    }\n    return -1;", "    std::map<long, long> m;\n\
    \    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n   \
    \ std::map<long, long>::iterator it;\n    for(it = m.begin(); it != m.end(); it++)\
    \ {\n        if(it->first <= it->second) {\n            return it->first;\n  \
    \      }\n    }\n    return -1;", "  // your code here\n  std::map<long,long>\
    \ m;\n  for(auto i:lst)\n  {\n    m[i]++;\n  }\n  for(auto i:m)\n  {\n    if(i.first<=i.second)\n\
    \    {\n      return i.first;\n    }\n  }\n  return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> freq;\n    for(auto i : lst)\n        freq[i]++;\n  \
    \  for(auto i : freq)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> freq;\n    for(auto i : lst)\n   \
    \     freq[i]++;\n    for(auto i : freq)\n        if(i.first <= i.second)\n  \
    \          return i.first;\n    return -1;", "    std::map<long, long> m;\n  \
    \  for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> freq;\n    for(auto i : lst)\n        freq[i]++;\n  \
    \  for(auto i : freq)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long,long> m;\n    for(auto i:lst)\n        m[i]++;\n\
    \    for(auto i:m)\n        if(i.first<=i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto x: lst)\n       \
    \ m[x]++;\n    for(auto x: m)\n        if(x.first <= x.second)\n            return\
    \ x.first;\n    return -1;", "    std::map<long,long> m;\n    for(auto i:lst)\n\
    \        m[i]++;\n    for(auto i:m)\n        if(i.first<=i.second)\n         \
    \   return i.first;\n    return -1;", "    std::map<long, long> freq;\n    for(long\
    \ i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n    for(long\
    \ i = lst.size(); i > 0; i--) {\n        if(freq[i] >= i) {\n            return\
    \ i;\n        }\n    }\n    return -1;", "\tstd::map<long, long> m;\n\tfor (int\
    \ i = 0; i < lst.size(); i++) {\n\t\tm[lst[i]]++;\n\t}\n\tfor (int i = lst.size()\
    \ - 1; i >= 0; i--) {\n\t\tif (m[lst[i]] >= lst[i]) {\n\t\t\treturn lst[i];\n\t\
    \t}\n\t}\n\treturn -1;", "    std::map<long, long> m;\n    for(auto x: lst)\n\
    \        m[x]++;\n    for(auto x: m)\n        if(x.first <= x.second)\n      \
    \      return x.first;\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto x: lst)\n        m[x]++;\n    for(auto x: m)\n      \
    \  if(x.first <= x.second)\n            return x.first;\n    return -1;", "  \
    \  std::unordered_map<long, long> freq;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n        if (it->first <= it->second\
    \ && it->first > max) {\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "    std::map<long, long> m;\n    for(auto x: lst)\n        m[x]++;\n\
    \    for(auto x: m)\n        if(x.first <= x.second)\n            return x.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n      \
    \  m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n           \
    \ return i.first;\n    return -1;", "    std::map<long, long> m;\n    for(long\
    \ i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long max = -1;\n\
    \    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->first <=\
    \ it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "  std::map<long, long> m;\n  for (auto i : lst) {\n\
    \    m[i]++;\n  }\n  for (auto i : m) {\n    if (i.first <= i.second) {\n    \
    \  return i.first;\n    }\n  }\n  return -1;", "    std::map<long, long> m;\n\
    \    for(auto i : lst) {\n        m[i]++;\n    }\n    for(auto i : m) {\n    \
    \    if(i.first <= i.second) {\n            return i.first;\n        }\n    }\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i: lst)\n       \
    \ m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n            return\
    \ i.first;\n    return -1;", "    std::unordered_map<long, long> m;\n    for(auto\
    \ i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::unordered_map<long, long>\
    \ freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = lst.size(); i > 0; i--) {\n        if (freq[i] >= i)\
    \ {\n            return i;\n        }\n    }\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(int i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    std::map<long, long>::iterator it;\n    long max = -1;\n    for(it\
    \ = m.begin(); it != m.end(); it++) {\n        if(it->first <= it->second && it->first\
    \ > max) {\n            max = it->first;\n        }\n    }\n    return max;",
  "    std::map<long, long> freq;\n    for(auto i : lst)\n        freq[i]++;\n   \
    \ for(auto i : freq)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> freq;\n    for(auto i : lst)\n   \
    \     freq[i]++;\n    for(auto i : freq)\n        if(i.first <= i.second)\n  \
    \          return i.first;\n    return -1;", "    std::map<long, long> m;\n  \
    \  for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(int i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++)\
    \ {\n        if(it->first <= it->second && it->first > max) {\n            max\
    \ = it->first;\n        }\n    }\n    return max;", "    std::map<long, long>\
    \ m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "  std::map<long,\
    \ long> m;\n  for (auto i : lst) {\n    m[i]++;\n  }\n  for (auto i : m) {\n \
    \   if (i.first <= i.second) {\n      return i.first;\n    }\n  }\n  return -1;",
  "    std::map<long, long> m;\n    for(long i = 0; i < lst.size(); i++) {\n     \
    \   m[lst[i]]++;\n    }\n    long max = -1;\n    for(auto it = m.begin(); it !=\
    \ m.end(); it++) {\n        if(it->first <= it->second && it->first > max) {\n\
    \            max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    std::map<long, long>::iterator it;\n    for(it = m.begin(); it !=\
    \ m.end(); it++) {\n        if(it->first <= it->second) {\n            return\
    \ it->first;\n        }\n    }\n    return -1;", "    std::unordered_map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second && i.first\
    \ > max) {\n            max = i.first;\n        }\n    }\n    return max;", " \
    \   std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::unordered_map<long, long> freq;\n    for (long i : lst) {\n\
    \        freq[i]++;\n    }\n    for (long i : lst) {\n        if (i <= freq[i])\
    \ {\n            return i;\n        }\n    }\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> map;\n    for(long i = 0; i < lst.size(); i++) {\n  \
    \      map[lst[i]]++;\n    }\n    long max = -1;\n    for(auto it = map.begin();\
    \ it != map.end(); it++) {\n        if(it->first <= it->second && it->first >\
    \ max) {\n            max = it->first;\n        }\n    }\n    return max;", " \
    \   std::map<long, long> m;\n    for(auto i : lst) {\n        m[i]++;\n    }\n\
    \    for(auto i : m) {\n        if(i.first <= i.second) {\n            return\
    \ i.first;\n        }\n    }\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::unordered_map<long, long> m;\n    for(auto i: lst)\n        m[i]++;\n\
    \    for(auto i: m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        m[lst[i]]++;\n    }\n    long max = -1;\n    for(auto it = m.begin();\
    \ it != m.end(); it++) {\n        if(it->first <= it->second && it->first > max)\
    \ {\n            max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first<=i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "  std::map<long, long> m;\n  for (auto i : lst) {\n    m[i]++;\n  }\n\
    \  long max = -1;\n  for (auto i : m) {\n    if (i.first <= i.second && i.first\
    \ > max) {\n      max = i.first;\n    }\n  }\n  return max;", "  std::map<long,\
    \ long> m;\n  for (auto i : lst) {\n    m[i]++;\n  }\n  for (auto i : m) {\n \
    \   if (i.first <= i.second) {\n      return i.first;\n    }\n  }\n  return -1;",
  "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n\
    \    for(auto i : m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "  std::map<long, long> m;\n  for (auto i : lst) {\n    m[i]++;\n\
    \  }\n  long max = -1;\n  for (auto i : m) {\n    if (i.first <= i.second && i.first\
    \ > max) {\n      max = i.first;\n    }\n  }\n  return max;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::unordered_map<long, long> freq;\n    for (long i : lst) {\n        freq[i]++;\n\
    \    }\n    long max = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second && it->first > max) {\n       \
    \     max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(int i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++)\
    \ {\n        if(it->first <= it->second && it->first > max) {\n            max\
    \ = it->first;\n        }\n    }\n    return max;", "    std::map<long, long>\
    \ freq;\n    for(auto i : lst)\n        freq[i]++;\n    for(auto i : freq)\n \
    \       if(i.first <= i.second)\n            return i.first;\n    return -1;",
  "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n\
    \    for(auto i : m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n      \
    \  m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n           \
    \ return i.first;\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "  std::map<long, long> m;\n  for (auto i : lst) {\n    m[i]++;\n  }\n\
    \  for (auto i : m) {\n    if (i.first <= i.second) {\n      return i.first;\n\
    \    }\n  }\n  return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n\
    \        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n     \
    \       return i.first;\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for(auto i = m.begin(); i != m.end(); i++) {\n\
    \        if(i->first <= i->second && i->first > max) {\n            max = i->first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> m;\n    for(auto\
    \ i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++)\
    \ {\n        if(it->first <= it->second && it->first > max) {\n            max\
    \ = it->first;\n        }\n    }\n    return max;", "    std::map<long,long> m;\n\
    \    for(auto i:lst)\n        m[i]++;\n    for(auto i:m)\n        if(i.first<=i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(int i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long\
    \ max = -1;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->first\
    \ <= it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "  std::map<long, long> map;\n  for (auto i : lst) {\n\
    \    if (map.find(i) == map.end()) {\n      map[i] = 1;\n    } else {\n      map[i]++;\n\
    \    }\n  }\n  long max = -1;\n  for (auto i : map) {\n    if (i.first <= i.second\
    \ && i.first > max) {\n      max = i.first;\n    }\n  }\n  return max;", "  std::map<long,\
    \ long> m;\n  for (auto i : lst) {\n    m[i]++;\n  }\n  long max = -1;\n  for\
    \ (auto i : m) {\n    if (i.first >= i.second && i.first > max) {\n      max =\
    \ i.first;\n    }\n  }\n  return max;", "    std::map<long, long> m;\n    for(auto\
    \ i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++)\
    \ {\n        if(it->first <= it->second && it->first > max) {\n            max\
    \ = it->first;\n        }\n    }\n    return max;", "    std::map<long, long>\
    \ m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst) {\n        m[i]++;\n    }\n    for(auto i :\
    \ m) {\n        if(i.first <= i.second) {\n            return i.first;\n     \
    \   }\n    }\n    return -1;", "\tstd::map<long, long> m;\n\tfor (long i = 0;\
    \ i < lst.size(); i++) {\n\t\tm[lst[i]]++;\n\t}\n\tlong max = -1;\n\tfor (auto\
    \ it = m.begin(); it != m.end(); it++) {\n\t\tif (it->first <= it->second && it->first\
    \ > max) {\n\t\t\tmax = it->first;\n\t\t}\n\t}\n\treturn max;", "    std::map<long,\
    \ long> m;\n    for(long i = 0; i < lst.size(); i++)\n        m[lst[i]]++;\n \
    \   for(long i = lst.size(); i > 0; i--)\n        if(m[i] >= i)\n            return\
    \ i;\n    return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n \
    \       m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n      \
    \      return i.first;\n    return -1;", "    std::map<long, long> m;\n    for(long\
    \ i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long max = -1;\n\
    \    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->first <=\
    \ it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "    std::map<long, long> m;\n    for(auto i : lst)\n\
    \        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n     \
    \       return i.first;\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i: lst) {\n        m[i]++;\n    }\n    for(auto i: m) {\n        if(i.first\
    \ <= i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i: lst)\n        m[i]++;\n\
    \    for(auto i: m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "  std::map<long, long> m;\n  for (auto i : lst) {\n    m[i]++;\n\
    \  }\n  for (auto i : m) {\n    if (i.first <= i.second) {\n      return i.first;\n\
    \    }\n  }\n  return -1;", "    // your code here\n    std::map<long, long> m;\n\
    \    for(long i = 0; i < lst.size(); i++)\n    {\n        m[lst[i]]++;\n    }\n\
    \    std::map<long, long>::iterator it;\n    long max = -1;\n    for(it = m.begin();\
    \ it != m.end(); it++)\n    {\n        if(it->first <= it->second && it->first\
    \ > max)\n        {\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "    std::unordered_map<long, long> map;\n    for(auto i : lst)\n   \
    \     map[i]++;\n    for(auto i : lst)\n        if(map[i] >= i)\n            return\
    \ i;\n    return -1;", "    std::map<long, long> m;\n    for(long i = 0; i < lst.size();\
    \ i++) {\n        m[lst[i]]++;\n    }\n    long max = -1;\n    for(auto it = m.begin();\
    \ it != m.end(); it++) {\n        if(it->first <= it->second && it->first > max)\
    \ {\n            max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> m;\n    for(int i = 0; i < lst.size(); i++) {\n     \
    \   m[lst[i]]++;\n    }\n    std::map<long, long>::iterator it;\n    for(it =\
    \ m.begin(); it != m.end(); it++) {\n        if(it->first <= it->second) {\n \
    \           return it->first;\n        }\n    }\n    return -1;", "  std::map<long,\
    \ long> m;\n  for (long i = 0; i < lst.size(); i++) {\n    m[lst[i]]++;\n  }\n\
    \  long max = -1;\n  for (std::map<long, long>::iterator it = m.begin(); it !=\
    \ m.end(); it++) {\n    if (it->first <= it->second && it->first > max) {\n  \
    \    max = it->first;\n    }\n  }\n  return max;", "    std::map<long, long> m;\n\
    \    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> freq;\n    for(auto i : lst) {\n        freq[i]++;\n\
    \    }\n    for(auto i : freq) {\n        if(i.first <= i.second) {\n        \
    \    return i.first;\n        }\n    }\n    return -1;", "  std::unordered_map<long,\
    \ long> map;\n  for (auto i : lst) {\n    map[i]++;\n  }\n  long max = -1;\n \
    \ for (auto i : map) {\n    if (i.first <= i.second && i.first > max) {\n    \
    \  max = i.first;\n    }\n  }\n  return max;", "    std::map<long, long> freq;\n\
    \    for(auto i : lst) {\n        freq[i]++;\n    }\n    for(auto i : freq) {\n\
    \        if(i.first <= i.second) {\n            return i.first;\n        }\n \
    \   }\n    return -1;", "    std::map<long, long> m;\n    for(auto i : lst) {\n\
    \        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.first <= i.second)\
    \ {\n            return i.first;\n        }\n    }\n    return -1;", "    std::sort(lst.begin(),\
    \ lst.end());\n    std::map<long, long> m;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        m[lst[i]]++;\n    }\n    std::map<long, long>::iterator it =\
    \ m.begin();\n    while(it != m.end()) {\n        if(it->first <= it->second)\
    \ {\n            return it->first;\n        }\n        it++;\n    }\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n\
    \    for(auto i : m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i: lst) {\n     \
    \   m[i]++;\n    }\n    for(auto i: m) {\n        if(i.first <= i.second) {\n\
    \            return i.first;\n        }\n    }\n    return -1;", "  std::map<long,\
    \ long> m;\n  for (auto i : lst) {\n    m[i]++;\n  }\n  for (auto i : m) {\n \
    \   if (i.first <= i.second) {\n      return i.first;\n    }\n  }\n  return -1;",
  "    std::map<long, long> freq;\n    for(int i = 0; i < lst.size(); i++) {\n   \
    \     freq[lst[i]]++;\n    }\n    for(int i = lst.size(); i > 0; i--) {\n    \
    \    if(freq[i] >= i) {\n            return i;\n        }\n    }\n    return -1;",
  "    std::map<long, long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto\
    \ i: m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i: lst)\n        m[i]++;\n\
    \    for(auto i: m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i: lst)\n       \
    \ m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n            return\
    \ i.first;\n    return -1;", "    std::map<long, long> m;\n    for(long i = 0;\
    \ i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long max = -1;\n  \
    \  for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->first <= it->second\
    \ && it->first > max) {\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n\
    \    for(auto i : m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        m[lst[i]]++;\n    }\n    for(int i = lst.size() - 1; i >= 0;\
    \ i--) {\n        if(m[lst[i]] >= lst[i]) {\n            return lst[i];\n    \
    \    }\n    }\n    return -1;", "    std::map<long, long> m;\n    for(auto i :\
    \ lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> freq;\n\
    \    for(auto i : lst)\n        freq[i]++;\n    for(auto i : freq)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "  std::map<long,\
    \ long> m;\n  for (auto i : lst) {\n    m[i]++;\n  }\n  for (auto i : m) {\n \
    \   if (i.first <= i.second) {\n      return i.first;\n    }\n  }\n  return -1;",
  "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i: lst)\n        m[i]++;\n\
    \    for(auto i: m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n      \
    \  m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n           \
    \ return i.first;\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(long i=0; i<lst.size(); i++) {\n        m[lst[i]]++;\n   \
    \ }\n    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++) {\n\
    \        if(it->first <= it->second && it->first > max) {\n            max = it->first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> m;\n    for(auto\
    \ i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i : lst) {\n        m[i]++;\n    }\n    for(auto i : m) {\n    \
    \    if(i.first <= i.second) {\n            return i.first;\n        }\n    }\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n      \
    \  m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n           \
    \ return i.first;\n    return -1;"]
stop_tokens:
- "\n}"
