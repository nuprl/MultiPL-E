language: cpp
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto n : numbers) {\n        sum += n;\n\
    \        product *= n;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto &number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (auto i : numbers) {\n    sum += i;\n    product\
    \ *= i;\n  }\n  return std::make_tuple(sum, product);\n}\nint main() {\n    auto\
    \ candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})))\
    \ == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto num : numbers) {\n        sum +=\
    \ num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);\n\
    }\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n\tlong sum =\
    \ 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\
    sum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum\
    \ += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (auto i : numbers) {\n    sum += i;\n    product\
    \ *= i;\n  }\n  return std::make_tuple(sum, product);\n}\nint main() {\n    auto\
    \ candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})))\
    \ == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (auto i : numbers) {\n    sum += i;\n    product\
    \ *= i;\n  }\n  return std::make_tuple(sum, product);\n}\nint main() {\n    auto\
    \ candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})))\
    \ == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto &number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (long i = 0; i < numbers.size(); i++) {\n   \
    \ sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (auto number : numbers) {\n    sum += number;\n\
    \    product *= number;\n  }\n  return std::make_tuple(sum, product);\n}\nint\
    \ main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto& n : numbers) {\n        sum += n;\n\
    \        product *= n;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (auto n : numbers) {\n    sum += n;\n    product\
    \ *= n;\n  }\n  return std::make_tuple(sum, product);\n}\nint main() {\n    auto\
    \ candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})))\
    \ == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum\
    \ += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum\
    \ += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum\
    \ += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto num : numbers) {\n        sum +=\
    \ num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);\n\
    }\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto num : numbers) {\n        sum +=\
    \ num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);\n\
    }\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum\
    \ += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum\
    \ += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum\
    \ += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto num : numbers) {\n        sum +=\
    \ num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);\n\
    }\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n\tlong sum =\
    \ 0;\n\tlong product = 1;\n\tfor (auto i : numbers) {\n\t\tsum += i;\n\t\tproduct\
    \ *= i;\n\t}\n\treturn std::make_tuple(sum, product);\n}\nint main() {\n    auto\
    \ candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})))\
    \ == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (long number : numbers) {\n    sum += number;\n\
    \    product *= number;\n  }\n  return std::make_tuple(sum, product);\n}\nint\
    \ main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (auto i : numbers) {\n    sum += i;\n    product\
    \ *= i;\n  }\n  return std::make_tuple(sum, product);\n}\nint main() {\n    auto\
    \ candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})))\
    \ == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto num : numbers) {\n        sum +=\
    \ num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);\n\
    }\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto num : numbers) {\n        sum +=\
    \ num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);\n\
    }\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (long number : numbers) {\n    sum += number;\n\
    \    product *= number;\n  }\n  return std::make_tuple(sum, product);\n}\nint\
    \ main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (auto number : numbers) {\n    sum += number;\n\
    \    product *= number;\n  }\n  return std::make_tuple(sum, product);\n}\nint\
    \ main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (auto number : numbers) {\n    sum += number;\n\
    \    product *= number;\n  }\n  return std::make_tuple(sum, product);\n}\nint\
    \ main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (auto i : numbers) {\n    sum += i;\n    product\
    \ *= i;\n  }\n  return std::make_tuple(sum, product);\n}\nint main() {\n    auto\
    \ candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})))\
    \ == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (long number : numbers) {\n    sum += number;\n\
    \    product *= number;\n  }\n  return std::make_tuple(sum, product);\n}\nint\
    \ main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (auto num : numbers) {\n    sum += num;\n   \
    \ product *= num;\n  }\n  return std::make_tuple(sum, product);\n}\nint main()\
    \ {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto n : numbers) {\n        sum += n;\n\
    \        product *= n;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (auto i : numbers) {\n    sum += i;\n    product\
    \ *= i;\n  }\n  return std::make_tuple(sum, product);\n}\nint main() {\n    auto\
    \ candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})))\
    \ == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n  long sum =\
    \ 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum\
    \ += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);\n}\n\
    int main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);\n}\nint main() {\n    auto candidate = sum_product;\n\
    \    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3,\
    \ 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100,\
    \ 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7})))\
    \ == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto num : numbers) {\n        sum +=\
    \ num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);\n\
    }\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    // Empty sum should be equal to 0 and empty product should be equal to 1.\n//\
    \ >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n\
    std::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);\n}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
    \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
    \ == (std::make_tuple(10, 10)));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
