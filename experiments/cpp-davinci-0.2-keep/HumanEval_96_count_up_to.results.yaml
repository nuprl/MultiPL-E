name: HumanEval_96_count_up_to
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= std::sqrt(i); j++) {\n            if (i % j == 0) {\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if (isPrime) {\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  std::vector<long> primes;\n  for (long\
    \ i = 2; i < n; i++) {\n    bool is_prime = true;\n    for (long j = 2; j < i;\
    \ j++) {\n      if (i % j == 0) {\n        is_prime = false;\n        break;\n\
    \      }\n    }\n    if (is_prime) {\n      primes.push_back(i);\n    }\n  }\n\
    \  return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  std::vector<long> primes;\n  for (long\
    \ i = 2; i < n; i++) {\n    bool is_prime = true;\n    for (long j = 2; j < i;\
    \ j++) {\n      if (i % j == 0) {\n        is_prime = false;\n        break;\n\
    \      }\n    }\n    if (is_prime) {\n      primes.push_back(i);\n    }\n  }\n\
    \  return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n <= 1) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    for (long i = 2; i < n; i++)\
    \ {\n        bool isPrime = true;\n        for (long j = 2; j < i; j++) {\n  \
    \          if (i % j == 0) {\n                isPrime = false;\n             \
    \   break;\n            }\n        }\n        if (isPrime) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= i / 2; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  std::vector<long> primes;\n  if (n\
    \ < 2) {\n    return primes;\n  }\n  primes.push_back(2);\n  for (long i = 3;\
    \ i < n; i++) {\n    bool is_prime = true;\n    for (long j = 0; j < primes.size();\
    \ j++) {\n      if (i % primes[j] == 0) {\n        is_prime = false;\n       \
    \ break;\n      }\n    }\n    if (is_prime) {\n      primes.push_back(i);\n  \
    \  }\n  }\n  return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              is_prime = false;\n                break;\n            }\n    \
    \    }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              is_prime = false;\n                break;\n            }\n    \
    \    }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n == 0) {\n        return result;\n    }\n    for (long i = 2; i < n; i++)\
    \ {\n        bool isPrime = true;\n        for (long j = 2; j < i; j++) {\n  \
    \          if (i % j == 0) {\n                isPrime = false;\n             \
    \   break;\n            }\n        }\n        if (isPrime) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= std::sqrt(i); j += 2) {\n            if (i % j == 0) {\n       \
    \         isPrime = false;\n                break;\n            }\n        }\n\
    \        if (isPrime) {\n            result.push_back(i);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n <= 1) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            primes.push_back(i);\n        }\n    }\n    return\
    \ primes;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j * j <= i; j += 2) {\n            if (i % j == 0) {\n              \
    \  isPrime = false;\n                break;\n            }\n        }\n      \
    \  if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= i / 2; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) return primes;\n    primes.push_back(2);\n    for (long i = 3; i < n;\
    \ i += 2) {\n        bool isPrime = true;\n        for (long j = 0; j < primes.size();\
    \ j++) {\n            if (i % primes[j] == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) primes.push_back(i);\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= i / 2; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n == 0) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: "tmpgtr0jip_: /tmp/tmpgtr0jip_.cpp:40: int main(): Assertion `candidate((1))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j * j <= i; j += 2) {\n            if (i % j == 0) {\n              \
    \  isPrime = false;\n                break;\n            }\n        }\n      \
    \  if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  std::vector<long> result;\n  if (n\
    \ < 2) {\n    return result;\n  }\n  result.push_back(2);\n  for (long i = 3;\
    \ i < n; i += 2) {\n    bool isPrime = true;\n    for (long j = 3; j < i; j +=\
    \ 2) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n  \
    \    }\n    }\n    if (isPrime) {\n      result.push_back(i);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= i / 2; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> v;\n    if(n <\
    \ 2) return v;\n    for(long i = 2; i < n; i++) {\n        bool isPrime = true;\n\
    \        for(long j = 2; j <= i/2; j++) {\n            if(i % j == 0) {\n    \
    \            isPrime = false;\n                break;\n            }\n       \
    \ }\n        if(isPrime) v.push_back(i);\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < result.size(); j++) {\n            if (i % result[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            result.push_back(i);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n == 0) {\n        return primes;\n    }\n    if (n == 1) {\n        return\
    \ primes;\n    }\n    if (n == 2) {\n        primes.push_back(2);\n        return\
    \ primes;\n    }\n    primes.push_back(2);\n    for (long i = 3; i < n; i++) {\n\
    \        bool isPrime = true;\n        for (long j = 2; j <= sqrt(i); j++) {\n\
    \            if (i % j == 0) {\n                isPrime = false;\n           \
    \     break;\n            }\n        }\n        if (isPrime) {\n            primes.push_back(i);\n\
    \        }\n    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> v;\n    if(n<=1)\n\
    \        return v;\n    v.push_back(2);\n    for(long i=3;i<n;i+=2)\n    {\n \
    \       bool isPrime = true;\n        for(long j=2;j<=sqrt(i);j++)\n        {\n\
    \            if(i%j==0)\n            {\n                isPrime = false;\n   \
    \             break;\n            }\n        }\n        if(isPrime)\n        \
    \    v.push_back(i);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n\
    \    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n\
    \    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n    assert(candidate((22))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19})));\n    assert(candidate((1)) == (std::vector<long>()));\n\
    \    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23,\
    \ (long)29, (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  std::vector<long> result;\n  if (n\
    \ <= 1) {\n    return result;\n  }\n  result.push_back(2);\n  for (long i = 3;\
    \ i < n; i += 2) {\n    bool isPrime = true;\n    for (long j = 2; j <= sqrt(i);\
    \ j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      result.push_back(i);\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> v;\n    if(n<=1)\
    \ return v;\n    v.push_back(2);\n    for(long i=3;i<n;i+=2){\n        bool is_prime\
    \ = true;\n        for(long j=3;j<i;j+=2){\n            if(i%j==0){\n        \
    \        is_prime = false;\n                break;\n            }\n        }\n\
    \        if(is_prime) v.push_back(i);\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> v;\n    if(n<=1)\
    \ return v;\n    v.push_back(2);\n    for(long i=3;i<n;i+=2){\n        bool isPrime\
    \ = true;\n        for(long j=2;j<=sqrt(i);j++){\n            if(i%j==0){\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if(isPrime) v.push_back(i);\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    for\
    \ (long i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              is_prime = false;\n                break;\n            }\n    \
    \    }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  std::vector<long> result;\n  if (n\
    \ <= 1) {\n    return result;\n  }\n  result.push_back(2);\n  for (long i = 3;\
    \ i < n; i += 2) {\n    bool isPrime = true;\n    for (long j = 2; j <= sqrt(i);\
    \ j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      result.push_back(i);\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (auto\
    \ prime : result) {\n            if (i % prime == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> v;\n    if(n==0)\n\
    \        return v;\n    if(n==1)\n        return v;\n    if(n==2)\n    {\n   \
    \     v.push_back(2);\n        return v;\n    }\n    v.push_back(2);\n    for(long\
    \ i=3;i<n;i++)\n    {\n        bool flag=true;\n        for(long j=2;j<=sqrt(i);j++)\n\
    \        {\n            if(i%j==0)\n            {\n                flag=false;\n\
    \                break;\n            }\n        }\n        if(flag)\n        \
    \    v.push_back(i);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n\
    \    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n\
    \    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n    assert(candidate((22))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19})));\n    assert(candidate((1)) == (std::vector<long>()));\n\
    \    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23,\
    \ (long)29, (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n == 0) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: "tmp0qgbb8qy: /tmp/tmp0qgbb8qy.cpp:40: int main(): Assertion `candidate((1))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n <= 1) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  std::vector<long> primes;\n  if (n\
    \ < 2) {\n    return primes;\n  }\n  primes.push_back(2);\n  for (long i = 3;\
    \ i < n; i += 2) {\n    bool is_prime = true;\n    for (long j = 0; j < primes.size();\
    \ j++) {\n      if (i % primes[j] == 0) {\n        is_prime = false;\n       \
    \ break;\n      }\n    }\n    if (is_prime) {\n      primes.push_back(i);\n  \
    \  }\n  }\n  return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) return result;\n    result.push_back(2);\n    for (long i = 3; i <\
    \ n; i++) {\n        bool isPrime = true;\n        for (long j = 2; j < i; j++)\
    \ {\n            if (i % j == 0) {\n                isPrime = false;\n       \
    \         break;\n            }\n        }\n        if (isPrime) result.push_back(i);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n <= 1) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  std::vector<long> primes;\n  if (n\
    \ < 2) {\n    return primes;\n  }\n  primes.push_back(2);\n  for (long i = 3;\
    \ i < n; i += 2) {\n    bool is_prime = true;\n    for (long j = 3; j < i; j +=\
    \ 2) {\n      if (i % j == 0) {\n        is_prime = false;\n        break;\n \
    \     }\n    }\n    if (is_prime) {\n      primes.push_back(i);\n    }\n  }\n\
    \  return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              is_prime = false;\n                break;\n            }\n    \
    \    }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) return primes;\n    primes.push_back(2);\n    for (long i = 3; i < n;\
    \ i += 2) {\n        bool is_prime = true;\n        for (long j = 3; j < i; j\
    \ += 2) {\n            if (i % j == 0) {\n                is_prime = false;\n\
    \                break;\n            }\n        }\n        if (is_prime) primes.push_back(i);\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j * j <= i; j += 2) {\n            if (i % j == 0) {\n              \
    \  isPrime = false;\n                break;\n            }\n        }\n      \
    \  if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> v;\n    if(n<=1)\
    \ return v;\n    v.push_back(2);\n    for(long i=3;i<n;i+=2){\n        bool isPrime\
    \ = true;\n        for(long j=3;j<=sqrt(i);j+=2){\n            if(i%j==0){\n \
    \               isPrime = false;\n                break;\n            }\n    \
    \    }\n        if(isPrime) v.push_back(i);\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n == 0) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: "tmpdt3lruse: /tmp/tmpdt3lruse.cpp:40: int main(): Assertion `candidate((1))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              is_prime = false;\n                break;\n            }\n    \
    \    }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    for (long i = 2; i < n; i++)\
    \ {\n        bool isPrime = true;\n        for (long j = 2; j < i; j++) {\n  \
    \          if (i % j == 0) {\n                isPrime = false;\n             \
    \   break;\n            }\n        }\n        if (isPrime) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  // Write your code here\n  std::vector<long>\
    \ v;\n  if(n<=1)\n    return v;\n  for(long i=2;i<n;i++)\n  {\n    bool flag=true;\n\
    \    for(long j=2;j<=sqrt(i);j++)\n    {\n      if(i%j==0)\n      {\n        flag=false;\n\
    \        break;\n      }\n    }\n    if(flag)\n      v.push_back(i);\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n <= 1) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            primes.push_back(i);\n        }\n    }\n    return\
    \ primes;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              is_prime = false;\n                break;\n            }\n    \
    \    }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    if\
    \ (n == 2) {\n        return result;\n    }\n    for (long i = 3; i < n; i +=\
    \ 2) {\n        bool isPrime = true;\n        for (long j = 3; j <= sqrt(i); j\
    \ += 2) {\n            if (i % j == 0) {\n                isPrime = false;\n \
    \               break;\n            }\n        }\n        if (isPrime) {\n   \
    \         result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n <= 1) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    for\
    \ (long i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= i / 2; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              is_prime = false;\n                break;\n            }\n    \
    \    }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  std::vector<long> primes;\n  if (n\
    \ <= 1) {\n    return primes;\n  }\n  primes.push_back(2);\n  for (long i = 3;\
    \ i < n; i++) {\n    bool isPrime = true;\n    for (long j = 2; j < i; j++) {\n\
    \      if (i % j == 0) {\n        isPrime = false;\n        break;\n      }\n\
    \    }\n    if (isPrime) {\n      primes.push_back(i);\n    }\n  }\n  return primes;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    for (long i = 2; i < n; i++) {\n\
    \        bool isPrime = true;\n        for (long j = 2; j < i; j++) {\n      \
    \      if (i % j == 0) {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime) {\n            primes.push_back(i);\n\
    \        }\n    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> v;\n    if(n<=1)\n\
    \        return v;\n    v.push_back(2);\n    for(long i=3;i<n;i+=2)\n    {\n \
    \       bool prime=true;\n        for(long j=3;j<=sqrt(i);j+=2)\n        {\n \
    \           if(i%j==0)\n            {\n                prime=false;\n        \
    \        break;\n            }\n        }\n        if(prime)\n            v.push_back(i);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = count_up_to;\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            primes.push_back(i);\n        }\n    }\n    return\
    \ primes;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> v;\n    if(n<=1)\n\
    \        return v;\n    v.push_back(2);\n    for(long i=3;i<n;i+=2)\n    {\n \
    \       bool isPrime = true;\n        for(long j=3;j<=sqrt(i);j+=2)\n        {\n\
    \            if(i%j==0)\n            {\n                isPrime = false;\n   \
    \             break;\n            }\n        }\n        if(isPrime)\n        \
    \    v.push_back(i);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n\
    \    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n\
    \    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n    assert(candidate((22))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19})));\n    assert(candidate((1)) == (std::vector<long>()));\n\
    \    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23,\
    \ (long)29, (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j * j <= i; j += 2) {\n            if (i % j == 0) {\n              \
    \  isPrime = false;\n                break;\n            }\n        }\n      \
    \  if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              is_prime = false;\n                break;\n            }\n    \
    \    }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n <= 1) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    is_prime = false;\n                break;\n            }\n        }\n   \
    \     if (is_prime) {\n            primes.push_back(i);\n        }\n    }\n  \
    \  return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j * j <= i; j += 2) {\n            if (i % j == 0) {\n              \
    \  isPrime = false;\n                break;\n            }\n        }\n      \
    \  if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> v;\n    if(n<=1)\n\
    \        return v;\n    for(long i=2;i<n;i++)\n    {\n        bool flag=true;\n\
    \        for(long j=2;j<=sqrt(i);j++)\n        {\n            if(i%j==0)\n   \
    \         {\n                flag=false;\n                break;\n           \
    \ }\n        }\n        if(flag)\n            v.push_back(i);\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n == 0) {\n        return result;\n    }\n    if (n == 1) {\n        return\
    \ result;\n    }\n    result.push_back(2);\n    for (long i = 3; i < n; i++) {\n\
    \        bool isPrime = true;\n        for (long j = 2; j < i; j++) {\n      \
    \      if (i % j == 0) {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) return primes;\n    primes.push_back(2);\n    for (long i = 3; i < n;\
    \ i += 2) {\n        bool isPrime = true;\n        for (long j = 0; j < primes.size();\
    \ j++) {\n            if (i % primes[j] == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime) primes.push_back(i);\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  std::vector<long> result;\n  if (n\
    \ < 2) {\n    return result;\n  }\n  result.push_back(2);\n  for (long i = 3;\
    \ i < n; i += 2) {\n    bool isPrime = true;\n    for (long j = 2; j <= sqrt(i);\
    \ j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      result.push_back(i);\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  std::vector<long> result;\n  if (n\
    \ < 2) {\n    return result;\n  }\n  result.push_back(2);\n  for (long i = 3;\
    \ i < n; i++) {\n    bool isPrime = true;\n    for (long j = 2; j < i; j++) {\n\
    \      if (i % j == 0) {\n        isPrime = false;\n        break;\n      }\n\
    \    }\n    if (isPrime) {\n      result.push_back(i);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j <= sqrt(i); j++) {\n            if (i % j == 0) {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n  std::vector<long> result;\n  if (n\
    \ <= 1) {\n    return result;\n  }\n  result.push_back(2);\n  for (long i = 3;\
    \ i < n; i += 2) {\n    bool isPrime = true;\n    for (long j = 3; j < i; j +=\
    \ 2) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n  \
    \    }\n    }\n    if (isPrime) {\n      result.push_back(i);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    for\
    \ (long i = 2; i < n; i++) {\n        bool is_prime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n == 0) {\n        return result;\n    }\n    if (n == 1) {\n        return\
    \ result;\n    }\n    result.push_back(2);\n    if (n == 2) {\n        return\
    \ result;\n    }\n    for (long i = 3; i < n; i++) {\n        bool isPrime = true;\n\
    \        for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n     \
    \           isPrime = false;\n                break;\n            }\n        }\n\
    \        if (isPrime) {\n            result.push_back(i);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              is_prime = false;\n                break;\n            }\n    \
    \    }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              is_prime = false;\n                break;\n            }\n    \
    \    }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n\
    \    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n <= 1) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i < n; i++) {\n        bool is_prime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if (is_prime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    for (long i = 2; i < n; i++) {\n\
    \        bool isPrime = true;\n        for (long j = 2; j < i; j++) {\n      \
    \      if (i % j == 0) {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime) {\n            primes.push_back(i);\n\
    \        }\n    }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n <= 1) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j <= sqrt(i); j += 2) {\n            if (i % j == 0) {\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 3; j < i; j += 2) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i += 2) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> v;\n    if(n<=1)\n\
    \        return v;\n    v.push_back(2);\n    for(long i=3;i<n;i+=2)\n    {\n \
    \       bool isPrime = true;\n        for(long j=3;j<=sqrt(i);j+=2)\n        {\n\
    \            if(i%j==0)\n            {\n                isPrime = false;\n   \
    \             break;\n            }\n        }\n        if(isPrime)\n        \
    \    v.push_back(i);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n\
    \    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n\
    \    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n    assert(candidate((22))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19})));\n    assert(candidate((1)) == (std::vector<long>()));\n\
    \    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23,\
    \ (long)29, (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> result;\n    if\
    \ (n < 2) {\n        return result;\n    }\n    result.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n\
    \    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1))\
    \ == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n\
    \    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5,\
    \ (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31,\
    \ (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67,\
    \ (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
    \ takes an non-negative integer and returns an array of the first n\n// integers\
    \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5)\
    \ => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
    \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
    std::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    if\
    \ (n < 2) {\n        return primes;\n    }\n    primes.push_back(2);\n    for\
    \ (long i = 3; i < n; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 0; j < primes.size(); j++) {\n            if (i % primes[j] == 0) {\n  \
    \              isPrime = false;\n                break;\n            }\n     \
    \   }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n \
    \   }\n    return primes;\n}\nint main() {\n    auto candidate = count_up_to;\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0))\
    \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2,\
    \ (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n   \
    \ assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29,\
    \ (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) ==\
    \ (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13,\
    \ (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43,\
    \ (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79,\
    \ (long)83, (long)89, (long)97})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
