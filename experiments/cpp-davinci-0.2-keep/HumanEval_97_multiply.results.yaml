name: HumanEval_97_multiply
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpv6g_0q2z: /tmp/tmpv6g_0q2z.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 1;\n    while(a > 0) {\n        result *= a % 10;\n\
    \        a /= 10;\n    }\n    while(b > 0) {\n        result *= b % 10;\n    \
    \    b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjo6b8ckk: /tmp/tmpjo6b8ckk.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpu50pk5z8: /tmp/tmpu50pk5z8.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_z6fckev: /tmp/tmp_z6fckev.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp84cjx7iy: /tmp/tmp84cjx7iy.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10) * (b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpp5jgavu9: /tmp/tmpp5jgavu9.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n        a *= -1;\n    if(b < 0)\n\
    \        b *= -1;\n    result = a % 10 * b % 10;\n    return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp886v8tjj: /tmp/tmp886v8tjj.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcrirund0: /tmp/tmpcrirund0.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long x = a % 10;\n    long y = b % 10;\n    return x * y;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpacebq2bx: /tmp/tmpacebq2bx.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long product = 0;\n    long x = a % 10;\n \
    \   long y = b % 10;\n    product = x * y;\n    return product;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpu8eg5aq5: /tmp/tmpu8eg5aq5.cpp:24: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp2p5qkp54: /tmp/tmp2p5qkp54.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpajqoyevf: /tmp/tmpajqoyevf.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long unit_digit_a = a % 10;\n    long unit_digit_b\
    \ = b % 10;\n    result = unit_digit_a * unit_digit_b;\n    return result;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvv8jajji: /tmp/tmpvv8jajji.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpn_awvn7r: /tmp/tmpn_awvn7r.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int x = a % 10;\n    int y = b % 10;\n    return x * y;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfdit40t7: /tmp/tmpfdit40t7.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9ambgu5m: /tmp/tmp9ambgu5m.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpicysvp7e: /tmp/tmpicysvp7e.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int unit_a = a % 10;\n    int unit_b = b % 10;\n    return unit_a\
    \ * unit_b;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpuoe9pitm: /tmp/tmpuoe9pitm.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // your code here\n  long product = 0;\n  long a_unit = a % 10;\n  long\
    \ b_unit = b % 10;\n  product = a_unit * b_unit;\n  return product;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpuytr3knu: /tmp/tmpuytr3knu.cpp:24: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 1;\n    while(a > 0 || b > 0) {\n        result *= (a\
    \ % 10) * (b % 10);\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0_k6cpnc: /tmp/tmp0_k6cpnc.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmph0gu1am6: /tmp/tmph0gu1am6.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 1;\n    while(a > 0 || b > 0) {\n        product *=\
    \ (a % 10) * (b % 10);\n        a /= 10;\n        b /= 10;\n    }\n    return\
    \ product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp777lxhv9: /tmp/tmp777lxhv9.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjtnruvdq: /tmp/tmpjtnruvdq.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpaf628jea: /tmp/tmpaf628jea.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // your code here\n  return (a%10)*(b%10);\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcytubp_1: /tmp/tmpcytubp_1.cpp:20: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long a1 = a % 10;\n    long b1 = b % 10;\n    return a1 * b1;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdyfomp6s: /tmp/tmpdyfomp6s.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpynwgjdm4: /tmp/tmpynwgjdm4.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    return (a%10)*(b%10);\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpc89l4fxj: /tmp/tmpc89l4fxj.cpp:20: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgjtzuqpj: /tmp/tmpgjtzuqpj.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long result = 0;\n    long a_unit = a % 10;\n\
    \    long b_unit = b % 10;\n    result = a_unit * b_unit;\n    return result;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpj7vz3z26: /tmp/tmpj7vz3z26.cpp:24: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmplpvk0d56: /tmp/tmplpvk0d56.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpx70crnh4: /tmp/tmpx70crnh4.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0ms7a5qf: /tmp/tmp0ms7a5qf.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmptr5hltyc: /tmp/tmptr5hltyc.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmphwbnlt63: /tmp/tmphwbnlt63.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7ee3k3c0: /tmp/tmp7ee3k3c0.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a1 = a%10;\n    int b1 = b%10;\n    return a1*b1;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfqnppl3i: /tmp/tmpfqnppl3i.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a1 = a % 10;\n    int b1 = b % 10;\n    return a1 * b1;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnxl9m88s: /tmp/tmpnxl9m88s.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqk7a5wps: /tmp/tmpqk7a5wps.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwm9fykkt: /tmp/tmpwm9fykkt.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_xxs2f3p: /tmp/tmp_xxs2f3p.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp331jrj7x: /tmp/tmp331jrj7x.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0g0tdh1c: /tmp/tmp0g0tdh1c.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpd32o27fd: /tmp/tmpd32o27fd.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqf1usvjp: /tmp/tmpqf1usvjp.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpctks6pqq: /tmp/tmpctks6pqq.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int a_unit_digit = a % 10;\n  int b_unit_digit = b % 10;\n  return a_unit_digit\
    \ * b_unit_digit;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5mz3ul3b: /tmp/tmp5mz3ul3b.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long product = 1;\n    long a_unit = a % 10;\n\
    \    long b_unit = b % 10;\n    product = a_unit * b_unit;\n    return product;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmposh_tqi7: /tmp/tmposh_tqi7.cpp:24: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcnx4ej_l: /tmp/tmpcnx4ej_l.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqgdp25u6: /tmp/tmpqgdp25u6.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp29hgqh2q: /tmp/tmp29hgqh2q.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpykjyv8p1: /tmp/tmpykjyv8p1.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if (a < 0) {\n        a = -a;\n    }\n    if\
    \ (b < 0) {\n        b = -b;\n    }\n    result = (a % 10) * (b % 10);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8i1xi7lm: /tmp/tmp8i1xi7lm.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmlb7axnu: /tmp/tmpmlb7axnu.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit_digit = a % 10;\n    long b_unit_digit\
    \ = b % 10;\n    result = a_unit_digit * b_unit_digit;\n    return result;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsrduq8lw: /tmp/tmpsrduq8lw.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n    {\n        a = a * -1;\n    }\n\
    \    if(b < 0)\n    {\n        b = b * -1;\n    }\n    result = (a % 10) * (b\
    \ % 10);\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpolmj8qgq: /tmp/tmpolmj8qgq.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfepmzq4i: /tmp/tmpfepmzq4i.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long res = 0;\n    while(a > 0) {\n        res += (a % 10) * (b %\
    \ 10);\n        a /= 10;\n        b /= 10;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5fm6hox5: /tmp/tmp5fm6hox5.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a_unit_digit = a % 10;\n    int b_unit_digit = b % 10;\n    return\
    \ a_unit_digit * b_unit_digit;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmwdnesn5: /tmp/tmpmwdnesn5.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpzyj6erj8: /tmp/tmpzyj6erj8.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmph0tg_een: /tmp/tmph0tg_een.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    return (a%10)*(b%10);\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfv5zl3g9: /tmp/tmpfv5zl3g9.cpp:20: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbjy6_5a2: /tmp/tmpbjy6_5a2.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9w0kxn88: /tmp/tmp9w0kxn88.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long res = 0;\n    int a_unit = a % 10;\n \
    \   int b_unit = b % 10;\n    res = a_unit * b_unit;\n    return res;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgdaea7q1: /tmp/tmpgdaea7q1.cpp:24: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpi6ohd1hw: /tmp/tmpi6ohd1hw.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 0;\n    if(a < 0)\n        a *= -1;\n    if(b < 0)\n\
    \        b *= -1;\n    product = (a % 10) * (b % 10);\n    return product;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbekd9eja: /tmp/tmpbekd9eja.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp644cqxh2: /tmp/tmp644cqxh2.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if (a < 0) {\n        a = -a;\n    }\n    if\
    \ (b < 0) {\n        b = -b;\n    }\n    result = (a % 10) * (b % 10);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmprx2vfcck: /tmp/tmprx2vfcck.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n    {\n        a = -a;\n    }\n \
    \   if(b < 0)\n    {\n        b = -b;\n    }\n    result = (a % 10) * (b % 10);\n\
    \    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6w58mj2c: /tmp/tmp6w58mj2c.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 1;\n    while(a != 0 || b != 0) {\n        product\
    \ *= (a % 10) * (b % 10);\n        a /= 10;\n        b /= 10;\n    }\n    return\
    \ product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvs1whdcl: /tmp/tmpvs1whdcl.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8flnzf6u: /tmp/tmp8flnzf6u.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwn6cilwy: /tmp/tmpwn6cilwy.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9fai00u6: /tmp/tmp9fai00u6.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp97cy0v11: /tmp/tmp97cy0v11.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpoxnant8y: /tmp/tmpoxnant8y.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp69nbvl5g: /tmp/tmp69nbvl5g.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 1;\n    while(a > 0) {\n        product *= a % 10;\n\
    \        a /= 10;\n    }\n    while(b > 0) {\n        product *= b % 10;\n   \
    \     b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpn95dc2nw: /tmp/tmpn95dc2nw.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a1 = a % 10;\n    int b1 = b % 10;\n    return a1 * b1;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp265368me: /tmp/tmp265368me.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmphlgz67c8: /tmp/tmphlgz67c8.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    // Write your code here\n    result = (a%10)*(b%10);\n\
    \    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpx1tvzn0c: /tmp/tmpx1tvzn0c.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8gd_4ea4: /tmp/tmp8gd_4ea4.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long product = a * b;\n    return product %\
    \ 10;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9tkr6z0o: /tmp/tmp9tkr6z0o.cpp:18: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0) a = -a;\n    if(b < 0) b = -b;\n \
    \   result = a % 10 * b % 10;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp704gfs4e: /tmp/tmp704gfs4e.cpp:20: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmppqjlvi86: /tmp/tmppqjlvi86.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int a1 = a%10;\n  int b1 = b%10;\n  return a1*b1;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpv1fzn7wg: /tmp/tmpv1fzn7wg.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpny43hfyv: /tmp/tmpny43hfyv.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_d5rjlsy: /tmp/tmp_d5rjlsy.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmsrdv86z: /tmp/tmpmsrdv86z.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpryjz_ubo: /tmp/tmpryjz_ubo.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpeyvi2rdh: /tmp/tmpeyvi2rdh.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 1;\n    while(a != 0) {\n        result *= a % 10;\n\
    \        a /= 10;\n    }\n    while(b != 0) {\n        result *= b % 10;\n   \
    \     b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9133pn6w: /tmp/tmp9133pn6w.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmplqxkt7dq: /tmp/tmplqxkt7dq.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpk2zttht5: /tmp/tmpk2zttht5.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if (a < 0) {\n        a = -a;\n    }\n    if\
    \ (b < 0) {\n        b = -b;\n    }\n    result = (a % 10) * (b % 10);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpko05yv9b: /tmp/tmpko05yv9b.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    std::stringstream ss;\n    ss << a;\n    std::string\
    \ a_str = ss.str();\n    ss.str(\"\");\n    ss << b;\n    std::string b_str =\
    \ ss.str();\n    ss.str(\"\");\n    ss << a_str[a_str.length()-1] << b_str[b_str.length()-1];\n\
    \    ss >> result;\n    return result;\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdy7cd3c_: /tmp/tmpdy7cd3c_.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a1 = a%10;\n    int b1 = b%10;\n    return a1*b1;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjrj06k1p: /tmp/tmpjrj06k1p.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long x = a % 10;\n    long y = b % 10;\n    return x * y;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvz2o0wr9: /tmp/tmpvz2o0wr9.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpaic5bwvb: /tmp/tmpaic5bwvb.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // your code here\n  return (a%10)*(b%10);\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8j4esfsj: /tmp/tmp8j4esfsj.cpp:20: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0cq_rfw7: /tmp/tmp0cq_rfw7.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long unit_digit_a = a % 10;\n    long unit_digit_b\
    \ = b % 10;\n    result = unit_digit_a * unit_digit_b;\n    return result;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmplj3dqlp9: /tmp/tmplj3dqlp9.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmphv5z2ky1: /tmp/tmphv5z2ky1.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmfnq5re_: /tmp/tmpmfnq5re_.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7knj3lv7: /tmp/tmp7knj3lv7.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpu7kk8ypb: /tmp/tmpu7kk8ypb.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvto3793d: /tmp/tmpvto3793d.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp26nf9r2n: /tmp/tmp26nf9r2n.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpz6leevpw: /tmp/tmpz6leevpw.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    std::string a_str = std::to_string(a);\n   \
    \ std::string b_str = std::to_string(b);\n    result = (a_str[a_str.length()-1]\
    \ - '0') * (b_str[b_str.length()-1] - '0');\n    return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpy6_gwumb: /tmp/tmpy6_gwumb.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n        a *= -1;\n    if(b < 0)\n\
    \        b *= -1;\n    result = a % 10 * b % 10;\n    return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp1h0bvs37: /tmp/tmp1h0bvs37.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpth7s1hux: /tmp/tmpth7s1hux.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp32pl2nj1: /tmp/tmp32pl2nj1.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyszkaw1i: /tmp/tmpyszkaw1i.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int product = 1;\n    while(a > 0){\n        product *= a % 10;\n\
    \        a /= 10;\n    }\n    while(b > 0){\n        product *= b % 10;\n    \
    \    b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3ad3g3_e: /tmp/tmp3ad3g3_e.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpxjle2g7b: /tmp/tmpxjle2g7b.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjyhg6qzj: /tmp/tmpjyhg6qzj.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a_unit_digit = a % 10;\n    int b_unit_digit = b % 10;\n    return\
    \ a_unit_digit * b_unit_digit;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmcj98641: /tmp/tmpmcj98641.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpl8gw4_xn: /tmp/tmpl8gw4_xn.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpm42mggel: /tmp/tmpm42mggel.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdontzkga: /tmp/tmpdontzkga.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5fss652g: /tmp/tmp5fss652g.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpz49hqth8: /tmp/tmpz49hqth8.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsc6x40iz: /tmp/tmpsc6x40iz.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcep127s_: /tmp/tmpcep127s_.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmph_ztnw52: /tmp/tmph_ztnw52.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long result = 0;\n    long a_unit = a % 10;\n\
    \    long b_unit = b % 10;\n    result = a_unit * b_unit;\n    return result;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8a1xi9hg: /tmp/tmp8a1xi9hg.cpp:24: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4mkk0g2c: /tmp/tmp4mkk0g2c.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 1;\n    while(a > 0) {\n        result *= a % 10;\n\
    \        a /= 10;\n    }\n    while(b > 0) {\n        result *= b % 10;\n    \
    \    b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmph9gtq6g1: /tmp/tmph9gtq6g1.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpoa48w7sm: /tmp/tmpoa48w7sm.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpuqpmzlbs: /tmp/tmpuqpmzlbs.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a1 = a % 10;\n    int b1 = b % 10;\n    return a1 * b1;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpp3stzd52: /tmp/tmpp3stzd52.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpatvl9ouc: /tmp/tmpatvl9ouc.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpywk3dqcl: /tmp/tmpywk3dqcl.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpz083ifyo: /tmp/tmpz083ifyo.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9ulw3den: /tmp/tmp9ulw3den.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    std::stringstream ss;\n    ss << a;\n    std::string\
    \ a_str = ss.str();\n    ss.str(\"\");\n    ss << b;\n    std::string b_str =\
    \ ss.str();\n    ss.str(\"\");\n    if (a_str.length() == 1 && b_str.length()\
    \ == 1) {\n        result = a * b;\n    } else if (a_str.length() == 1) {\n  \
    \      result = a * (b_str[b_str.length() - 1] - '0');\n    } else if (b_str.length()\
    \ == 1) {\n        result = b * (a_str[a_str.length() - 1] - '0');\n    } else\
    \ {\n        result = (a_str[a_str.length() - 1] - '0') * (b_str[b_str.length()\
    \ - 1] - '0');\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpajotcwmc: /tmp/tmpajotcwmc.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a_unit = a % 10;\n    int b_unit = b % 10;\n    return a_unit\
    \ * b_unit;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0pmly66b: /tmp/tmp0pmly66b.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long unit_a = a % 10;\n    long unit_b = b %\
    \ 10;\n    result = unit_a * unit_b;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpz3smv2iv: /tmp/tmpz3smv2iv.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::stringstream ss;\n    ss << a;\n    std::string a_str = ss.str();\n\
    \    ss.str(\"\");\n    ss << b;\n    std::string b_str = ss.str();\n    int a_unit\
    \ = a_str[a_str.size()-1] - '0';\n    int b_unit = b_str[b_str.size()-1] - '0';\n\
    \    return a_unit * b_unit;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long result = 0;\n  long a_unit = a % 10;\n  long b_unit = b % 10;\n\
    \  result = a_unit * b_unit;\n  return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbfdrxowf: /tmp/tmpbfdrxowf.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 0;\n    if (a < 0) {\n        a = -a;\n    }\n    if\
    \ (b < 0) {\n        b = -b;\n    }\n    product = (a % 10) * (b % 10);\n    return\
    \ product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp555cat_4: /tmp/tmp555cat_4.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    int a_unit = a % 10;\n    int b_unit = b % 10;\n\
    \    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6opbfqvb: /tmp/tmp6opbfqvb.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp1rlz8jzw: /tmp/tmp1rlz8jzw.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a1 = a%10;\n    int b1 = b%10;\n    return a1*b1;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmptx018onl: /tmp/tmptx018onl.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpr9vm6qit: /tmp/tmpr9vm6qit.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqfmrbjq6: /tmp/tmpqfmrbjq6.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmptv00w6z_: /tmp/tmptv00w6z_.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long result = 0;\n  if (a < 0) {\n    a = -a;\n  }\n  if (b < 0) {\n\
    \    b = -b;\n  }\n  result = a * b;\n  return result % 10;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpntuhk7wz: /tmp/tmpntuhk7wz.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ans = 1;\n    while(a > 0) {\n        ans *= a % 10;\n      \
    \  a /= 10;\n    }\n    while(b > 0) {\n        ans *= b % 10;\n        b /= 10;\n\
    \    }\n    return ans % 10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvo8ybjr6: /tmp/tmpvo8ybjr6.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9eeddrky: /tmp/tmp9eeddrky.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpd352m58x: /tmp/tmpd352m58x.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdpdwdfja: /tmp/tmpdpdwdfja.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpl2e705nj: /tmp/tmpl2e705nj.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_fe_35k1: /tmp/tmp_fe_35k1.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpkkzqa637: /tmp/tmpkkzqa637.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n        a = -a;\n    if(b < 0)\n\
    \        b = -b;\n    result = a % 10 * b % 10;\n    return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpt55k7x6a: /tmp/tmpt55k7x6a.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpww7tc8dd: /tmp/tmpww7tc8dd.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6t1cy2l_: /tmp/tmp6t1cy2l_.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpkzez2w3v: /tmp/tmpkzez2w3v.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpa7y7ce9g: /tmp/tmpa7y7ce9g.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp04ylbwnn: /tmp/tmp04ylbwnn.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a_unit = a % 10;\n    int b_unit = b % 10;\n    return a_unit\
    \ * b_unit;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvhc7rqv_: /tmp/tmpvhc7rqv_.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwufxtpyd: /tmp/tmpwufxtpyd.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpuf07d2ct: /tmp/tmpuf07d2ct.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a<0) a*=-1;\n    if(b<0) b*=-1;\n    return (a%10)*(b%10);\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0c5p_rvq: /tmp/tmp0c5p_rvq.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmphskjtgey: /tmp/tmphskjtgey.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a < 0) a = -a;\n    if(b < 0) b = -b;\n    return (a % 10) * (b\
    \ % 10);\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int x = a%10;\n    int y = b%10;\n    return x*y;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp2m3ipki4: /tmp/tmp2m3ipki4.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpuoghcyfn: /tmp/tmpuoghcyfn.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long res = 0;\n    std::stringstream ss;\n    ss << a;\n    std::string\
    \ a_str;\n    ss >> a_str;\n    ss.clear();\n    ss << b;\n    std::string b_str;\n\
    \    ss >> b_str;\n    ss.clear();\n    long a_unit = a_str[a_str.size()-1] -\
    \ '0';\n    long b_unit = b_str[b_str.size()-1] - '0';\n    res = a_unit * b_unit;\n\
    \    return res;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long result = 0;\n  long a_unit = a % 10;\n  long b_unit = b % 10;\n\
    \  result = a_unit * b_unit;\n  return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcjax1g6e: /tmp/tmpcjax1g6e.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n        a *= -1;\n    if(b < 0)\n\
    \        b *= -1;\n    result = a * b;\n    std::string str = std::to_string(result);\n\
    \    std::string str2 = \"\";\n    for(int i = 0; i < str.length(); i++)\n   \
    \ {\n        if(str[i] != '0')\n            str2 += str[i];\n    }\n    if(str2.length()\
    \ == 0)\n        return 0;\n    result = std::stoi(str2);\n    return result;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp13yn6fab: /tmp/tmp13yn6fab.cpp:32: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long result = 0;\n  long a_unit = a % 10;\n  long b_unit = b % 10;\n\
    \  result = a_unit * b_unit;\n  return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpikjl38dd: /tmp/tmpikjl38dd.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdgur2h81: /tmp/tmpdgur2h81.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n        a = -a;\n    if(b < 0)\n\
    \        b = -b;\n    result = a%10 * b%10;\n    return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgr9auwbo: /tmp/tmpgr9auwbo.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8z0xmsn5: /tmp/tmp8z0xmsn5.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpppvzmroi: /tmp/tmpppvzmroi.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long res = 1;\n    while(a > 0){\n        res\
    \ *= a % 10;\n        a /= 10;\n    }\n    while(b > 0){\n        res *= b % 10;\n\
    \        b /= 10;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8viym3tg: /tmp/tmp8viym3tg.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpb1w4u32m: /tmp/tmpb1w4u32m.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp81dhz6yk: /tmp/tmp81dhz6yk.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpxzj5ay_z: /tmp/tmpxzj5ay_z.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpn5lir3gj: /tmp/tmpn5lir3gj.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcwtkeseb: /tmp/tmpcwtkeseb.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // your code here\n  return (a%10)*(b%10);\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpony5700u: /tmp/tmpony5700u.cpp:20: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpr27cuej2: /tmp/tmpr27cuej2.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a_unit = a % 10;\n    int b_unit = b % 10;\n    return a_unit\
    \ * b_unit;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp1qir_i4j: /tmp/tmp1qir_i4j.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4dxv6cae: /tmp/tmp4dxv6cae.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpq6nkf9tm: /tmp/tmpq6nkf9tm.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpys6kmy1h: /tmp/tmpys6kmy1h.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
