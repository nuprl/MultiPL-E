language: cpp
name: HumanEval_97_multiply
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 1;\n    while(a > 0) {\n        result *= a % 10;\n\
    \        a /= 10;\n    }\n    while(b > 0) {\n        result *= b % 10;\n    \
    \    b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpttpxs8vf: /tmp/tmpttpxs8vf.cpp:25: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10) * (b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqirk9qzy: /tmp/tmpqirk9qzy.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n        a *= -1;\n    if(b < 0)\n\
    \        b *= -1;\n    result = a % 10 * b % 10;\n    return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmptd5_ibkq: /tmp/tmptd5_ibkq.cpp:22: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long x = a % 10;\n    long y = b % 10;\n    return x * y;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxn05eayf: /tmp/tmpxn05eayf.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long product = 0;\n    long x = a % 10;\n \
    \   long y = b % 10;\n    product = x * y;\n    return product;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7jo8b0b2: /tmp/tmp7jo8b0b2.cpp:24: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long unit_digit_a = a % 10;\n    long unit_digit_b\
    \ = b % 10;\n    result = unit_digit_a * unit_digit_b;\n    return result;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjjjn15j2: /tmp/tmpjjjn15j2.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int x = a % 10;\n    int y = b % 10;\n    return x * y;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmphc1jyshr: /tmp/tmphc1jyshr.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int unit_a = a % 10;\n    int unit_b = b % 10;\n    return unit_a\
    \ * unit_b;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy38azbu_: /tmp/tmpy38azbu_.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // your code here\n  long product = 0;\n  long a_unit = a % 10;\n  long\
    \ b_unit = b % 10;\n  product = a_unit * b_unit;\n  return product;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpze5agi7u: /tmp/tmpze5agi7u.cpp:24: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 1;\n    while(a > 0 || b > 0) {\n        result *= (a\
    \ % 10) * (b % 10);\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpuw3qph61: /tmp/tmpuw3qph61.cpp:22: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 1;\n    while(a > 0 || b > 0) {\n        product *=\
    \ (a % 10) * (b % 10);\n        a /= 10;\n        b /= 10;\n    }\n    return\
    \ product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwix16xhb: /tmp/tmpwix16xhb.cpp:22: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // your code here\n  return (a%10)*(b%10);\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0xdrr9ya: /tmp/tmp0xdrr9ya.cpp:20: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long a1 = a % 10;\n    long b1 = b % 10;\n    return a1 * b1;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7azzfeyf: /tmp/tmp7azzfeyf.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    return (a%10)*(b%10);\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3wypzqc7: /tmp/tmp3wypzqc7.cpp:20: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long result = 0;\n    long a_unit = a % 10;\n\
    \    long b_unit = b % 10;\n    result = a_unit * b_unit;\n    return result;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7wrtmki8: /tmp/tmp7wrtmki8.cpp:24: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpap72w0j6: /tmp/tmpap72w0j6.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpap72w0j6: /tmp/tmpap72w0j6.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpap72w0j6: /tmp/tmpap72w0j6.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a1 = a%10;\n    int b1 = b%10;\n    return a1*b1;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyoq9656f: /tmp/tmpyoq9656f.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a1 = a % 10;\n    int b1 = b % 10;\n    return a1 * b1;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8p1igunt: /tmp/tmp8p1igunt.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int a_unit_digit = a % 10;\n  int b_unit_digit = b % 10;\n  return a_unit_digit\
    \ * b_unit_digit;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmppbh4s328: /tmp/tmppbh4s328.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long product = 1;\n    long a_unit = a % 10;\n\
    \    long b_unit = b % 10;\n    product = a_unit * b_unit;\n    return product;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkp_o69dn: /tmp/tmpkp_o69dn.cpp:24: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if (a < 0) {\n        a = -a;\n    }\n    if\
    \ (b < 0) {\n        b = -b;\n    }\n    result = (a % 10) * (b % 10);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit_digit = a % 10;\n    long b_unit_digit\
    \ = b % 10;\n    result = a_unit_digit * b_unit_digit;\n    return result;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9zegcy7d: /tmp/tmp9zegcy7d.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n    {\n        a = a * -1;\n    }\n\
    \    if(b < 0)\n    {\n        b = b * -1;\n    }\n    result = (a % 10) * (b\
    \ % 10);\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long res = 0;\n    while(a > 0) {\n        res += (a % 10) * (b %\
    \ 10);\n        a /= 10;\n        b /= 10;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_ksm8izh: /tmp/tmp_ksm8izh.cpp:22: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a_unit_digit = a % 10;\n    int b_unit_digit = b % 10;\n    return\
    \ a_unit_digit * b_unit_digit;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsl938my7: /tmp/tmpsl938my7.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    return (a%10)*(b%10);\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3wypzqc7: /tmp/tmp3wypzqc7.cpp:20: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long res = 0;\n    int a_unit = a % 10;\n \
    \   int b_unit = b % 10;\n    res = a_unit * b_unit;\n    return res;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqaxfzigw: /tmp/tmpqaxfzigw.cpp:24: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 0;\n    if(a < 0)\n        a *= -1;\n    if(b < 0)\n\
    \        b *= -1;\n    product = (a % 10) * (b % 10);\n    return product;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if (a < 0) {\n        a = -a;\n    }\n    if\
    \ (b < 0) {\n        b = -b;\n    }\n    result = (a % 10) * (b % 10);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n    {\n        a = -a;\n    }\n \
    \   if(b < 0)\n    {\n        b = -b;\n    }\n    result = (a % 10) * (b % 10);\n\
    \    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 1;\n    while(a != 0 || b != 0) {\n        product\
    \ *= (a % 10) * (b % 10);\n        a /= 10;\n        b /= 10;\n    }\n    return\
    \ product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw_apy8tm: /tmp/tmpw_apy8tm.cpp:22: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpap72w0j6: /tmp/tmpap72w0j6.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpap72w0j6: /tmp/tmpap72w0j6.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 1;\n    while(a > 0) {\n        product *= a % 10;\n\
    \        a /= 10;\n    }\n    while(b > 0) {\n        product *= b % 10;\n   \
    \     b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6i4t2bma: /tmp/tmp6i4t2bma.cpp:25: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a1 = a % 10;\n    int b1 = b % 10;\n    return a1 * b1;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8p1igunt: /tmp/tmp8p1igunt.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    // Write your code here\n    result = (a%10)*(b%10);\n\
    \    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprs1ylrwb: /tmp/tmprs1ylrwb.cpp:22: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long product = a * b;\n    return product %\
    \ 10;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmns2m_a5: /tmp/tmpmns2m_a5.cpp:18: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0) a = -a;\n    if(b < 0) b = -b;\n \
    \   result = a % 10 * b % 10;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzp_kmroh: /tmp/tmpzp_kmroh.cpp:20: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int a1 = a%10;\n  int b1 = b%10;\n  return a1*b1;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp86xkks1i: /tmp/tmp86xkks1i.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpap72w0j6: /tmp/tmpap72w0j6.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 1;\n    while(a != 0) {\n        result *= a % 10;\n\
    \        a /= 10;\n    }\n    while(b != 0) {\n        result *= b % 10;\n   \
    \     b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp00xxgit1: /tmp/tmp00xxgit1.cpp:25: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if (a < 0) {\n        a = -a;\n    }\n    if\
    \ (b < 0) {\n        b = -b;\n    }\n    result = (a % 10) * (b % 10);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    std::stringstream ss;\n    ss << a;\n    std::string\
    \ a_str = ss.str();\n    ss.str(\"\");\n    ss << b;\n    std::string b_str =\
    \ ss.str();\n    ss.str(\"\");\n    ss << a_str[a_str.length()-1] << b_str[b_str.length()-1];\n\
    \    ss >> result;\n    return result;\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwpf_276f: /tmp/tmpwpf_276f.cpp:26: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a1 = a%10;\n    int b1 = b%10;\n    return a1*b1;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyoq9656f: /tmp/tmpyoq9656f.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long x = a % 10;\n    long y = b % 10;\n    return x * y;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxn05eayf: /tmp/tmpxn05eayf.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpap72w0j6: /tmp/tmpap72w0j6.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // your code here\n  return (a%10)*(b%10);\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0xdrr9ya: /tmp/tmp0xdrr9ya.cpp:20: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long unit_digit_a = a % 10;\n    long unit_digit_b\
    \ = b % 10;\n    result = unit_digit_a * unit_digit_b;\n    return result;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjjjn15j2: /tmp/tmpjjjn15j2.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpap72w0j6: /tmp/tmpap72w0j6.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9tuk41eh: /tmp/tmp9tuk41eh.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9tuk41eh: /tmp/tmp9tuk41eh.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    std::string a_str = std::to_string(a);\n   \
    \ std::string b_str = std::to_string(b);\n    result = (a_str[a_str.length()-1]\
    \ - '0') * (b_str[b_str.length()-1] - '0');\n    return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n        a *= -1;\n    if(b < 0)\n\
    \        b *= -1;\n    result = a % 10 * b % 10;\n    return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmptd5_ibkq: /tmp/tmptd5_ibkq.cpp:22: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int product = 1;\n    while(a > 0){\n        product *= a % 10;\n\
    \        a /= 10;\n    }\n    while(b > 0){\n        product *= b % 10;\n    \
    \    b /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpl59y_oyl: /tmp/tmpl59y_oyl.cpp:25: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a_unit_digit = a % 10;\n    int b_unit_digit = b % 10;\n    return\
    \ a_unit_digit * b_unit_digit;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsl938my7: /tmp/tmpsl938my7.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long a_unit = a % 10;\n    long b_unit = b %\
    \ 10;\n    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpap72w0j6: /tmp/tmpap72w0j6.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long result = 0;\n    long a_unit = a % 10;\n\
    \    long b_unit = b % 10;\n    result = a_unit * b_unit;\n    return result;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7wrtmki8: /tmp/tmp7wrtmki8.cpp:24: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 1;\n    while(a > 0) {\n        result *= a % 10;\n\
    \        a /= 10;\n    }\n    while(b > 0) {\n        result *= b % 10;\n    \
    \    b /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpttpxs8vf: /tmp/tmpttpxs8vf.cpp:25: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a1 = a % 10;\n    int b1 = b % 10;\n    return a1 * b1;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8p1igunt: /tmp/tmp8p1igunt.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    std::stringstream ss;\n    ss << a;\n    std::string\
    \ a_str = ss.str();\n    ss.str(\"\");\n    ss << b;\n    std::string b_str =\
    \ ss.str();\n    ss.str(\"\");\n    if (a_str.length() == 1 && b_str.length()\
    \ == 1) {\n        result = a * b;\n    } else if (a_str.length() == 1) {\n  \
    \      result = a * (b_str[b_str.length() - 1] - '0');\n    } else if (b_str.length()\
    \ == 1) {\n        result = b * (a_str[a_str.length() - 1] - '0');\n    } else\
    \ {\n        result = (a_str[a_str.length() - 1] - '0') * (b_str[b_str.length()\
    \ - 1] - '0');\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122280
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a_unit = a % 10;\n    int b_unit = b % 10;\n    return a_unit\
    \ * b_unit;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbp47d72m: /tmp/tmpbp47d72m.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long unit_a = a % 10;\n    long unit_b = b %\
    \ 10;\n    result = unit_a * unit_b;\n    return result;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcxr8mtwf: /tmp/tmpcxr8mtwf.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::stringstream ss;\n    ss << a;\n    std::string a_str = ss.str();\n\
    \    ss.str(\"\");\n    ss << b;\n    std::string b_str = ss.str();\n    int a_unit\
    \ = a_str[a_str.size()-1] - '0';\n    int b_unit = b_str[b_str.size()-1] - '0';\n\
    \    return a_unit * b_unit;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long result = 0;\n  long a_unit = a % 10;\n  long b_unit = b % 10;\n\
    \  result = a_unit * b_unit;\n  return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9_6906mj: /tmp/tmp9_6906mj.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 0;\n    if (a < 0) {\n        a = -a;\n    }\n    if\
    \ (b < 0) {\n        b = -b;\n    }\n    product = (a % 10) * (b % 10);\n    return\
    \ product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    int a_unit = a % 10;\n    int b_unit = b % 10;\n\
    \    result = a_unit * b_unit;\n    return result;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmtmsx1ww: /tmp/tmpmtmsx1ww.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a1 = a%10;\n    int b1 = b%10;\n    return a1*b1;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyoq9656f: /tmp/tmpyoq9656f.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long result = 0;\n  if (a < 0) {\n    a = -a;\n  }\n  if (b < 0) {\n\
    \    b = -b;\n  }\n  result = a * b;\n  return result % 10;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpaxv7mnde: /tmp/tmpaxv7mnde.cpp:24: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ans = 1;\n    while(a > 0) {\n        ans *= a % 10;\n      \
    \  a /= 10;\n    }\n    while(b > 0) {\n        ans *= b % 10;\n        b /= 10;\n\
    \    }\n    return ans % 10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpglkxvab0: /tmp/tmpglkxvab0.cpp:25: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n        a = -a;\n    if(b < 0)\n\
    \        b = -b;\n    result = a % 10 * b % 10;\n    return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5ix2ticn: /tmp/tmp5ix2ticn.cpp:22: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a_unit = a % 10;\n    int b_unit = b % 10;\n    return a_unit\
    \ * b_unit;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbp47d72m: /tmp/tmpbp47d72m.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a<0) a*=-1;\n    if(b<0) b*=-1;\n    return (a%10)*(b%10);\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a < 0) a = -a;\n    if(b < 0) b = -b;\n    return (a % 10) * (b\
    \ % 10);\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int x = a%10;\n    int y = b%10;\n    return x*y;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpoe9j_d39: /tmp/tmpoe9j_d39.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long res = 0;\n    std::stringstream ss;\n    ss << a;\n    std::string\
    \ a_str;\n    ss >> a_str;\n    ss.clear();\n    ss << b;\n    std::string b_str;\n\
    \    ss >> b_str;\n    ss.clear();\n    long a_unit = a_str[a_str.size()-1] -\
    \ '0';\n    long b_unit = b_str[b_str.size()-1] - '0';\n    res = a_unit * b_unit;\n\
    \    return res;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long result = 0;\n  long a_unit = a % 10;\n  long b_unit = b % 10;\n\
    \  result = a_unit * b_unit;\n  return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9_6906mj: /tmp/tmp9_6906mj.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n        a *= -1;\n    if(b < 0)\n\
    \        b *= -1;\n    result = a * b;\n    std::string str = std::to_string(result);\n\
    \    std::string str2 = \"\";\n    for(int i = 0; i < str.length(); i++)\n   \
    \ {\n        if(str[i] != '0')\n            str2 += str[i];\n    }\n    if(str2.length()\
    \ == 0)\n        return 0;\n    result = std::stoi(str2);\n    return result;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp3pn94xd9: /tmp/tmp3pn94xd9.cpp:32: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long result = 0;\n  long a_unit = a % 10;\n  long b_unit = b % 10;\n\
    \  result = a_unit * b_unit;\n  return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9_6906mj: /tmp/tmp9_6906mj.cpp:23: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    if(a < 0)\n        a = -a;\n    if(b < 0)\n\
    \        b = -b;\n    result = a%10 * b%10;\n    return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmphqc5n9l2: /tmp/tmphqc5n9l2.cpp:22: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long res = 1;\n    while(a > 0){\n        res\
    \ *= a % 10;\n        a /= 10;\n    }\n    while(b > 0){\n        res *= b % 10;\n\
    \        b /= 10;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcl9im1cx: /tmp/tmpcl9im1cx.cpp:26: int main(): Assertion `candidate((148),
    (412)) == (16)'' failed.

    '
  stdout: ''
  timestamp: 1660122282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // your code here\n  return (a%10)*(b%10);\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0xdrr9ya: /tmp/tmp0xdrr9ya.cpp:20: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a_unit = a % 10;\n    int b_unit = b % 10;\n    return a_unit\
    \ * b_unit;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbp47d72m: /tmp/tmpbp47d72m.cpp:21: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmplu6wlrnb: /tmp/tmplu6wlrnb.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  status: Exception
  stderr: 'tmprpwa95cu: /tmp/tmprpwa95cu.cpp:19: int main(): Assertion `candidate((14),
    (-15)) == (20)'' failed.

    '
  stdout: ''
  timestamp: 1660122281
