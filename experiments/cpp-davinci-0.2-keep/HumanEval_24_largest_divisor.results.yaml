language: cpp
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i=n-1;\n\
    \    while(i>0){\n        if(n%i==0){\n            return i;\n        }\n    \
    \    i--;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\
    \    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 0);\n    for (long i = n\
    \ - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n     \
    \   }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\
    \    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    long largest =\
    \ 1;\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nint main() {\n  \
    \  auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n   \
    \ assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long max\
    \ = 0;\n    for(long i = 1; i <= n/2; i++){\n        if(n%i == 0){\n         \
    \   max = i;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long largest_divisor\
    \ = 1;\n    for(long i = 2; i <= n/2; i++){\n        if(n % i == 0){\n       \
    \     largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long divisor = 2;\n    while (n > divisor)\
    \ {\n        if (n % divisor == 0) {\n            n = n / divisor;\n         \
    \   divisor = 2;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return divisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpi0hrkzza: /tmp/tmpi0hrkzza.cpp:20: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i;\n   \
    \ for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n > 0);\n    for (long i = n\
    \ - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n     \
    \   }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i;\n   \
    \ for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i = n-1;\n\
    \    while(i>0){\n        if(n%i==0){\n            return i;\n        }\n    \
    \    i--;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    long largest_divisor\
    \ = 1;\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n > 0);\n    for (long i = n\
    \ - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n     \
    \   }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    for (long i = n\
    \ - 1; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n    \
    \    }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // >>> largest_divisor(15)\n    // 5\n\
    \    long largest = 0;\n    for (long i = 1; i < n; i++) {\n        if (n % i\
    \ == 0) {\n            largest = i;\n        }\n    }\n    return largest;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n > 0);\n    long largest = 0;\n\
    \    for (long i = 1; i < n; i++) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i;\n   \
    \ for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    for (long i = n-1;\
    \ i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n\
    \    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    for (long i = n\
    \ - 1; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n    \
    \    }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    for (long i = n\
    \ - 1; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n    \
    \    }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long largest_divisor\
    \ = 1;\n    for(long i = 2; i < n; i++){\n        if(n % i == 0){\n          \
    \  largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\
    \    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    for(long\
    \ i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return i;\n\
    \        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n > 0);\n    for (long i = n\
    \ - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n     \
    \   }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 0);\n    for (long i = n\
    \ - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n     \
    \   }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i;\n   \
    \ for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i;\n   \
    \ for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    int i;\n    for(i=n-1;i>=1;i--)\n  \
    \  {\n        if(n%i==0)\n        {\n            return i;\n        }\n    }\n\
    \    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long largest\
    \ = 0;\n    for(long i = 1; i < n; i++){\n        if(n % i == 0){\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpbohx5b1i: /tmp/tmpbohx5b1i.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long largest = 0;\n  for (long i = 1;\
    \ i < n; i++) {\n    if (n % i == 0) {\n      largest = i;\n    }\n  }\n  return\
    \ largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Your code here\n    long i;\n   \
    \ for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 0;\n    for (long\
    \ i = 1; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    int i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    int divisor = n-1;\n    while(n%divisor!=0)\
    \ {\n        divisor--;\n    }\n    return divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i=n-1;\n\
    \    while(i>0){\n        if(n%i==0){\n            return i;\n        }\n    \
    \    i--;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    for (long i = n-1;\
    \ i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n\
    \    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\
    \    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i;\n   \
    \ for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n-1; i > 0; i--)\
    \ {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long largest\
    \ = 0;\n    for(long i = 1; i <= n/2; i++){\n        if(n%i == 0){\n         \
    \   largest = i;\n        }\n    }\n    return largest;\n}\nint main() {\n   \
    \ auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n-1; i > 0; i--)\
    \ {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code goes here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i;\n   \
    \ for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i;\n   \
    \ for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Your code here\n    long i;\n   \
    \ for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long max_divisor\
    \ = 0;\n    for(long i = 1; i <= n/2; i++){\n        if(n % i == 0){\n       \
    \     max_divisor = i;\n        }\n    }\n    return max_divisor;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    for(long\
    \ i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return i;\n\
    \        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long largest\
    \ = 1;\n    for(long i = 2; i <= n/2; i++){\n        if(n % i == 0){\n       \
    \     largest = i;\n        }\n    }\n    return largest;\n}\nint main() {\n \
    \   auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n  \
    \  assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code goes here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 0);\n    for (long i = n\
    \ - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n     \
    \   }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code goes here\n    long i;\n\
    \    for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i;\n   \
    \ for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\
    \    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 0;\n    for (long\
    \ i = 1; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i = n-1;\n\
    \    while(i > 0){\n        if(n%i == 0){\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n   \
    \     }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmp2ses2m05: /tmp/tmp2ses2m05.cpp:17: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i=2;\n\
    \    while(i<=n/2)\n    {\n        if(n%i==0)\n        {\n            n=i;\n \
    \       }\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: Exception
  stderr: 'tmpxkbhqqww: /tmp/tmpxkbhqqww.cpp:21: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\
    \    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i=n-1;\n\
    \    while(i>0){\n        if(n%i==0){\n            return i;\n        }\n    \
    \    i--;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Your code here\n    long max = 0;\n\
    \    for(long i = 1; i < n; i++){\n        if(n % i == 0){\n            max =\
    \ i;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate =\
    \ largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\
    \    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i=n-1;\n\
    \    while(i>0){\n        if(n%i==0){\n            return i;\n        }\n    \
    \    i--;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tlong largest = 0;\n\tfor (long i = 1;\
    \ i < n; i++) {\n\t\tif (n % i == 0) {\n\t\t\tlargest = i;\n\t\t}\n\t}\n\treturn\
    \ largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // YOUR CODE HERE\n    long i = n-1;\n\
    \    while(i>0){\n        if(n%i==0){\n            return i;\n        }\n    \
    \    i--;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\
    \    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\
    \    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // your code here\n  long max = 0;\n \
    \ for(long i = 1; i < n; i++){\n    if(n % i == 0){\n      max = i;\n    }\n \
    \ }\n  return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n \
    \   assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i < n) {\n \
    \       if (n % i == 0) {\n            return n / i;\n        }\n        i +=\
    \ 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i=n-1;\n\
    \    while(i>0){\n        if(n%i==0){\n            return i;\n        }\n    \
    \    i--;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i;\n   \
    \ for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // >>> largest_divisor(15)\n    // 5\n\
    \    // >>> largest_divisor(80)\n    // 40\n    // >>> largest_divisor(13)\n \
    \   // 1\n    // >>> largest_divisor(65535)\n    // 32767\n    // >>> largest_divisor(2**100-1)\n\
    \    // 68719476735\n    // >>> largest_divisor(2**1000-1)\n    // 524287\n  \
    \  // >>> largest_divisor(2**10000-1)\n    // 8191\n    // >>> largest_divisor(2**100000-1)\n\
    \    // 127\n    // >>> largest_divisor(2**1000000-1)\n    // 3\n    // >>> largest_divisor(2**10000000-1)\n\
    \    // 1\n    // >>> largest_divisor(2**100000000-1)\n    // 1\n    // >>> largest_divisor(2**1000000000-1)\n\
    \    // 1\n    // >>> largest_divisor(2**10000000000-1)\n    // 1\n    // >>>\
    \ largest_divisor(2**100000000000-1)\n    // 1\n    // >>> largest_divisor(2**1000000000000-1)\n\
    \    // 1\n    // >>> largest_divisor(2**10000000000000-1)\n    // 1\n    // >>>\
    \ largest_divisor(2**100000000000000-1)\n    // 1\n    // >>> largest_divisor(2**1000000000000000-1)\n\
    \    // 1\n    // >>> largest_divisor(2**10000000000000000-1)\n    // 1\n    //\
    \ >>> largest_divisor(2**100000000000000000-1)\n    // 1\n    // >>> largest_divisor(2**1000000000000000000-1)\n\
    \    // 1\n    // >>> largest_divisor(2**10000000000000000000-1)\n    // 1\n \
    \   // >>> largest_divisor(2**100000000000000000000-1)\n    // 1\n    // >>> largest_divisor(2**1000000000000000000000-1)\n\
    \    // 1\n    // >>> largest_divis\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: Exception
  stderr: 'tmpc8p_nypp: /tmp/tmpc8p_nypp.cpp:59: int main(): Assertion `candidate((3))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i=n-1;\n\
    \    while(i>0){\n        if(n%i==0){\n            return i;\n        }\n    \
    \    i--;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    for(long\
    \ i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return i;\n\
    \        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate =\
    \ largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i=n-1;\n\
    \    while(i>0){\n        if(n%i==0){\n            return i;\n        }\n    \
    \    i--;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\
    \    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i;\n   \
    \ for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i = n - 1;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i=n-1;\n\
    \    while(i>0){\n        if(n%i==0){\n            return i;\n        }\n    \
    \    i--;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n    long i;\n   \
    \ for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i\
    \ = n-1;\n    while(i>0){\n        if(n%i==0){\n            return i;\n      \
    \  }\n        i--;\n    }\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // YOUR CODE HERE\n    long i=n-1;\n\
    \    while(i>0){\n        if(n%i==0){\n            return i;\n        }\n    \
    \    i--;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long i;\n\
    \    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    for (long i = n\
    \ - 1; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n    \
    \    }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
