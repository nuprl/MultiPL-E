name: HumanEval_136_largest_smallest_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns\
  \ a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is\
  \ the smallest\n// of positive integers in a list.\n// If there is no negative or\
  \ positive integers, return them as None.\n// Examples:\n// largest_smallest_integers([2,\
  \ 4, 1, 3, 5, 7]) == (None, 1)\n// largest_smallest_integers([]) == (None, None)\n\
  // largest_smallest_integers([0]) == (None, None)\nstd::tuple<std::optional<long>,\
  \ std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>({}),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>({}),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
  \ (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n\
  \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2,\
  \ (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9,\
  \ 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>({}),\
  \ std::optional<long>({})));\n    assert(candidate((std::vector<long>({(long)0})))\
  \ == std::make_tuple(std::optional<long>({}), std::optional<long>({})));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>({})));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6,\
  \ (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>({})));\n\
  \    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3,\
  \ (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6,\
  \ (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n\
  }\n"
completions: ["  std::optional<long> a, b;\n  for (auto i : lst) {\n    if (i < 0)\
    \ {\n      if (!a.has_value() || i > a.value()) {\n        a = i;\n      }\n \
    \   } else if (i > 0) {\n      if (!b.has_value() || i < b.value()) {\n      \
    \  b = i;\n      }\n    }\n  }\n  return std::make_tuple(a, b);", "  std::optional<long>\
    \ largest;\n  std::optional<long> smallest;\n  for (auto i : lst) {\n    if (i\
    \ < 0) {\n      if (!largest.has_value() || i > largest.value()) {\n        largest\
    \ = i;\n      }\n    } else if (i > 0) {\n      if (!smallest.has_value() || i\
    \ < smallest.value()) {\n        smallest = i;\n      }\n    }\n  }\n  return\
    \ std::make_tuple(largest, smallest);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto &i : lst) {\n        if (i < 0) {\n      \
    \      if (!largest_negative.has_value() || i > largest_negative.value()) {\n\
    \                largest_negative = i;\n            }\n        } else if (i >\
    \ 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return {largest_negative, smallest_positive};", "    if(lst.size() == 0)\n\
    \        return std::make_tuple(std::nullopt, std::nullopt);\n    long max = 0,\
    \ min = 0;\n    bool max_flag = false, min_flag = false;\n    for(int i = 0; i\
    \ < lst.size(); i++) {\n        if(lst[i] < 0) {\n            if(!max_flag) {\n\
    \                max = lst[i];\n                max_flag = true;\n           \
    \ }\n            else if(lst[i] > max)\n                max = lst[i];\n      \
    \  }\n        else if(lst[i] > 0) {\n            if(!min_flag) {\n           \
    \     min = lst[i];\n                min_flag = true;\n            }\n       \
    \     else if(lst[i] < min)\n                min = lst[i];\n        }\n    }\n\
    \    if(max_flag && min_flag)\n        return std::make_tuple(max, min);\n   \
    \ else if(max_flag)\n        return std::make_tuple(max, std::nullopt);\n    else\
    \ if(min_flag)\n        return std::make_tuple(std::nullopt, min);\n    else\n\
    \        return std::make_tuple(std::nullopt, std::nullopt);", "    if(lst.size()\
    \ == 0) return {std::nullopt, std::nullopt};\n    long max = 0, min = 0;\n   \
    \ bool max_set = false, min_set = false;\n    for(int i = 0; i < lst.size(); i++)\
    \ {\n        if(lst[i] < 0) {\n            if(!max_set) {\n                max\
    \ = lst[i];\n                max_set = true;\n            }\n            else\
    \ if(lst[i] > max) max = lst[i];\n        }\n        else if(lst[i] > 0) {\n \
    \           if(!min_set) {\n                min = lst[i];\n                min_set\
    \ = true;\n            }\n            else if(lst[i] < min) min = lst[i];\n  \
    \      }\n    }\n    if(!max_set) max = std::nullopt;\n    if(!min_set) min =\
    \ std::nullopt;\n    return {max, min};", "  std::optional<long> largestNegative;\n\
    \  std::optional<long> smallestPositive;\n  for (auto i : lst) {\n    if (i <\
    \ 0) {\n      if (!largestNegative.has_value() || i > largestNegative.value())\
    \ {\n        largestNegative = i;\n      }\n    } else if (i > 0) {\n      if\
    \ (!smallestPositive.has_value() || i < smallestPositive.value()) {\n        smallestPositive\
    \ = i;\n      }\n    }\n  }\n  return std::make_tuple(largestNegative, smallestPositive);",
  "\tstd::optional<long> largest_negative;\n\tstd::optional<long> smallest_positive;\n\
    \tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largest_negative.has_value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t\telse if (i > largest_negative.value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!smallest_positive.has_value()) {\n\t\t\t\tsmallest_positive = i;\n\t\t\t\
    }\n\t\t\telse if (i < smallest_positive.value()) {\n\t\t\t\tsmallest_positive\
    \ = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_negative, smallest_positive);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "\tstd::optional<long> largest_negative;\n\tstd::optional<long>\
    \ smallest_positive;\n\tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largest_negative.has_value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t\telse if (i > largest_negative.value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!smallest_positive.has_value()) {\n\t\t\t\tsmallest_positive = i;\n\t\t\t\
    }\n\t\t\telse if (i < smallest_positive.value()) {\n\t\t\t\tsmallest_positive\
    \ = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_negative, smallest_positive);",
  "    std::optional<long> largestNegative;\n    std::optional<long> smallestPositive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largestNegative.has_value()\
    \ || i > largestNegative.value()) {\n                largestNegative = i;\n  \
    \          }\n        } else if (i > 0) {\n            if (!smallestPositive.has_value()\
    \ || i < smallestPositive.value()) {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largestNegative,\
    \ smallestPositive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    if(lst.size() == 0)\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    long max = lst[0];\n    long min = lst[0];\n    for(int\
    \ i = 0; i < lst.size(); i++) {\n        if(lst[i] > max)\n            max = lst[i];\n\
    \        if(lst[i] < min)\n            min = lst[i];\n    }\n    return std::make_tuple(max,\
    \ min);", "    std::optional<long> max_neg, min_pos;\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            if (!max_neg.has_value() || i > max_neg.value())\
    \ {\n                max_neg = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!min_pos.has_value() || i < min_pos.value()) {\n            \
    \    min_pos = i;\n            }\n        }\n    }\n    return {max_neg, min_pos};",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_neg;\n    std::optional<long>\
    \ smallest_pos;\n    for (auto i : lst) {\n        if (i < 0 && (!largest_neg\
    \ || i > *largest_neg)) {\n            largest_neg = i;\n        }\n        if\
    \ (i > 0 && (!smallest_pos || i < *smallest_pos)) {\n            smallest_pos\
    \ = i;\n        }\n    }\n    return {largest_neg, smallest_pos};", "    std::optional<long>\
    \ largest_neg;\n    std::optional<long> smallest_pos;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!largest_neg.has_value() || i > largest_neg.value())\
    \ {\n                largest_neg = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_pos.has_value() || i < smallest_pos.value()) {\n\
    \                smallest_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(largest_neg, smallest_pos);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i > 0) {\n            if (!b.has_value()\
    \ || i < b.value()) {\n                b = i;\n            }\n        } else if\
    \ (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n            \
    \    a = i;\n            }\n        }\n    }\n    return {a, b};", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_neg, smallest_pos;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            if (!largest_neg.has_value() || i > largest_neg.value()) {\n    \
    \            largest_neg = i;\n            }\n        } else if (i > 0) {\n  \
    \          if (!smallest_pos.has_value() || i < smallest_pos.value()) {\n    \
    \            smallest_pos = i;\n            }\n        }\n    }\n    return {largest_neg,\
    \ smallest_pos};", "    std::optional<long> a, b;\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n  \
    \              a = i;\n            }\n        } else if (i > 0) {\n          \
    \  if (!b.has_value() || i < b.value()) {\n                b = i;\n          \
    \  }\n        }\n    }\n    return {a, b};", "    std::optional<long> largestNegative;\n\
    \    std::optional<long> smallestPositive;\n    for (auto i : lst) {\n       \
    \ if (i < 0) {\n            if (!largestNegative.has_value() || i > largestNegative.value())\
    \ {\n                largestNegative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallestPositive.has_value() || i < smallestPositive.value())\
    \ {\n                smallestPositive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largestNegative, smallestPositive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "\tstd::optional<long> largest_negative;\n\tstd::optional<long>\
    \ smallest_positive;\n\tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largest_negative.has_value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t\telse if (i > largest_negative.value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!smallest_positive.has_value()) {\n\t\t\t\tsmallest_positive = i;\n\t\t\t\
    }\n\t\t\telse if (i < smallest_positive.value()) {\n\t\t\t\tsmallest_positive\
    \ = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_negative, smallest_positive);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_neg;\n    std::optional<long>\
    \ smallest_pos;\n    for (auto i : lst) {\n        if (i < 0) {\n            if\
    \ (!largest_neg.has_value() || i > largest_neg.value()) {\n                largest_neg\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_pos.has_value()\
    \ || i < smallest_pos.value()) {\n                smallest_pos = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(largest_neg, smallest_pos);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto num : lst) {\n        if (num < 0) {\n            if (!largest_negative.has_value()\
    \ || num > largest_negative.value()) {\n                largest_negative = num;\n\
    \            }\n        } else if (num > 0) {\n            if (!smallest_positive.has_value()\
    \ || num < smallest_positive.value()) {\n                smallest_positive = num;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "\tstd::optional<long>\
    \ largest_negative;\n\tstd::optional<long> smallest_positive;\n\tfor (auto i :\
    \ lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largest_negative.has_value()) {\n\t\t\t\
    \tlargest_negative = i;\n\t\t\t}\n\t\t\telse if (i > largest_negative.value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!smallest_positive.has_value()) {\n\t\t\t\tsmallest_positive = i;\n\t\t\t\
    }\n\t\t\telse if (i < smallest_positive.value()) {\n\t\t\t\tsmallest_positive\
    \ = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_negative, smallest_positive);",
  "    std::optional<long> largest_neg;\n    std::optional<long> smallest_pos;\n \
    \   for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_neg.has_value()\
    \ || i > largest_neg.value()) {\n                largest_neg = i;\n          \
    \  }\n        } else if (i > 0) {\n            if (!smallest_pos.has_value() ||\
    \ i < smallest_pos.value()) {\n                smallest_pos = i;\n           \
    \ }\n        }\n    }\n    return std::make_tuple(largest_neg, smallest_pos);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "\tstd::optional<long> largest_negative;\n\tstd::optional<long>\
    \ smallest_positive;\n\tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largest_negative.has_value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t\telse if (i > largest_negative.value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!smallest_positive.has_value()) {\n\t\t\t\tsmallest_positive = i;\n\t\t\t\
    }\n\t\t\telse if (i < smallest_positive.value()) {\n\t\t\t\tsmallest_positive\
    \ = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_negative, smallest_positive);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largestNegative;\n    std::optional<long>\
    \ smallestPositive;\n    for (auto i : lst) {\n        if (i < 0) {\n        \
    \    if (!largestNegative.has_value() || i > largestNegative.value()) {\n    \
    \            largestNegative = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!smallestPositive.has_value() || i < smallestPositive.value())\
    \ {\n                smallestPositive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largestNegative, smallestPositive);", "    std::optional<long>\
    \ largest_neg;\n    std::optional<long> smallest_pos;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!largest_neg.has_value() || i > largest_neg.value())\
    \ {\n                largest_neg = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_pos.has_value() || i < smallest_pos.value()) {\n\
    \                smallest_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(largest_neg, smallest_pos);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_neg;\n    std::optional<long>\
    \ smallest_pos;\n    for (auto i : lst) {\n        if (i < 0) {\n            if\
    \ (!largest_neg.has_value() || i > largest_neg.value()) {\n                largest_neg\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_pos.has_value()\
    \ || i < smallest_pos.value()) {\n                smallest_pos = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(largest_neg, smallest_pos);",
  "  std::optional<long> largest_neg;\n  std::optional<long> smallest_pos;\n  for\
    \ (auto i : lst) {\n    if (i < 0) {\n      if (!largest_neg.has_value() || i\
    \ > largest_neg.value()) {\n        largest_neg = i;\n      }\n    } else if (i\
    \ > 0) {\n      if (!smallest_pos.has_value() || i < smallest_pos.value()) {\n\
    \        smallest_pos = i;\n      }\n    }\n  }\n  return std::make_tuple(largest_neg,\
    \ smallest_pos);", "    std::optional<long> a;\n    std::optional<long> b;\n \
    \   for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> largest_neg, smallest_pos;\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            if (!largest_neg || i > *largest_neg)\n   \
    \             largest_neg = i;\n        } else if (i > 0) {\n            if (!smallest_pos\
    \ || i < *smallest_pos)\n                smallest_pos = i;\n        }\n    }\n\
    \    return {largest_neg, smallest_pos};", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_neg;\n    std::optional<long> smallest_pos;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!largest_neg.has_value() || i > largest_neg.value())\
    \ {\n                largest_neg = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_pos.has_value() || i < smallest_pos.value()) {\n\
    \                smallest_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(largest_neg, smallest_pos);", "    std::optional<long> a, b;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return {a, b};", "    std::optional<long>\
    \ largest_negative = std::nullopt;\n    std::optional<long> smallest_positive\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (!largest_negative.has_value() || i > largest_negative.value()) {\n    \
    \            largest_negative = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "  std::optional<long> largest_negative;\n  std::optional<long>\
    \ smallest_positive;\n  for (auto i : lst) {\n    if (i < 0) {\n      if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n        largest_negative = i;\n      }\n\
    \    } else if (i > 0) {\n      if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n        smallest_positive = i;\n      }\n    }\n  }\n  return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_neg;\n    std::optional<long>\
    \ smallest_pos;\n    for (auto i : lst) {\n        if (i < 0) {\n            if\
    \ (!largest_neg.has_value() || i > largest_neg.value()) {\n                largest_neg\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_pos.has_value()\
    \ || i < smallest_pos.value()) {\n                smallest_pos = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(largest_neg, smallest_pos);",
  "    if(lst.size() == 0)\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    long max_neg = -1000000000;\n    long min_pos = 1000000000;\n    for(int\
    \ i = 0; i < lst.size(); i++) {\n        if(lst[i] < 0) {\n            if(lst[i]\
    \ > max_neg)\n                max_neg = lst[i];\n        }\n        else if(lst[i]\
    \ > 0) {\n            if(lst[i] < min_pos)\n                min_pos = lst[i];\n\
    \        }\n    }\n    if(max_neg == -1000000000)\n        max_neg = std::nullopt;\n\
    \    if(min_pos == 1000000000)\n        min_pos = std::nullopt;\n    return std::make_tuple(max_neg,\
    \ min_pos);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative, smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return {largest_negative, smallest_positive};",
  "    std::optional<long> largestNegative = std::nullopt;\n    std::optional<long>\
    \ smallestPositive = std::nullopt;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (!largestNegative.has_value() || i > largestNegative.value())\
    \ {\n                largestNegative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallestPositive.has_value() || i < smallestPositive.value())\
    \ {\n                smallestPositive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largestNegative, smallestPositive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::tuple<std::optional<long>, std::optional<long>>\
    \ result;\n    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto num : lst) {\n        if (num < 0) {\n   \
    \         if (!largest_negative.has_value() || num > largest_negative.value())\
    \ {\n                largest_negative = num;\n            }\n        } else if\
    \ (num > 0) {\n            if (!smallest_positive.has_value() || num < smallest_positive.value())\
    \ {\n                smallest_positive = num;\n            }\n        }\n    }\n\
    \    std::get<0>(result) = largest_negative;\n    std::get<1>(result) = smallest_positive;\n\
    \    return result;", "    std::optional<long> a;\n    std::optional<long> b;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return std::make_tuple(a, b);",
  "    std::optional<long> largestNegative;\n    std::optional<long> smallestPositive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largestNegative.has_value()\
    \ || i > largestNegative.value()) {\n                largestNegative = i;\n  \
    \          }\n        } else if (i > 0) {\n            if (!smallestPositive.has_value()\
    \ || i < smallestPositive.value()) {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largestNegative,\
    \ smallestPositive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ maxNegative;\n    std::optional<long> minPositive;\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            if (!maxNegative.has_value() || i > maxNegative.value())\
    \ {\n                maxNegative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!minPositive.has_value() || i < minPositive.value()) {\n\
    \                minPositive = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(maxNegative, minPositive);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative || i > *largest_negative) {\n\
    \                largest_negative = i;\n            }\n        } else if (i >\
    \ 0) {\n            if (!smallest_positive || i < *smallest_positive) {\n    \
    \            smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ {largest_negative, smallest_positive};", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> smallest_positive;\n    std::optional<long>\
    \ largest_negative;\n    for (auto i : lst) {\n        if (i > 0) {\n        \
    \    if (!smallest_positive || i < *smallest_positive) {\n                smallest_positive\
    \ = i;\n            }\n        } else if (i < 0) {\n            if (!largest_negative\
    \ || i > *largest_negative) {\n                largest_negative = i;\n       \
    \     }\n        }\n    }\n    return {largest_negative, smallest_positive};",
  "    std::optional<long> largest_negative, smallest_positive;\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return {largest_negative, smallest_positive};",
  "    std::optional<long> a;\n    std::optional<long> b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return std::make_tuple(a, b);", "    std::optional<long>\
    \ largestNegative;\n    std::optional<long> smallestPositive;\n    for (auto i\
    \ : lst) {\n        if (i < 0) {\n            if (!largestNegative.has_value()\
    \ || i > largestNegative.value()) {\n                largestNegative = i;\n  \
    \          }\n        } else if (i > 0) {\n            if (!smallestPositive.has_value()\
    \ || i < smallestPositive.value()) {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largestNegative,\
    \ smallestPositive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0 && (!largest_negative\
    \ || i > *largest_negative)) {\n            largest_negative = i;\n        }\n\
    \        if (i > 0 && (!smallest_positive || i < *smallest_positive)) {\n    \
    \        smallest_positive = i;\n        }\n    }\n    return {largest_negative,\
    \ smallest_positive};", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return {a, b};", "\tstd::optional<long> a, b;\n\t\
    for (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!a.has_value() || i > a.value())\
    \ {\n\t\t\t\ta = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\tif (!b.has_value()\
    \ || i < b.value()) {\n\t\t\t\tb = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn { a, b };",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return {a, b};", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest;\n    std::optional<long>\
    \ smallest;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest.has_value()\
    \ || i > largest.value()) {\n                largest = i;\n            }\n   \
    \     } else if (i > 0) {\n            if (!smallest.has_value() || i < smallest.value())\
    \ {\n                smallest = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(largest, smallest);", "\tstd::optional<long> largest_negative_integer;\n\
    \tstd::optional<long> smallest_positive_integer;\n\tfor (auto i : lst) {\n\t\t\
    if (i < 0) {\n\t\t\tif (!largest_negative_integer.has_value()) {\n\t\t\t\tlargest_negative_integer\
    \ = i;\n\t\t\t}\n\t\t\telse if (i > largest_negative_integer.value()) {\n\t\t\t\
    \tlargest_negative_integer = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\t\
    if (!smallest_positive_integer.has_value()) {\n\t\t\t\tsmallest_positive_integer\
    \ = i;\n\t\t\t}\n\t\t\telse if (i < smallest_positive_integer.value()) {\n\t\t\
    \t\tsmallest_positive_integer = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_negative_integer,\
    \ smallest_positive_integer);", "    std::optional<long> a, b;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value())\
    \ {\n                a = i;\n            }\n        } else if (i > 0) {\n    \
    \        if (!b.has_value() || i < b.value()) {\n                b = i;\n    \
    \        }\n        }\n    }\n    return {a, b};", "    std::optional<long> largestNegative;\n\
    \    std::optional<long> smallestPositive;\n    for (auto i : lst) {\n       \
    \ if (i < 0) {\n            if (!largestNegative.has_value() || i > largestNegative.value())\
    \ {\n                largestNegative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallestPositive.has_value() || i < smallestPositive.value())\
    \ {\n                smallestPositive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largestNegative, smallestPositive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative_integer;\n \
    \   std::optional<long> smallest_positive_integer;\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            if (!largest_negative_integer.has_value() ||\
    \ i > largest_negative_integer.value()) {\n                largest_negative_integer\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_positive_integer.has_value()\
    \ || i < smallest_positive_integer.value()) {\n                smallest_positive_integer\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(largest_negative_integer,\
    \ smallest_positive_integer);", "    std::optional<long> largest_negative;\n \
    \   std::optional<long> smallest_positive;\n    for (auto i : lst) {\n       \
    \ if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest;\n    std::optional<long> smallest;\n    for (auto i : lst) {\n    \
    \    if (i < 0) {\n            if (!largest.has_value() || i > largest.value())\
    \ {\n                largest = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!smallest.has_value() || i < smallest.value()) {\n          \
    \      smallest = i;\n            }\n        }\n    }\n    return {largest, smallest};",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return {a, b};", "\tstd::optional<long>\
    \ largest_negative;\n\tstd::optional<long> smallest_positive;\n\tfor (auto i :\
    \ lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largest_negative.has_value()) {\n\t\t\t\
    \tlargest_negative = i;\n\t\t\t}\n\t\t\telse if (i > largest_negative.value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!smallest_positive.has_value()) {\n\t\t\t\tsmallest_positive = i;\n\t\t\t\
    }\n\t\t\telse if (i < smallest_positive.value()) {\n\t\t\t\tsmallest_positive\
    \ = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_negative, smallest_positive);",
  "    std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return {a, b};", "    std::optional<long> largest;\n    std::optional<long>\
    \ smallest;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest.has_value()\
    \ || i > largest.value()) {\n                largest = i;\n            }\n   \
    \     } else if (i > 0) {\n            if (!smallest.has_value() || i < smallest.value())\
    \ {\n                smallest = i;\n            }\n        }\n    }\n    return\
    \ {largest, smallest};", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative || i > *largest_negative) {\n                largest_negative\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_positive\
    \ || i < *smallest_positive) {\n                smallest_positive = i;\n     \
    \       }\n        }\n    }\n    return {largest_negative, smallest_positive};",
  "\tstd::optional<long> largestNegative;\n\tstd::optional<long> smallestPositive;\n\
    \tfor (auto& i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largestNegative.has_value()\
    \ || i > largestNegative.value()) {\n\t\t\t\tlargestNegative = i;\n\t\t\t}\n\t\
    \t}\n\t\telse if (i > 0) {\n\t\t\tif (!smallestPositive.has_value() || i < smallestPositive.value())\
    \ {\n\t\t\t\tsmallestPositive = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largestNegative,\
    \ smallestPositive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "  std::optional<long>\
    \ largest_neg, smallest_pos;\n  for (auto i : lst) {\n    if (i < 0) {\n     \
    \ if (!largest_neg || i > *largest_neg) {\n        largest_neg = i;\n      }\n\
    \    } else if (i > 0) {\n      if (!smallest_pos || i < *smallest_pos) {\n  \
    \      smallest_pos = i;\n      }\n    }\n  }\n  return {largest_neg, smallest_pos};",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_neg;\n    std::optional<long>\
    \ smallest_pos;\n    for (auto i : lst) {\n        if (i < 0) {\n            if\
    \ (!largest_neg || i > *largest_neg) {\n                largest_neg = i;\n   \
    \         }\n        } else if (i > 0) {\n            if (!smallest_pos || i <\
    \ *smallest_pos) {\n                smallest_pos = i;\n            }\n       \
    \ }\n    }\n    return {largest_neg, smallest_pos};", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return {a, b};", "  std::optional<long>\
    \ largest_negative;\n  std::optional<long> smallest_positive;\n  for (auto i :\
    \ lst) {\n    if (i < 0) {\n      if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n        largest_negative = i;\n      }\n    } else if (i > 0) {\n      if\
    \ (!smallest_positive.has_value() || i < smallest_positive.value()) {\n      \
    \  smallest_positive = i;\n      }\n    }\n  }\n  return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto x : lst) {\n        if (x < 0) {\n       \
    \     if (!largest_negative.has_value() || x > largest_negative.value()) {\n \
    \               largest_negative = x;\n            }\n        } else if (x > 0)\
    \ {\n            if (!smallest_positive.has_value() || x < smallest_positive.value())\
    \ {\n                smallest_positive = x;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return {a, b};", "    std::optional<long>\
    \ largest_negative_int;\n    std::optional<long> smallest_positive_int;\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            if (!largest_negative_int.has_value()\
    \ || i > largest_negative_int.value()) {\n                largest_negative_int\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_positive_int.has_value()\
    \ || i < smallest_positive_int.value()) {\n                smallest_positive_int\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(largest_negative_int,\
    \ smallest_positive_int);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "\tlong largest\
    \ = 0;\n\tlong smallest = 0;\n\tbool largest_set = false;\n\tbool smallest_set\
    \ = false;\n\tfor (long i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largest_set)\
    \ {\n\t\t\t\tlargest = i;\n\t\t\t\tlargest_set = true;\n\t\t\t}\n\t\t\telse if\
    \ (i > largest) {\n\t\t\t\tlargest = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\
    \t\t\tif (!smallest_set) {\n\t\t\t\tsmallest = i;\n\t\t\t\tsmallest_set = true;\n\
    \t\t\t}\n\t\t\telse if (i < smallest) {\n\t\t\t\tsmallest = i;\n\t\t\t}\n\t\t\
    }\n\t}\n\tstd::optional<long> largest_opt;\n\tstd::optional<long> smallest_opt;\n\
    \tif (largest_set) {\n\t\tlargest_opt = largest;\n\t}\n\tif (smallest_set) {\n\
    \t\tsmallest_opt = smallest;\n\t}\n\treturn std::make_tuple(largest_opt, smallest_opt);",
  "    std::optional<long> a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return {a, b};", "    std::optional<long> largestNegative;\n    std::optional<long>\
    \ smallestPositive;\n    for (auto i : lst) {\n        if (i < 0) {\n        \
    \    if (!largestNegative.has_value() || i > largestNegative.value()) {\n    \
    \            largestNegative = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!smallestPositive.has_value() || i < smallestPositive.value())\
    \ {\n                smallestPositive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largestNegative, smallestPositive);", "    std::optional<long>\
    \ max_neg;\n    std::optional<long> min_pos;\n    for (auto i : lst) {\n     \
    \   if (i < 0) {\n            if (!max_neg.has_value() || i > max_neg.value())\
    \ {\n                max_neg = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!min_pos.has_value() || i < min_pos.value()) {\n            \
    \    min_pos = i;\n            }\n        }\n    }\n    return std::make_tuple(max_neg,\
    \ min_pos);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative, smallest_positive;\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return {largest_negative, smallest_positive};", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> maxNegative;\n    std::optional<long>\
    \ minPositive;\n    for (auto i : lst) {\n        if (i < 0) {\n            if\
    \ (!maxNegative.has_value() || i > maxNegative.value()) {\n                maxNegative\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!minPositive.has_value()\
    \ || i < minPositive.value()) {\n                minPositive = i;\n          \
    \  }\n        }\n    }\n    return std::make_tuple(maxNegative, minPositive);",
  "    std::optional<long> largest_neg;\n    std::optional<long> smallest_pos;\n \
    \   for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_neg.has_value()\
    \ || i > largest_neg.value()) {\n                largest_neg = i;\n          \
    \  }\n        } else if (i > 0) {\n            if (!smallest_pos.has_value() ||\
    \ i < smallest_pos.value()) {\n                smallest_pos = i;\n           \
    \ }\n        }\n    }\n    return std::make_tuple(largest_neg, smallest_pos);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return {a, b};", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return {a, b};", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative || i > *largest_negative) {\n                largest_negative\
    \ = i;\n            }\n        } else if (i > 0) {\n            if (!smallest_positive\
    \ || i < *smallest_positive) {\n                smallest_positive = i;\n     \
    \       }\n        }\n    }\n    return {largest_negative, smallest_positive};",
  "    if(lst.size() == 0) return {std::nullopt, std::nullopt};\n    long max = 0,\
    \ min = 0;\n    bool max_set = false, min_set = false;\n    for(auto i : lst)\
    \ {\n        if(i < 0) {\n            if(!max_set) {\n                max = i;\n\
    \                max_set = true;\n            } else {\n                max =\
    \ std::max(max, i);\n            }\n        } else if(i > 0) {\n            if(!min_set)\
    \ {\n                min = i;\n                min_set = true;\n            }\
    \ else {\n                min = std::min(min, i);\n            }\n        }\n\
    \    }\n    if(max_set && min_set) return {max, min};\n    if(max_set) return\
    \ {max, std::nullopt};\n    if(min_set) return {std::nullopt, min};\n    return\
    \ {std::nullopt, std::nullopt};", "\tstd::optional<long> largest_negative;\n\t\
    std::optional<long> smallest_positive;\n\tfor (auto i : lst) {\n\t\tif (i < 0)\
    \ {\n\t\t\tif (!largest_negative.has_value()) {\n\t\t\t\tlargest_negative = i;\n\
    \t\t\t}\n\t\t\telse if (i > largest_negative.value()) {\n\t\t\t\tlargest_negative\
    \ = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\tif (!smallest_positive.has_value())\
    \ {\n\t\t\t\tsmallest_positive = i;\n\t\t\t}\n\t\t\telse if (i < smallest_positive.value())\
    \ {\n\t\t\t\tsmallest_positive = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "\tstd::optional<long> largest_negative;\n\tstd::optional<long>\
    \ smallest_positive;\n\tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largest_negative.has_value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t\telse if (i > largest_negative.value())\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!smallest_positive.has_value()) {\n\t\t\t\tsmallest_positive = i;\n\t\t\t\
    }\n\t\t\telse if (i < smallest_positive.value()) {\n\t\t\t\tsmallest_positive\
    \ = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::make_tuple(largest_negative, smallest_positive);",
  "    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "\tstd::optional<long>\
    \ a;\n\tstd::optional<long> b;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\t\
    if (lst[i] < 0) {\n\t\t\tif (a == std::nullopt) {\n\t\t\t\ta = lst[i];\n\t\t\t\
    }\n\t\t\telse if (lst[i] > *a) {\n\t\t\t\ta = lst[i];\n\t\t\t}\n\t\t}\n\t\telse\
    \ if (lst[i] > 0) {\n\t\t\tif (b == std::nullopt) {\n\t\t\t\tb = lst[i];\n\t\t\
    \t}\n\t\t\telse if (lst[i] < *b) {\n\t\t\t\tb = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return {a, b};", "  std::optional<long>\
    \ largest_negative;\n  std::optional<long> smallest_positive;\n  for (auto i :\
    \ lst) {\n    if (i < 0) {\n      if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n        largest_negative = i;\n      }\n    } else if (i > 0) {\n      if\
    \ (!smallest_positive.has_value() || i < smallest_positive.value()) {\n      \
    \  smallest_positive = i;\n      }\n    }\n  }\n  return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largestNegative;\n    std::optional<long>\
    \ smallestPositive;\n    for (long i : lst) {\n        if (i < 0) {\n        \
    \    if (!largestNegative.has_value() || i > largestNegative.value()) {\n    \
    \            largestNegative = i;\n            }\n        } else if (i > 0) {\n\
    \            if (!smallestPositive.has_value() || i < smallestPositive.value())\
    \ {\n                smallestPositive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largestNegative, smallestPositive);", "    std::optional<long>\
    \ a, b;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value())\n                a = i;\n        } else if (i > 0) {\n   \
    \         if (!b.has_value() || i < b.value())\n                b = i;\n     \
    \   }\n    }\n    return {a, b};", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            if (!a.has_value() || i > a.value()) {\n                a = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!b.has_value() ||\
    \ i < b.value()) {\n                b = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> a, b;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value())\
    \ {\n                a = i;\n            }\n        } else if (i > 0) {\n    \
    \        if (!b.has_value() || i < b.value()) {\n                b = i;\n    \
    \        }\n        }\n    }\n    return {a, b};", "    std::optional<long> max_neg,\
    \ min_pos;\n    for (long i : lst) {\n        if (i < 0) {\n            if (!max_neg.has_value()\
    \ || i > max_neg.value()) {\n                max_neg = i;\n            }\n   \
    \     } else if (i > 0) {\n            if (!min_pos.has_value() || i < min_pos.value())\
    \ {\n                min_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(max_neg, min_pos);", "\tstd::optional<long> largest_neg, smallest_pos;\n\
    \tfor (auto num : lst) {\n\t\tif (num < 0) {\n\t\t\tif (!largest_neg.has_value()\
    \ || num > largest_neg.value()) {\n\t\t\t\tlargest_neg = num;\n\t\t\t}\n\t\t}\n\
    \t\telse if (num > 0) {\n\t\t\tif (!smallest_pos.has_value() || num < smallest_pos.value())\
    \ {\n\t\t\t\tsmallest_pos = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn {largest_neg,\
    \ smallest_pos};", "    std::optional<long> largest_negative, smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative\
    \ || i > *largest_negative) {\n                largest_negative = i;\n       \
    \     }\n        } else if (i > 0) {\n            if (!smallest_positive || i\
    \ < *smallest_positive) {\n                smallest_positive = i;\n          \
    \  }\n        }\n    }\n    return {largest_negative, smallest_positive};", " \
    \ std::optional<long> largest_negative;\n  std::optional<long> smallest_positive;\n\
    \  for (auto i : lst) {\n    if (i < 0) {\n      if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n        largest_negative = i;\n      }\n\
    \    } else if (i > 0) {\n      if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n        smallest_positive = i;\n      }\n    }\n  }\n  return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (long i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative || i > *largest_negative)\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive || i < *smallest_positive) {\n  \
    \              smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ {largest_negative, smallest_positive};", "    std::optional<long> largest_neg;\n\
    \    std::optional<long> smallest_pos;\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            if (!largest_neg.has_value() || i > largest_neg.value())\
    \ {\n                largest_neg = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_pos.has_value() || i < smallest_pos.value()) {\n\
    \                smallest_pos = i;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(largest_neg, smallest_pos);", "    std::optional<long> largest_negative;\n\
    \    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "\tstd::optional<long> largest_negative;\n\tstd::optional<long>\
    \ smallest_positive;\n\tfor (auto i : lst) {\n\t\tif (i < 0) {\n\t\t\tif (!largest_negative)\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t\telse if (i > *largest_negative)\
    \ {\n\t\t\t\tlargest_negative = i;\n\t\t\t}\n\t\t}\n\t\telse if (i > 0) {\n\t\t\
    \tif (!smallest_positive) {\n\t\t\t\tsmallest_positive = i;\n\t\t\t}\n\t\t\telse\
    \ if (i < *smallest_positive) {\n\t\t\t\tsmallest_positive = i;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn std::make_tuple(largest_negative, smallest_positive);", "   \
    \ std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return {a, b};", "    std::optional<long> a, b;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (!a.has_value()\
    \ || i > a.value()) {\n                a = i;\n            }\n        } else if\
    \ (i > 0) {\n            if (!b.has_value() || i < b.value()) {\n            \
    \    b = i;\n            }\n        }\n    }\n    return {a, b};", "    std::optional<long>\
    \ largestNegative;\n    std::optional<long> smallestPositive;\n    for (auto i\
    \ : lst) {\n        if (i < 0) {\n            if (!largestNegative.has_value()\
    \ || i > largestNegative.value()) {\n                largestNegative = i;\n  \
    \          }\n        } else if (i > 0) {\n            if (!smallestPositive.has_value()\
    \ || i < smallestPositive.value()) {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largestNegative,\
    \ smallestPositive);", "    std::optional<long> a, b;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            if (!a.has_value() || i > a.value()) {\n\
    \                a = i;\n            }\n        } else if (i > 0) {\n        \
    \    if (!b.has_value() || i < b.value()) {\n                b = i;\n        \
    \    }\n        }\n    }\n    return {a, b};", "    std::optional<long> largest_neg;\n\
    \    std::optional<long> smallest_pos;\n    for (auto i : lst) {\n        if (i\
    \ < 0 && (!largest_neg || i > *largest_neg)) {\n            largest_neg = i;\n\
    \        }\n        if (i > 0 && (!smallest_pos || i < *smallest_pos)) {\n   \
    \         smallest_pos = i;\n        }\n    }\n    return {largest_neg, smallest_pos};",
  "    std::tuple<std::optional<long>, std::optional<long>> result;\n    std::optional<long>\
    \ largestNegative;\n    std::optional<long> smallestPositive;\n    for (auto i\
    \ : lst) {\n        if (i < 0) {\n            if (!largestNegative.has_value()\
    \ || i > largestNegative.value()) {\n                largestNegative = i;\n  \
    \          }\n        } else if (i > 0) {\n            if (!smallestPositive.has_value()\
    \ || i < smallestPositive.value()) {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    result = std::make_tuple(largestNegative,\
    \ smallestPositive);\n    return result;", "\tstd::optional<long> a, b;\n\tfor\
    \ (auto i : lst) {\n\t\tif (i > 0) {\n\t\t\tif (!b.has_value()) {\n\t\t\t\tb =\
    \ i;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tb = std::min(b.value(), i);\n\t\t\t}\n\t\t\
    }\n\t\telse if (i < 0) {\n\t\t\tif (!a.has_value()) {\n\t\t\t\ta = i;\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\ta = std::max(a.value(), i);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return std::make_tuple(a, b);", "    std::optional<long> largest_negative;\n \
    \   std::optional<long> smallest_positive;\n    for (auto i : lst) {\n       \
    \ if (i < 0) {\n            if (!largest_negative.has_value() || i > largest_negative.value())\
    \ {\n                largest_negative = i;\n            }\n        } else if (i\
    \ > 0) {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);", "    std::optional<long> largest_negative;\n    std::optional<long>\
    \ smallest_positive;\n    for (auto i : lst) {\n        if (i < 0) {\n       \
    \     if (!largest_negative.has_value() || i > largest_negative.value()) {\n \
    \               largest_negative = i;\n            }\n        } else if (i > 0)\
    \ {\n            if (!smallest_positive.has_value() || i < smallest_positive.value())\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(largest_negative, smallest_positive);", "    std::optional<long>\
    \ largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (!largest_negative.has_value()\
    \ || i > largest_negative.value()) {\n                largest_negative = i;\n\
    \            }\n        } else if (i > 0) {\n            if (!smallest_positive.has_value()\
    \ || i < smallest_positive.value()) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest_negative,\
    \ smallest_positive);"]
stop_tokens:
- "\n}"
