name: HumanEval_100_make_a_pile
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  while (n > 0) {\n    result.push_back(n);\n    if (n % 2 == 0) {\n      n =\
    \ n / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  while (n > 0) {\n    result.push_back(n);\n    if (n % 2 == 0) {\n      n =\
    \ n / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpe4rclh3m: /tmp/tmpe4rclh3m.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1hpgw0bn: /tmp/tmp1hpgw0bn.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpe1s3c038: /tmp/tmpe1s3c038.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpea3yd50k: /tmp/tmpea3yd50k.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmphw750i8i: /tmp/tmphw750i8i.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    while (n > 0) {\n        result.push_back(n);\n        if (n % 2 == 0) {\n\
    \            n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpzfbyj8j5: /tmp/tmpzfbyj8j5.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  for (int i = 1; i < n; i++) {\n    if (result[i - 1]\
    \ % 2 == 0) {\n      result.push_back(result[i - 1] + 1);\n    } else {\n    \
    \  result.push_back(result[i - 1] + 2);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpn1zbmzun: /tmp/tmpn1zbmzun.cpp:28: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 0) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n            result.push_back(n);\n        } else {\n  \
    \          n = (n + 1) / 2;\n            result.push_back(n);\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  if (n == 0) {\n    return result;\n  }\n  result.push_back(n);\n  while (n\
    \ > 1) {\n    if (n % 2 == 0) {\n      n = n / 2;\n    } else {\n      n = (n\
    \ + 1) / 2;\n    }\n    result.push_back(n);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpom3pcd59: /tmp/tmpom3pcd59.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj8rlcv0w: /tmp/tmpj8rlcv0w.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp45ft4xua: /tmp/tmp45ft4xua.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp0vtu0fmj: /tmp/tmp0vtu0fmj.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmplsn_c0or: /tmp/tmplsn_c0or.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpeqn0amay: /tmp/tmpeqn0amay.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp6yudaagy: /tmp/tmp6yudaagy.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpogbnqn2x: /tmp/tmpogbnqn2x.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmptx3inupb: /tmp/tmptx3inupb.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> v;\n\
    \    long i = n;\n    while(i > 0) {\n        v.push_back(i);\n        if(i %\
    \ 2 == 0) {\n            i = i / 2;\n        } else {\n            i = (i + 1)\
    \ / 2;\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate =\
    \ make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcz1mz0ys: /tmp/tmpcz1mz0ys.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpluhdoii0: /tmp/tmpluhdoii0.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzg_sa1vk: /tmp/tmpzg_sa1vk.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp73x91mbj: /tmp/tmp73x91mbj.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzfelu4lf: /tmp/tmpzfelu4lf.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpwme7wa86: /tmp/tmpwme7wa86.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  while (n > 0) {\n    result.push_back(n);\n    if (n % 2 == 0) {\n      n =\
    \ n / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp0cny4cm8: /tmp/tmp0cny4cm8.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> v;\n\
    \    for(long i = n; i > 0; i--) {\n        if(i % 2 == 0) {\n            v.push_back(i\
    \ + 1);\n        } else {\n            v.push_back(i + 2);\n        }\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfbu9tf2b: /tmp/tmpfbu9tf2b.cpp:26: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp78f54vj9: /tmp/tmp78f54vj9.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp1511evgp: /tmp/tmp1511evgp.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp7xxsm0f_: /tmp/tmp7xxsm0f_.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg7qhbhpz: /tmp/tmpg7qhbhpz.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpttfpn5tz: /tmp/tmpttfpn5tz.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpbw0k57zg: /tmp/tmpbw0k57zg.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpugdcz8jm: /tmp/tmpugdcz8jm.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp4fkt2kx3: /tmp/tmp4fkt2kx3.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2ehoieaa: /tmp/tmp2ehoieaa.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmptsc6t4w4: /tmp/tmptsc6t4w4.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp5io4wrwq: /tmp/tmp5io4wrwq.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9o45606h: /tmp/tmp9o45606h.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpo34wbghs: /tmp/tmpo34wbghs.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (long i = 0; i < n; i++) {\n        result.push_back(n + 2 * i);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> pile;\n\
    \    for (long i = n; i > 0; i--) {\n        pile.push_back(i);\n    }\n    return\
    \ pile;\n}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv1lb489y: /tmp/tmpv1lb489y.cpp:22: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> v;\n\
    \  long i = 1;\n  while (n > 0) {\n    v.push_back(n);\n    if (n % 2 == 0) {\n\
    \      n = n + i;\n    } else {\n      n = n + i + 1;\n    }\n    i = i + 2;\n\
    \  }\n  return v;\n}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpsq_o0b17: /tmp/tmpsq_o0b17.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  while (n > 0) {\n    result.push_back(n);\n    n = (n % 2 == 0) ? n + 1 : n\
    \ + 2;\n  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzfq413ha: /tmp/tmpzfq413ha.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> res;\n\
    \  for (long i = 0; i < n; i++) {\n    res.push_back(n + 2 * i);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpg0dxitsg: /tmp/tmpg0dxitsg.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_btn9frm: /tmp/tmp_btn9frm.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpg_fkm9b6: /tmp/tmpg_fkm9b6.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7cbtmpzj: /tmp/tmp7cbtmpzj.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp4musrtxh: /tmp/tmp4musrtxh.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp8dtc2_8h: /tmp/tmp8dtc2_8h.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    if (n == 0) {\n        return result;\n    }\n    result.push_back(n);\n\
    \    while (n > 0) {\n        if (n % 2 == 0) {\n            n = n / 2;\n    \
    \    } else {\n            n = (n - 1) / 2;\n        }\n        result.push_back(n);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpc6u5yevt: /tmp/tmpc6u5yevt.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmppcl4q1ii: /tmp/tmppcl4q1ii.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp28138rez: /tmp/tmp28138rez.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv4j4ypav: /tmp/tmpv4j4ypav.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  for (int i = 1; i < n; i++) {\n    if (n % 2 == 0)\
    \ {\n      result.push_back(result[i - 1] + 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + 1);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp8m3l5u0i: /tmp/tmp8m3l5u0i.cpp:27: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmppm1kf_1j: /tmp/tmppm1kf_1j.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp4jwq1qzq: /tmp/tmp4jwq1qzq.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgi093rxh: /tmp/tmpgi093rxh.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp7cqrt4k1: /tmp/tmp7cqrt4k1.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> res;\n\
    \    res.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n     \
    \       n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n        }\n\
    \        res.push_back(n);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpx7pza4c9: /tmp/tmpx7pza4c9.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6ef0c1od: /tmp/tmp6ef0c1od.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfkqodvad: /tmp/tmpfkqodvad.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq0v1izta: /tmp/tmpq0v1izta.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmprrhea9i0: /tmp/tmprrhea9i0.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  while (n > 0) {\n    result.push_back(n);\n    if (n % 2 == 0) {\n      n =\
    \ n / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmphz491vr2: /tmp/tmphz491vr2.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpdm8a0bve: /tmp/tmpdm8a0bve.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpha2qv84u: /tmp/tmpha2qv84u.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfv42yutf: /tmp/tmpfv42yutf.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpw4c_mxt0: /tmp/tmpw4c_mxt0.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp48x9veq6: /tmp/tmp48x9veq6.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcmo0qvqm: /tmp/tmpcmo0qvqm.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n - 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwe2r3rx8: /tmp/tmpwe2r3rx8.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7sy7svb1: /tmp/tmp7sy7svb1.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmppsymgden: /tmp/tmppsymgden.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> res;\n\
    \    res.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n     \
    \       n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n        }\n\
    \        res.push_back(n);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp6krxziah: /tmp/tmp6krxziah.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpcdp0abiv: /tmp/tmpcdp0abiv.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (int i = 0; i < n; i++) {\n    result.push_back(n + 2 * i);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp9pgubemy: /tmp/tmp9pgubemy.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpv_n5uivq: /tmp/tmpv_n5uivq.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> v;\n\
    \    v.push_back(n);\n    while(n>1){\n        if(n%2==0){\n            n=n/2;\n\
    \            v.push_back(n);\n        }\n        else{\n            n=(n+1)/2;\n\
    \            v.push_back(n);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpeb6jeipd: /tmp/tmpeb6jeipd.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> v;\n\
    \  for (long i = n; i > 0; i -= 2) {\n    v.push_back(i);\n  }\n  return v;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpttx123sh: /tmp/tmpttx123sh.cpp:22: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt4heynzo: /tmp/tmpt4heynzo.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp33910xnv: /tmp/tmp33910xnv.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpw30ryomh: /tmp/tmpw30ryomh.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5sgupl5b: /tmp/tmp5sgupl5b.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdbxkulfw: /tmp/tmpdbxkulfw.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = 0; i < n; i++) {\n    result.push_back(n + 2 * i);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpbzhuyqky: /tmp/tmpbzhuyqky.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwfmud34p: /tmp/tmpwfmud34p.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpykmqs5el: /tmp/tmpykmqs5el.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  while (n > 0) {\n    result.push_back(n);\n    if (n % 2 == 0) {\n      n =\
    \ n / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_co51gxh: /tmp/tmp_co51gxh.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpuogttrv0: /tmp/tmpuogttrv0.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpknqc0peu: /tmp/tmpknqc0peu.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpogjwwkd9: /tmp/tmpogjwwkd9.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmprs8o301e: /tmp/tmprs8o301e.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  long stones = n;\n  while (stones > 0) {\n    result.push_back(stones);\n \
    \   if (stones % 2 == 0) {\n      stones = stones / 2;\n    } else {\n      stones\
    \ = (stones + 1) / 2;\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpeey9ujzm: /tmp/tmpeey9ujzm.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpil67anf8: /tmp/tmpil67anf8.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmptufma254: /tmp/tmptufma254.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmphzsa4pss: /tmp/tmphzsa4pss.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpc0yfgcme: /tmp/tmpc0yfgcme.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    if (n == 0) {\n        return result;\n    }\n    result.push_back(n);\n\
    \    while (n > 0) {\n        if (n % 2 == 0) {\n            n = n / 2;\n    \
    \    } else {\n            n = n / 2 + 1;\n        }\n        result.push_back(n);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    long i = n;\n    while (i > 0) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i = i - 1;\n        } else {\n            i = i\
    \ - 2;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpyqtev0m1: /tmp/tmpyqtev0m1.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmplcnqifzc: /tmp/tmplcnqifzc.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpii2lgx1z: /tmp/tmpii2lgx1z.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n +=\
    \ 1;\n    } else {\n      n += 2;\n    }\n    result.push_back(n);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpws8t14er: /tmp/tmpws8t14er.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3gfxgze8: /tmp/tmp3gfxgze8.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmplp411jei: /tmp/tmplp411jei.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj1ws_tdm: /tmp/tmpj1ws_tdm.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> pile;\n\
    \  for (long i = n; i > 0; i--) {\n    pile.push_back(i);\n  }\n  return pile;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqcvn7xii: /tmp/tmpqcvn7xii.cpp:22: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpl848btxq: /tmp/tmpl848btxq.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    long i = 1;\n    while (n > 0) {\n        result.push_back(n);\n        if\
    \ (n % 2 == 0) {\n            n = n + i;\n        } else {\n            n = n\
    \ + i + 1;\n        }\n        i += 2;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    if (i % 2 == 0) {\n      result.push_back(i\
    \ + 1);\n    } else {\n      result.push_back(i + 2);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmphm624c2_: /tmp/tmphm624c2_.cpp:26: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpw423hf6y: /tmp/tmpw423hf6y.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  while (n > 0) {\n    result.push_back(n);\n    if (n % 2 == 0) {\n      n =\
    \ n / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdp40v08n: /tmp/tmpdp40v08n.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (int i = 0; i < n; i++) {\n        if (i == 0) {\n            result.push_back(n);\n\
    \        } else {\n            if (result[i - 1] % 2 == 0) {\n               \
    \ result.push_back(result[i - 1] + 2);\n            } else {\n               \
    \ result.push_back(result[i - 1] + 1);\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpe9dzekf8: /tmp/tmpe9dzekf8.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpau2ybitp: /tmp/tmpau2ybitp.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwdwfb9l7: /tmp/tmpwdwfb9l7.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmprv1aurod: /tmp/tmprv1aurod.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgk5zzndg: /tmp/tmpgk5zzndg.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = n / 2 + 1;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpim7h9918: /tmp/tmpim7h9918.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpg9_1d9n5: /tmp/tmpg9_1d9n5.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpdvw_po2p: /tmp/tmpdvw_po2p.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1ctcni88: /tmp/tmp1ctcni88.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  for (long i = n; i > 0; i--) {\n    if (i % 2 == 0)\
    \ {\n      result.push_back(i - 1);\n    } else {\n      result.push_back(i +\
    \ 1);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2s44jn0r: /tmp/tmp2s44jn0r.cpp:27: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> v;\n\
    \  v.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n / 2;\n\
    \    } else {\n      n = (n + 1) / 2;\n    }\n    v.push_back(n);\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd29agf8d: /tmp/tmpd29agf8d.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpamqqcb2q: /tmp/tmpamqqcb2q.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpimusv_rr: /tmp/tmpimusv_rr.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  while (n > 0) {\n    result.push_back(n);\n    if (n % 2 == 0) {\n      n =\
    \ n / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpamwf12fw: /tmp/tmpamwf12fw.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl9tvn01a: /tmp/tmpl9tvn01a.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> v;\n\
    \    v.push_back(n);\n    while(n>1){\n        if(n%2==0){\n            n=n/2;\n\
    \            v.push_back(n);\n        }\n        else{\n            n=n/2+1;\n\
    \            v.push_back(n);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpra4cip1v: /tmp/tmpra4cip1v.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (int i = 0; i < n; i++) {\n    result.push_back(n + 2 * i);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpespruzdp: /tmp/tmpespruzdp.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmplrvcekbz: /tmp/tmplrvcekbz.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpymeqnf_x: /tmp/tmpymeqnf_x.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpsr7g8gr6: /tmp/tmpsr7g8gr6.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> v;\n\
    \  for (long i = n; i > 0; i--) {\n    v.push_back(i);\n  }\n  return v;\n}\n\
    int main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_znys6su: /tmp/tmp_znys6su.cpp:22: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpunbzverx: /tmp/tmpunbzverx.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpgh4qzwx7: /tmp/tmpgh4qzwx7.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmprgf4rbhg: /tmp/tmprgf4rbhg.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpiag5lz9j: /tmp/tmpiag5lz9j.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpatvqnlmd: /tmp/tmpatvqnlmd.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpgpkd554n: /tmp/tmpgpkd554n.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxsb66azy: /tmp/tmpxsb66azy.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  long i = n;\n  while (i > 0) {\n    result.push_back(i);\n    i = (i % 2 ==\
    \ 0) ? i + 1 : i + 2;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpflh3qb84: /tmp/tmpflh3qb84.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdbm3kf2y: /tmp/tmpdbm3kf2y.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmphd_00lfn: /tmp/tmphd_00lfn.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpjihbgp11: /tmp/tmpjihbgp11.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmprjew7j6n: /tmp/tmprjew7j6n.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpe4z2yk4y: /tmp/tmpe4z2yk4y.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    while (n > 0) {\n        result.push_back(n);\n        if (n % 2 == 0) {\n\
    \            n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpmkgi5gmc: /tmp/tmpmkgi5gmc.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp39pmjqui: /tmp/tmp39pmjqui.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpn8c3bpqh: /tmp/tmpn8c3bpqh.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp444ixj2w: /tmp/tmp444ixj2w.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  long i = n;\n  while (i > 0) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i = i / 2;\n    } else {\n      i = (i + 1) / 2;\n    }\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpo3_fo2tv: /tmp/tmpo3_fo2tv.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 0) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n            result.push_back(n);\n        } else {\n  \
    \          n = (n + 1) / 2;\n            result.push_back(n);\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  while (n > 0) {\n    result.push_back(n);\n    if (n % 2 == 0) {\n      n =\
    \ n / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    if (i % 2 == 0) {\n      result.push_back(i\
    \ + 1);\n    } else {\n      result.push_back(i + 2);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpavhdnji9: /tmp/tmpavhdnji9.cpp:26: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpjf3gldqd: /tmp/tmpjf3gldqd.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa9jstpax: /tmp/tmpa9jstpax.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  while (n > 0) {\n    result.push_back(n);\n    if (n % 2 == 0) {\n      n =\
    \ n / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmprmjymz14: /tmp/tmprmjymz14.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    while (n > 0) {\n        result.push_back(n);\n        if (n % 2 == 0) {\n\
    \            n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmplk0lzzkk: /tmp/tmplk0lzzkk.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  while (n > 0) {\n    result.push_back(n);\n    if (n % 2 == 0) {\n      n =\
    \ n / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpai6867xo: /tmp/tmpai6867xo.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk8bg0qly: /tmp/tmpk8bg0qly.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf5abky55: /tmp/tmpf5abky55.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i -= 2) {\n    result.push_back(i);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
    \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n\
    \    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10,\
    \ (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpe893omlc: /tmp/tmpe893omlc.cpp:22: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    long i = n;\n    while (i > 0) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i = i / 2;\n        } else {\n            i = (i\
    \ + 1) / 2;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  for (int i = 1; i < n; i++) {\n    if (n % 2 == 0)\
    \ {\n      result.push_back(n + i * 2);\n    } else {\n      result.push_back(n\
    \ + i * 2 - 1);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmphlqtm7bd: /tmp/tmphlqtm7bd.cpp:27: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpbk1f81xr: /tmp/tmpbk1f81xr.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpeigp42cb: /tmp/tmpeigp42cb.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpu8mw_0v4: /tmp/tmpu8mw_0v4.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp24t656v2: /tmp/tmp24t656v2.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpc7ebj8z2: /tmp/tmpc7ebj8z2.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpq4fyiv5d: /tmp/tmpq4fyiv5d.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmppf2atnx6: /tmp/tmppf2atnx6.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp_8rzona7: /tmp/tmp_8rzona7.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp_78tt0pz: /tmp/tmp_78tt0pz.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4jcp0jm5: /tmp/tmp4jcp0jm5.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if (i % 2 ==\
    \ 0) {\n      i--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5,\
    \ (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6,\
    \ (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpi4qiyckq: /tmp/tmpi4qiyckq.cpp:25: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbeelume2: /tmp/tmpbeelume2.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> result;\n\
    \    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n  \
    \          n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n      \
    \  }\n        result.push_back(n);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmpropdyaq1: /tmp/tmpropdyaq1.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n\
    \ / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    result.push_back(n);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = make_a_pile;\n \
    \   assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n\
    \    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11,\
    \ (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8,\
    \ (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
    \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzt39_kck: /tmp/tmpzt39_kck.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\n// The first level has n\
    \ stones.\n// The number of stones in the next level is:\n// - the next odd number\
    \ if n is odd.\n// - the next even number if n is even.\n// Return the number\
    \ of stones in each level in a list, where element at index\n// i represents the\
    \ number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
    // [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n  std::vector<long> result;\n\
    \  result.push_back(n);\n  while (n > 1) {\n    n = n % 2 == 0 ? n / 2 : n / 2\
    \ + 1;\n    result.push_back(n);\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3,\
    \ (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4,\
    \ (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5,\
    \ (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6,\
    \ (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18,\
    \ (long)20, (long)22})));\n}\n"
  stdout: ''
  stderr: "tmp2x60i8nl: /tmp/tmp2x60i8nl.cpp:24: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({(long)3, (long)5, (long)7}))' failed.\n"
  exit_code: -6
  status: Exception
