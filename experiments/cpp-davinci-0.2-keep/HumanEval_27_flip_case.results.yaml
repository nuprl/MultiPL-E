name: HumanEval_27_flip_case
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (std::isupper(c)) {\n            result\
    \ += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (std::isupper(c)) {\n            result\
    \ += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (auto c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (std::isupper(c)) {\n            result\
    \ += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string result\
    \ = \"\";\n  for (int i = 0; i < string.length(); i++) {\n    if (string[i] >=\
    \ 'a' && string[i] <= 'z') {\n      result += string[i] - 32;\n    } else if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n      result += string[i] + 32;\n    } else {\n\
    \      result += string[i];\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (std::isupper(c)) {\n            result\
    \ += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (isupper(string[i]))\
    \ {\n            result += tolower(string[i]);\n        } else {\n           \
    \ result += toupper(string[i]);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (std::isupper(c)) {\n            result\
    \ += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n        else\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += toupper(string[i]);\n \
    \       } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result\
    \ += tolower(string[i]);\n        } else {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (islower(c)) {\n            result +=\
    \ toupper(c);\n        } else {\n            result += tolower(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string result;\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n\t\t\tresult += string[i] - 32;\n\t\t}\n\t\telse if (string[i] >=\
    \ 'A' && string[i] <= 'Z') {\n\t\t\tresult += string[i] + 32;\n\t\t}\n\t\telse\
    \ {\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else\
    \ if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i]\
    \ + 32;\n        } else {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (islower(string[i]))\
    \ {\n            result += toupper(string[i]);\n        } else {\n           \
    \ result += tolower(string[i]);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a'&&string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A'&&string[i]<='Z')\n        {\n     \
    \       string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string result\
    \ = \"\";\n  for (int i = 0; i < string.length(); i++) {\n    if (isupper(string[i]))\
    \ {\n      result += tolower(string[i]);\n    } else {\n      result += toupper(string[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (char c : string) {\n        if (isupper(c)) {\n          \
    \  result += tolower(c);\n        } else {\n            result += toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else\
    \ if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i]\
    \ + 32;\n        } else {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (auto c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += (char)(string[i] - 32);\n\
    \        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result\
    \ += (char)(string[i] + 32);\n        } else {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();\
    \ i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (auto c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (std::isupper(c)) {\n            result\
    \ += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += toupper(string[i]);\n \
    \       } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result\
    \ += tolower(string[i]);\n        } else {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else\
    \ if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i]\
    \ + 32;\n        } else {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (char c : string) {\n        if (isupper(c)) {\n          \
    \  result += tolower(c);\n        } else {\n            result += toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Write your code\
    \ here\n    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]>='a'\
    \ && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n       \
    \ }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n          \
    \  string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (char c : string) {\n        if (std::isupper(c)) {\n     \
    \       result += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Your code here\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]>='a' && string[i]<='z')\n\
    \        {\n            string[i]=string[i]-32;\n        }\n        else if(string[i]>='A'\
    \ && string[i]<='Z')\n        {\n            string[i]=string[i]+32;\n       \
    \ }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string new_string;\n\
    \    for (char c : string) {\n        if (std::isupper(c)) {\n            new_string\
    \ += std::tolower(c);\n        } else {\n            new_string += std::toupper(c);\n\
    \        }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (std::isupper(c)) {\n            result\
    \ += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int i = 0;\n    while(string[i]\
    \ != '\\0') {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n          \
    \  string[i] = string[i] - 32;\n        }\n        else if(string[i] >= 'A' &&\
    \ string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n  \
    \      i++;\n    }\n    return string;\n}\nint main() {\n    auto candidate =\
    \ flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (char c : string) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += (char) (c - 32);\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += (char) (c + 32);\n        } else {\n            result\
    \ += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char& c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            result += toupper(string[i]);\n        }\
    \ else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += tolower(string[i]);\n\
    \        } else {\n            result += string[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else\
    \ if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i]\
    \ + 32;\n        } else {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (char c : string) {\n        if (isupper(c)) {\n          \
    \  result += tolower(c);\n        } else {\n            result += toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (char c : string) {\n        if (std::isupper(c)) {\n     \
    \       result += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += string[i] - 32;\n     \
    \   } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result +=\
    \ string[i] + 32;\n        } else {\n            result += string[i];\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (std::isupper(c)) {\n            result\
    \ += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            result.push_back(string[i] - 32);\n    \
    \    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result.push_back(string[i]\
    \ + 32);\n        } else {\n            result.push_back(string[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            result += string[i] - 32;\n        } else\
    \ if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += string[i]\
    \ + 32;\n        } else {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=tolower(string[i]);\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            result += toupper(string[i]);\n        }\
    \ else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += tolower(string[i]);\n\
    \        } else {\n            result += string[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (std::isupper(c)) {\n            result\
    \ += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (std::isupper(c)) {\n            result\
    \ += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string result;\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n\t\t\tresult += string[i] - 32;\n\t\t}\n\t\telse if (string[i] >=\
    \ 'A' && string[i] <= 'Z') {\n\t\t\tresult += string[i] + 32;\n\t\t}\n\t\telse\
    \ {\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string flipped_string\
    \ = \"\";\n    for (char c : string) {\n        if (isupper(c)) {\n          \
    \  flipped_string += tolower(c);\n        } else {\n            flipped_string\
    \ += toupper(c);\n        }\n    }\n    return flipped_string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char c : string) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else {\n            result += toupper(c);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
