language: cpp
name: HumanEval_95_check_dict_case
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower\
    \ && is_upper) return false;\n        if(is_lower && !is_upper) {\n          \
    \  if(!std::all_of(it->first.begin(), it->first.end(), ::islower)) return false;\n\
    \        }\n        if(!is_lower && is_upper) {\n            if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::isupper)) return false;\n        }\n        if(!is_lower\
    \ && !is_upper) {\n            if(std::all_of(it->first.begin(), it->first.end(),\
    \ ::islower)) {\n                is_lower = true;\n            } else if(std::all_of(it->first.begin(),\
    \ it->first.end(), ::isupper)) {\n                is_upper = true;\n         \
    \   } else {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy48mf4jb: /tmp/tmpy48mf4jb.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower\
    \ && is_upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpewvsri3s: /tmp/tmpewvsri3s.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for(; it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n    \
    \        is_upper = true;\n        else\n            is_lower = true;\n    }\n\
    \    return (is_upper && is_lower) ? false : true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbdfrvhk9: /tmp/tmpbdfrvhk9.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool flag = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            flag = true;\n            break;\n        }\n    }\n   \
    \ for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(flag) {\n\
    \            if(it->first[0] >= 'A' && it->first[0] <= 'Z') return false;\n  \
    \      }\n        else {\n            if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_px4abc3: /tmp/tmp_px4abc3.cpp:35: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower)\
    \ {\n            is_lower = is_lower && (it->first == tolower(it->first));\n \
    \       }\n        if(is_upper) {\n            is_upper = is_upper && (it->first\
    \ == toupper(it->first));\n        }\n    }\n    return is_lower || is_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9iey768n.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp9iey768n.cpp:19:67: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   19 |             is_lower = is_lower && (it->first == tolower(it->first));\n\
    \      |                                                                   ^\n\
    In file included from /usr/include/c++/9/cctype:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmp9iey768n.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9iey768n.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9iey768n.cpp:19:67: note:   candidate expects 2 arguments,\
    \ 1 provided\n   19 |             is_lower = is_lower && (it->first == tolower(it->first));\n\
    \      |                                                                   ^\n\
    /tmp/tmp9iey768n.cpp:22:67: error: no matching function for call to \u2018toupper(const\
    \ std::__cxx11::"
  stdout: ''
  timestamp: 1660130755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp15uyyuyb: /tmp/tmp15uyyuyb.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it;\n    bool is_lower = true;\n    for(it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) {\n            is_lower = false;\n\
    \            break;\n        }\n    }\n    for(it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(is_lower && isupper(it->first[0]))\n            return false;\n\
    \        if(!is_lower && islower(it->first[0]))\n            return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp02nxdsxm: /tmp/tmp02nxdsxm.cpp:35: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    bool is_lower = false;\n    bool is_upper = false;\n   \
    \ for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpb1g734to: /tmp/tmpb1g734to.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0)\n\t\treturn false;\n\tbool is_upper = false;\n\tbool is_lower = false;\n\
    \tfor (auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif (isupper(it->first[0]))\n\
    \t\t\tis_upper = true;\n\t\telse\n\t\t\tis_lower = true;\n\t}\n\treturn is_upper\
    \ ^ is_lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpawdy3o98: /tmp/tmpawdy3o98.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    if(dict.size() == 0)\n        return false;\n    int upper\
    \ = 0, lower = 0;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n\
    \        if(isupper(it->first[0]))\n            upper++;\n        else if(islower(it->first[0]))\n\
    \            lower++;\n        else\n            return false;\n    }\n    if(upper\
    \ == 0 || lower == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmgak1owe: /tmp/tmpmgak1owe.cpp:34: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_upper = true;\n    bool is_lower = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_upper\
    \ && !isupper(it->first[0])) is_upper = false;\n        if(is_lower && !islower(it->first[0]))\
    \ is_lower = false;\n    }\n    return is_upper || is_lower;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi6yzk2r9: /tmp/tmpi6yzk2r9.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::vector<std::string>\
    \ keys;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n        keys.push_back(it->first);\n\
    \    }\n    if (keys.size() == 0) {\n        return false;\n    }\n    bool is_lower\
    \ = islower(keys[0][0]);\n    for (auto key : keys) {\n        if (islower(key[0])\
    \ != is_lower) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbzr8i0kp: /tmp/tmpbzr8i0kp.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool lower = false;\n    bool upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ lower = true;\n        else upper = true;\n    }\n    return lower ^ upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8vgd7tfa: /tmp/tmp8vgd7tfa.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return (is_lower && !is_upper) || (!is_lower && is_upper);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvjwvnqc7: /tmp/tmpvjwvnqc7.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') {\n            all_upper = false;\n        }\
    \ else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            all_lower\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_gmnwjio: /tmp/tmp_gmnwjio.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool isLower = true;\n    bool isUpper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            isUpper = false;\n        else if(isupper(it->first[0]))\n      \
    \      isLower = false;\n        else\n            return false;\n    }\n    return\
    \ isLower || isUpper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpubxk_5ti: /tmp/tmpubxk_5ti.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_upper ^ is_lower;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa9mfvfqj: /tmp/tmpa9mfvfqj.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw93_865f: /tmp/tmpw93_865f.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp15uyyuyb: /tmp/tmp15uyyuyb.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(; it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n    \
    \        is_upper = true;\n        else if(islower(it->first[0]))\n          \
    \  is_lower = true;\n        else\n            return false;\n    }\n    if(is_lower\
    \ && is_upper)\n        return false;\n    return true;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy6fj4y1s: /tmp/tmpy6fj4y1s.cpp:35: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ {\n    return false;\n  }\n  bool all_lower = true;\n  bool all_upper = true;\n\
    \  for (auto it = dict.begin(); it != dict.end(); ++it) {\n    if (it->first.size()\
    \ == 0) {\n      return false;\n    }\n    for (int i = 0; i < it->first.size();\
    \ ++i) {\n      if (islower(it->first[i])) {\n        all_upper = false;\n   \
    \   } else if (isupper(it->first[i])) {\n        all_lower = false;\n      } else\
    \ {\n        return false;\n      }\n    }\n  }\n  return all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // your code\
    \ here\n  if(dict.size()==0)\n    return false;\n  bool flag=false;\n  for(auto\
    \ it=dict.begin();it!=dict.end();it++)\n  {\n    if(islower(it->first[0]))\n \
    \   {\n      flag=true;\n      break;\n    }\n  }\n  for(auto it=dict.begin();it!=dict.end();it++)\n\
    \  {\n    if(flag)\n    {\n      if(!islower(it->first[0]))\n        return false;\n\
    \    }\n    else\n    {\n      if(islower(it->first[0]))\n        return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvk_zw2a7: /tmp/tmpvk_zw2a7.cpp:45: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    if(dict.size()==0)\n        return false;\n    int lower=0,upper=0;\n\
    \    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(isupper(it->first[0]))\n\
    \            upper++;\n        else\n            lower++;\n    }\n    if(lower==0\
    \ || upper==0)\n        return true;\n    return false;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9qvszzj8: /tmp/tmp9qvszzj8.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower_case = false;\n    bool is_upper_case\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) {\n            is_upper_case = true;\n        } else\
    \ {\n            is_lower_case = true;\n        }\n    }\n    return is_lower_case\
    \ ^ is_upper_case;\n}\nint main() {\n    auto candidate = check_dict_case;\n \
    \   assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuibnl62n: /tmp/tmpuibnl62n.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  std::string key = it->first;\n        if(isupper(key[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpykj1mg6a: /tmp/tmpykj1mg6a.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            is_upper = false;\n        if(!islower(it->first[0]))\n         \
    \   is_lower = false;\n    }\n    return is_lower || is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmphg8c7cpp: /tmp/tmphg8c7cpp.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool lower = false;\n    bool upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ lower = true;\n        else upper = true;\n    }\n    return lower ^ upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8vgd7tfa: /tmp/tmp8vgd7tfa.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = true;\n    bool lower = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else\n            lower = false;\n    }\n\
    \    return upper || lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpduzb46f6: /tmp/tmpduzb46f6.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return (is_lower && !is_upper) || (!is_lower && is_upper);\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkpwrp9yb: /tmp/tmpkpwrp9yb.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy48mf4jb: /tmp/tmpy48mf4jb.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_lower = islower(it->first[0]);\n    for(; it\
    \ != dict.end(); it++) {\n        if(islower(it->first[0]) != is_lower)\n    \
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcydrg7u0: /tmp/tmpcydrg7u0.cpp:25: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    std::map<std::string, std::string>::iterator it;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(it=dict.begin();\
    \ it!=dict.end(); it++) {\n        if(is_lower) {\n            if(!islower(it->first[0]))\n\
    \                is_lower = false;\n        }\n        if(is_upper) {\n      \
    \      if(!isupper(it->first[0]))\n                is_upper = false;\n       \
    \ }\n    }\n    if(is_lower || is_upper)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqvsp6q_g: /tmp/tmpqvsp6q_g.cpp:37: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0]))\n            all_upper = false;\n        if(!islower(it->first[0]))\n\
    \            all_lower = false;\n    }\n    return all_lower || all_upper;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp44l2w8va: /tmp/tmp44l2w8va.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower\
    \ && !islower(it->first[0])) is_lower = false;\n        if(is_upper && !isupper(it->first[0]))\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxvj5qopp: /tmp/tmpxvj5qopp.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    if(is_lower && is_upper)\n\
    \        return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmjwvzzkx: /tmp/tmpmjwvzzkx.cpp:35: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(isupper(it->first[0]))\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(islower(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(isupper(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmppg6ohwtz: /tmp/tmppg6ohwtz.cpp:46: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_upper = true;\n    bool all_lower = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_upper || all_lower;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxmls7hoy: /tmp/tmpxmls7hoy.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower\
    \ && is_upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpewvsri3s: /tmp/tmpewvsri3s.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool upper\
    \ = false;\n    bool lower = false;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n       \
    \     upper = true;\n        }\n        if (it->first[0] >= 'a' && it->first[0]\
    \ <= 'z') {\n            lower = true;\n        }\n    }\n    if (upper && lower)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaud815yr: /tmp/tmpaud815yr.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for (auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if (it->first.length() == 0) {\n            return\
    \ false;\n        }\n        if (isupper(it->first[0])) {\n            is_upper\
    \ = true;\n        } else if (islower(it->first[0])) {\n            is_lower =\
    \ true;\n        } else {\n            return false;\n        }\n    }\n    return\
    \ is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmptd_ydd4u: /tmp/tmptd_ydd4u.cpp:34: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_upper ^ is_lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmppy5w8f6r: /tmp/tmppy5w8f6r.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::map<std::string,\
    \ std::string>::iterator it;\n    bool all_lower = true;\n    bool all_upper =\
    \ true;\n    for (it = dict.begin(); it != dict.end(); it++) {\n        if (it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') {\n            all_upper = false;\n        }\
    \ else if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            all_lower\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6gz6ci8t: /tmp/tmp6gz6ci8t.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ {\n    return false;\n  }\n  bool is_lower = false;\n  bool is_upper = false;\n\
    \  for (auto const& x : dict) {\n    if (isupper(x.first[0])) {\n      is_upper\
    \ = true;\n    } else {\n      is_lower = true;\n    }\n  }\n  return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdmfe878u: /tmp/tmpdmfe878u.cpp:31: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            lower = true;\n    }\n \
    \   return upper ^ lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx4u9x39b: /tmp/tmpx4u9x39b.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp15uyyuyb: /tmp/tmp15uyyuyb.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(is_lower == false && is_upper == false) {\n            if(islower(it->first[0]))\n\
    \                is_lower = true;\n            else if(isupper(it->first[0]))\n\
    \                is_upper = true;\n        }\n        else if(is_lower == true\
    \ && is_upper == false) {\n            if(isupper(it->first[0]))\n           \
    \     return false;\n        }\n        else if(is_lower == false && is_upper\
    \ == true) {\n            if(islower(it->first[0]))\n                return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp50jhbdme: /tmp/tmp50jhbdme.cpp:39: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    if(dict.size()==0)\n        return false;\n    bool flag=true;\n\
    \    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>=65\
    \ && it->first[0]<=90)\n        {\n            flag=false;\n            break;\n\
    \        }\n    }\n    if(flag)\n        return true;\n    flag=true;\n    for(auto\
    \ it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>=97 &&\
    \ it->first[0]<=122)\n        {\n            flag=false;\n            break;\n\
    \        }\n    }\n    if(flag)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjgx1t_z1: /tmp/tmpjgx1t_z1.cpp:44: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower\
    \ && !islower(it->first[0])) is_lower = false;\n        if(is_upper && !isupper(it->first[0]))\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxvj5qopp: /tmp/tmpxvj5qopp.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        if(islower(it->first[0])) is_lower = true;\n    }\n\
    \    return is_upper ^ is_lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmprp233im0: /tmp/tmprp233im0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy48mf4jb: /tmp/tmpy48mf4jb.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_lower = false;\n            break;\n        }\n    }\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && isupper(it->first[0]))\n \
    \           return false;\n        if(!is_lower && islower(it->first[0]))\n  \
    \          return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgp_vlxms: /tmp/tmpgp_vlxms.cpp:34: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    for (auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        all_lower = all_lower && (it->first == std::string(it->first.size(),\
    \ std::tolower(it->first[0])));\n        all_upper = all_upper && (it->first ==\
    \ std::string(it->first.size(), std::toupper(it->first[0])));\n    }\n    return\
    \ all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpscoe1k5j: /tmp/tmpscoe1k5j.cpp:25: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool lower\
    \ = true;\n    bool upper = true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (islower(it->first[0])) {\n            upper = false;\n\
    \        } else if (isupper(it->first[0])) {\n            lower = false;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return lower\
    \ || upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmprxa513a2: /tmp/tmprxa513a2.cpp:31: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool lower = false;\n    bool upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ lower = true;\n        else upper = true;\n    }\n    return !(lower && upper);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvt7dpqlo: /tmp/tmpvt7dpqlo.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    if(dict.size()==0)\n        return false;\n    int upper=0,lower=0;\n\
    \    for(auto i:dict)\n    {\n        if(isupper(i.first[0]))\n            upper++;\n\
    \        else\n            lower++;\n    }\n    if(upper==0 || lower==0)\n   \
    \     return true;\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmprgjjcmn8: /tmp/tmprgjjcmn8.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0]))\n            all_upper = false;\n        if(!islower(it->first[0]))\n\
    \            all_lower = false;\n    }\n    return all_lower || all_upper;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp44l2w8va: /tmp/tmp44l2w8va.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::map<std::string,\
    \ std::string>::iterator it;\n    bool lower_case = true;\n    bool upper_case\
    \ = true;\n    for (it = dict.begin(); it != dict.end(); it++) {\n        if (islower(it->first[0]))\
    \ {\n            upper_case = false;\n        } else if (isupper(it->first[0]))\
    \ {\n            lower_case = false;\n        } else {\n            return false;\n\
    \        }\n    }\n    return lower_case || upper_case;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxl2ib90v: /tmp/tmpxl2ib90v.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp81wm_stu: /tmp/tmp81wm_stu.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv7gdc4wc: /tmp/tmpv7gdc4wc.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower\
    \ && !is_upper) {\n            if(!isupper(it->first[0]))\n                return\
    \ false;\n        }\n        else if(!is_lower && is_upper) {\n            if(!islower(it->first[0]))\n\
    \                return false;\n        }\n        else {\n            if(islower(it->first[0]))\n\
    \                is_upper = false;\n            else if(isupper(it->first[0]))\n\
    \                is_lower = false;\n            else\n                return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjd_9hdh7: /tmp/tmpjd_9hdh7.cpp:39: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"b", "banana"}}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(; it != dict.end(); it++) {\n        if(islower(it->first[0]))\n    \
    \        is_lower = true;\n        else if(isupper(it->first[0]))\n          \
    \  is_upper = true;\n        else\n            return false;\n    }\n    if(is_lower\
    \ && is_upper)\n        return false;\n    return true;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmpqx1qo0: /tmp/tmpmpqx1qo0.cpp:35: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        is_lower =\
    \ is_lower && (it->first == tolower(it->first));\n        is_upper = is_upper\
    \ && (it->first == toupper(it->first));\n    }\n    return is_lower || is_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq0ejtqo1.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpq0ejtqo1.cpp:17:63: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   17 |         is_lower = is_lower && (it->first == tolower(it->first));\n\
    \      |                                                               ^\nIn file\
    \ included from /usr/include/c++/9/cctype:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpq0ejtqo1.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpq0ejtqo1.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpq0ejtqo1.cpp:17:63: note:   candidate expects 2 arguments,\
    \ 1 provided\n   17 |         is_lower = is_lower && (it->first == tolower(it->first));\n\
    \      |                                                               ^\n/tmp/tmpq0ejtqo1.cpp:18:63:\
    \ error: no matching function for call to \u2018toupper(const std::__cxx11::basic_string<cha"
  stdout: ''
  timestamp: 1660130758
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower)\
    \ {\n            for(int i = 0; i < it->first.length(); i++) {\n             \
    \   if(!islower(it->first[i])) {\n                    is_lower = false;\n    \
    \                break;\n                }\n            }\n        }\n       \
    \ if(is_upper) {\n            for(int i = 0; i < it->first.length(); i++) {\n\
    \                if(!isupper(it->first[i])) {\n                    is_upper =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n    }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    int lower = 0, upper = 0;\n    for(auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower++;\n        else if(isupper(it->first[0]))\n            upper++;\n\
    \        else\n            return false;\n    }\n    if(lower == dict.size() ||\
    \ upper == dict.size())\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7l2vmflj: /tmp/tmp7l2vmflj.cpp:33: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tbool lower = false;\n\tbool upper = false;\n\
    \tfor (auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif (islower(it->first[0]))\
    \ {\n\t\t\tlower = true;\n\t\t}\n\t\telse if (isupper(it->first[0])) {\n\t\t\t\
    upper = true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (lower\
    \ && upper) {\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoc0hvto5: /tmp/tmpoc0hvto5.cpp:39: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        }\n        else {\n            is_lower\
    \ = true;\n        }\n    }\n    return is_upper ^ is_lower;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmtvf58xq: /tmp/tmpmtvf58xq.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    bool is_lower=true;\n    bool is_upper=true;\n   \
    \ for(auto it=dict.begin();it!=dict.end();it++){\n        if(islower(it->first[0]))\n\
    \            is_upper=false;\n        else\n            is_lower=false;\n    }\n\
    \    return is_lower||is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzhk_bzi0: /tmp/tmpzhk_bzi0.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_lower = false;\n            break;\n        }\n    }\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && isupper(it->first[0]))\n \
    \           return false;\n        if(!is_lower && islower(it->first[0]))\n  \
    \          return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgp_vlxms: /tmp/tmpgp_vlxms.cpp:34: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return (is_lower && !is_upper) || (!is_lower && is_upper);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvjwvnqc7: /tmp/tmpvjwvnqc7.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower\
    \ && is_upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpewvsri3s: /tmp/tmpewvsri3s.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tbool is_upper = false;\n\tbool is_lower =\
    \ false;\n\tfor (auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif (isupper(it->first[0]))\
    \ {\n\t\t\tis_upper = true;\n\t\t}\n\t\tif (islower(it->first[0])) {\n\t\t\tis_lower\
    \ = true;\n\t\t}\n\t}\n\treturn (is_upper && is_lower) ? false : true;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8agna8h2: /tmp/tmp8agna8h2.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower = true;\n        else if(isupper(it->first[0]))\n         \
    \   upper = true;\n        else\n            return false;\n    }\n    return\
    \ (upper && lower) ? false : true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcqd0ibp4: /tmp/tmpcqd0ibp4.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto itr = dict.begin(); itr != dict.end(); itr++) {\n        if(islower(itr->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(itr->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9p9n2vur: /tmp/tmp9p9n2vur.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool upper = false;\n    bool lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ upper = true;\n        if(islower(it->first[0])) lower = true;\n    }\n    return\
    \ (upper && lower) ? false : true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0zkps7bb: /tmp/tmp0zkps7bb.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv7gdc4wc: /tmp/tmpv7gdc4wc.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmppd7sh11_: /tmp/tmppd7sh11_.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        if(islower(it->first[0])) is_lower = true;\n    }\n\
    \    return is_upper ^ is_lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmprp233im0: /tmp/tmprp233im0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = true;\n    bool lower = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            upper = false;\n        if(!islower(it->first[0]))\n            lower\
    \ = false;\n    }\n    return upper || lower;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc7c73klm: /tmp/tmpc7c73klm.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw93_865f: /tmp/tmpw93_865f.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0)\n\t\treturn false;\n\tbool all_lower = true;\n\tbool all_upper = true;\n\
    \tfor (auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif (it->first.size()\
    \ == 0)\n\t\t\treturn false;\n\t\tif (islower(it->first[0]))\n\t\t\tall_upper\
    \ = false;\n\t\telse\n\t\t\tall_lower = false;\n\t}\n\treturn all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm5k28sh6: /tmp/tmpm5k28sh6.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(; it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n    \
    \        is_upper = true;\n        else\n            is_lower = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsww1geth: /tmp/tmpsww1geth.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_upper ^ is_lower;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa9mfvfqj: /tmp/tmpa9mfvfqj.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp81wm_stu: /tmp/tmp81wm_stu.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(it->first.length() == 0)\n            return false;\n        if(!isupper(it->first[0]))\n\
    \            all_upper = false;\n        if(!islower(it->first[0]))\n        \
    \    all_lower = false;\n    }\n    return all_lower || all_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqm5yc795: /tmp/tmpqm5yc795.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_all_lower = true;\n    bool is_all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(it->first.size() == 0)\n            return false;\n        if(!isupper(it->first[0]))\n\
    \            is_all_upper = false;\n        if(!islower(it->first[0]))\n     \
    \       is_all_lower = false;\n    }\n    return is_all_lower || is_all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmphw9n3k76: /tmp/tmphw9n3k76.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_upper ^ is_lower;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa9mfvfqj: /tmp/tmpa9mfvfqj.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    std::map<std::string, std::string>::iterator it;\n    int\
    \ count_lower = 0;\n    int count_upper = 0;\n    for(it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) {\n            count_upper++;\n\
    \        }\n        else {\n            count_lower++;\n        }\n    }\n   \
    \ if(count_lower == 0 || count_upper == 0) {\n        return true;\n    }\n  \
    \  else {\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnpm4d8yz: /tmp/tmpnpm4d8yz.cpp:36: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_upper = isupper(it->first[0]);\n    for(it =\
    \ dict.begin(); it != dict.end(); it++) {\n        if(is_upper) {\n          \
    \  if(!isupper(it->first[0]))\n                return false;\n        }\n    \
    \    else {\n            if(!islower(it->first[0]))\n                return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnoxlim9r: /tmp/tmpnoxlim9r.cpp:34: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    bool is_lower = true;\n    bool is_upper = true;\n    for\
    \ (auto it = dict.begin(); it != dict.end(); it++) {\n        if (islower(it->first[0]))\
    \ {\n            is_upper = false;\n        } else if (isupper(it->first[0]))\
    \ {\n            is_lower = false;\n        } else {\n            return false;\n\
    \        }\n    }\n    return is_lower || is_upper;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_wp1cc3e: /tmp/tmp_wp1cc3e.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower)) {\n            all_lower = false;\n        }\n\
    \        if(!std::all_of(it->first.begin(), it->first.end(), ::isupper)) {\n \
    \           all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto i : dict) {\n        if(isupper(i.first[0]))\n      \
    \      is_upper = true;\n        else\n            is_lower = true;\n    }\n \
    \   return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpur060vko: /tmp/tmpur060vko.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower\
    \ && is_upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpewvsri3s: /tmp/tmpewvsri3s.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    if(dict.size()==0)\n        return false;\n    bool flag=true;\n\
    \    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>='A'\
    \ && it->first[0]<='Z')\n            flag=false;\n    }\n    if(flag)\n      \
    \  return true;\n    flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first[0]>='a' && it->first[0]<='z')\n            flag=false;\n\
    \    }\n    if(flag)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwnw63_un: /tmp/tmpwnw63_un.cpp:38: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    std::map<std::string, std::string>::iterator itr;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(itr=dict.begin();itr!=dict.end();itr++){\n\
    \        if(islower(itr->first[0]))\n            is_lower = true;\n        else\
    \ if(isupper(itr->first[0]))\n            is_upper = true;\n        else\n   \
    \         return false;\n    }\n    if(is_lower && is_upper)\n        return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcvzyw_f6: /tmp/tmpcvzyw_f6.cpp:35: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool upper = false;\n    bool lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ upper = true;\n        if(islower(it->first[0])) lower = true;\n    }\n    return\
    \ upper ^ lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n   \
    \ assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfy27trj3: /tmp/tmpfy27trj3.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            all_upper = false;\n\
    \        else if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n            all_lower\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmplekoyrnm: /tmp/tmplekoyrnm.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0]))\n            all_upper = false;\n        if(!islower(it->first[0]))\n\
    \            all_lower = false;\n    }\n    return all_lower || all_upper;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp44l2w8va: /tmp/tmp44l2w8va.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower = true;\n        else\n            upper = true;\n    }\n \
    \   return (upper && lower) ? false : true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt2lci65y: /tmp/tmpt2lci65y.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool upper = false;\n    bool lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ upper = true;\n        if(islower(it->first[0])) lower = true;\n    }\n    return\
    \ upper ^ lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n   \
    \ assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfy27trj3: /tmp/tmpfy27trj3.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp85hkovxt: /tmp/tmp85hkovxt.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z')\n            upper = true;\n        else if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n            lower = true;\n        else\n  \
    \          return false;\n    }\n    return upper ^ lower;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdla2z3ir: /tmp/tmpdla2z3ir.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool lower = false;\n    bool upper = false;\n    for(;\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            upper = true;\n\
    \        else\n            return false;\n    }\n    if(lower && upper)\n    \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf8p5l88v: /tmp/tmpf8p5l88v.cpp:35: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first[0]>='a' && it->first[0]<='z')\n        {\n      \
    \      for(int i=1;i<it->first.length();i++)\n            {\n                if(it->first[i]<'a'\
    \ || it->first[i]>'z')\n                {\n                    flag=false;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    else if(it->first[0]>='A' && it->first[0]<='Z')\n        {\n            for(int\
    \ i=1;i<it->first.length();i++)\n            {\n                if(it->first[i]<'A'\
    \ || it->first[i]>'Z')\n                {\n                    flag=false;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    else\n        {\n            flag=false;\n            break;\n        }\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpn3bis51e: /tmp/tmpn3bis51e.cpp:51: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"A", "banana"}, {"B", "banana"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            is_upper = false;\n        if(!islower(it->first[0]))\n         \
    \   is_lower = false;\n    }\n    return is_lower || is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmphg8c7cpp: /tmp/tmphg8c7cpp.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            lower = true;\n    }\n \
    \   return upper ^ lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx4u9x39b: /tmp/tmpx4u9x39b.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw93_865f: /tmp/tmpw93_865f.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return (is_lower && !is_upper) || (!is_lower && is_upper);\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkpwrp9yb: /tmp/tmpkpwrp9yb.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw93_865f: /tmp/tmpw93_865f.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!islower(it->first[0]))\
    \ is_lower = false;\n        if(!isupper(it->first[0])) is_upper = false;\n  \
    \  }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5i47g84_: /tmp/tmp5i47g84_.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            is_lower = true;\n\
    \        }\n        else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n  \
    \          is_upper = true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    if(is_lower && is_upper)\n        return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmphiean8ly: /tmp/tmphiean8ly.cpp:37: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv7gdc4wc: /tmp/tmpv7gdc4wc.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            lower = true;\n    }\n \
    \   return upper ^ lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx4u9x39b: /tmp/tmpx4u9x39b.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130755
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa_nwfjio: /tmp/tmpa_nwfjio.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0]))\n            all_upper = false;\n        if(!islower(it->first[0]))\n\
    \            all_lower = false;\n    }\n    return all_lower || all_upper;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp44l2w8va: /tmp/tmp44l2w8va.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower)) {\n            all_lower = false;\n        }\n\
    \        if(!std::all_of(it->first.begin(), it->first.end(), ::isupper)) {\n \
    \           all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130759
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower)) {\n            all_lower = false;\n        }\n\
    \        if(!std::all_of(it->first.begin(), it->first.end(), ::isupper)) {\n \
    \           all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ is_upper = false;\n        if(!islower(it->first[0])) is_lower = false;\n  \
    \  }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfbou6hri: /tmp/tmpfbou6hri.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower)) {\n            all_lower = false;\n        }\n\
    \        if(!std::all_of(it->first.begin(), it->first.end(), ::isupper)) {\n \
    \           all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool isUpper = false;\n    bool isLower =\
    \ false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            isUpper = true;\n        else if(islower(it->first[0]))\n       \
    \     isLower = true;\n        else\n            return false;\n    }\n    return\
    \ isUpper ^ isLower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd7fzfz8w: /tmp/tmpd7fzfz8w.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) {\n            is_lower = true;\n        }\n    \
    \    else if(isupper(it->first[0])) {\n            is_upper = true;\n        }\n\
    \        else {\n            return false;\n        }\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzhqshuum: /tmp/tmpzhqshuum.cpp:35: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp81wm_stu: /tmp/tmp81wm_stu.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130759
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = false;\n    bool upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower = true;\n        else if(isupper(it->first[0]))\n         \
    \   upper = true;\n        else\n            return false;\n    }\n    return\
    \ lower ^ upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n   \
    \ assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa7xtootv: /tmp/tmpa7xtootv.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it;\n    bool flag = false;\n    for(it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(islower(it->first[0])) {\n            flag = true;\n         \
    \   break;\n        }\n    }\n    for(it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(flag) {\n            if(!islower(it->first[0]))\n            \
    \    return false;\n        }\n        else {\n            if(!isupper(it->first[0]))\n\
    \                return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7n8ev2hj: /tmp/tmp7n8ev2hj.cpp:40: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130761
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        std::string\
    \ key = it->first;\n        for(int i = 0; i < key.length(); i++) {\n        \
    \    if(!islower(key[i])) all_lower = false;\n            if(!isupper(key[i]))\
    \ all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            lower = true;\n        }\n        else if(isupper(it->first[0]))\
    \ {\n            upper = true;\n        }\n        else {\n            return\
    \ false;\n        }\n    }\n    return upper ^ lower;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwy3ps3if: /tmp/tmpwy3ps3if.cpp:35: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool lower = false;\n    bool upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ lower = true;\n        else upper = true;\n    }\n    return lower ^ upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8vgd7tfa: /tmp/tmp8vgd7tfa.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!std::all_of(it->first.begin(), it->first.end(), ::islower))\n          \
    \  all_lower = false;\n        if(!std::all_of(it->first.begin(), it->first.end(),\
    \ ::isupper))\n            all_upper = false;\n    }\n    return all_lower ||\
    \ all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw93_865f: /tmp/tmpw93_865f.cpp:32: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ is_upper = false;\n        if(!islower(it->first[0])) is_lower = false;\n  \
    \  }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfbou6hri: /tmp/tmpfbou6hri.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130760
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return !(is_lower\
    \ && is_upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkgueg5rb: /tmp/tmpkgueg5rb.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4w5z9pn0: /tmp/tmp4w5z9pn0.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpunil2j8_: /tmp/tmpunil2j8_.cpp:26: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy48mf4jb: /tmp/tmpy48mf4jb.cpp:27: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else\n            lower = false;\n    }\n\
    \    return lower || upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9dxxat73: /tmp/tmp9dxxat73.cpp:30: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"Name", "John"}, {"Age", "36"}, {"City", "Houston"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130761
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ab3ewuy: /tmp/tmp_ab3ewuy.cpp:29: int main(): Assertion `candidate((std::map<std::string,
    std::string>({{"p", "pineapple"}, {"5", "banana"}, {"a", "apple"}}))) == (false)''
    failed.

    '
  stdout: ''
  timestamp: 1660130756
