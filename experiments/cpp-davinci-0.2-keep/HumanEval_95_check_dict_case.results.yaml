name: HumanEval_95_check_dict_case
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower\
    \ && is_upper) return false;\n        if(is_lower && !is_upper) {\n          \
    \  if(!std::all_of(it->first.begin(), it->first.end(), ::islower)) return false;\n\
    \        }\n        if(!is_lower && is_upper) {\n            if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::isupper)) return false;\n        }\n        if(!is_lower\
    \ && !is_upper) {\n            if(std::all_of(it->first.begin(), it->first.end(),\
    \ ::islower)) {\n                is_lower = true;\n            } else if(std::all_of(it->first.begin(),\
    \ it->first.end(), ::isupper)) {\n                is_upper = true;\n         \
    \   } else {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw04d3ren: /tmp/tmpw04d3ren.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower\
    \ && is_upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmxkgwh1h: /tmp/tmpmxkgwh1h.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq439jz7a: /tmp/tmpq439jz7a.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzf8q5bcg: /tmp/tmpzf8q5bcg.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for(; it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n    \
    \        is_upper = true;\n        else\n            is_lower = true;\n    }\n\
    \    return (is_upper && is_lower) ? false : true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbre6typ9: /tmp/tmpbre6typ9.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool flag = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            flag = true;\n            break;\n        }\n    }\n   \
    \ for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(flag) {\n\
    \            if(it->first[0] >= 'A' && it->first[0] <= 'Z') return false;\n  \
    \      }\n        else {\n            if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') return false;\n        }\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb15gg0ei: /tmp/tmpb15gg0ei.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower)\
    \ {\n            is_lower = is_lower && (it->first == tolower(it->first));\n \
    \       }\n        if(is_upper) {\n            is_upper = is_upper && (it->first\
    \ == toupper(it->first));\n        }\n    }\n    return is_lower || is_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp117eo1gb.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp117eo1gb.cpp:19:57: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   19 |             is_lower = is_lower && (it->first == tolower(it->first));\n\
    \      |                                                  ~~~~~~~^~~~~~~~~~~\n\
    In file included from /usr/include/c++/11/bits/basic_ios.h:37,\n             \
    \    from /usr/include/c++/11/ios:44,\n                 from /usr/include/c++/11/istream:38,\n\
    \                 from /usr/include/c++/11/sstream:38,\n                 from\
    \ /usr/include/c++/11/complex:45,\n                 from /usr/include/c++/11/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp117eo1gb.cpp:2:\n/usr/include/c++/11/bits/locale_facets.h:2676:5:\
    \ note: candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const\
    \ std::locale&)\u2019\n 2676 |     tolower(_CharT __c, const locale& __loc)\n\
    \      |     ^~~~~~~\n/usr/include/c++/11/bits/locale_facets.h:2676:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp117eo1gb.cpp:19:57:\
    \ note:   candidate expects 2 arguments, 1 provided\n   19 |             is_lower\
    \ = is_lower && (it->first == tolower(it->first));\n      |                  \
    \                                ~~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/11/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:35,\n\
    \                 from /tmp/tmp117eo1gb.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\n/tmp/tmp117eo1gb.cpp:22:57: error: no matching function\
    \ for call to \u2018toupper(const std::__cxx11::basic_string<ch"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe_27w1sj: /tmp/tmpe_27w1sj.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it;\n    bool is_lower = true;\n    for(it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) {\n            is_lower = false;\n\
    \            break;\n        }\n    }\n    for(it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(is_lower && isupper(it->first[0]))\n            return false;\n\
    \        if(!is_lower && islower(it->first[0]))\n            return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb0r2v4d2: /tmp/tmpb0r2v4d2.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2yk_l70u: /tmp/tmp2yk_l70u.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjr5mtzrt: /tmp/tmpjr5mtzrt.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    bool is_lower = false;\n    bool is_upper = false;\n   \
    \ for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl6kmf2rc: /tmp/tmpl6kmf2rc.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn0rswb_e: /tmp/tmpn0rswb_e.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0)\n\t\treturn false;\n\tbool is_upper = false;\n\tbool is_lower = false;\n\
    \tfor (auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif (isupper(it->first[0]))\n\
    \t\t\tis_upper = true;\n\t\telse\n\t\t\tis_lower = true;\n\t}\n\treturn is_upper\
    \ ^ is_lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp09ptv90f: /tmp/tmp09ptv90f.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpztwwafkf: /tmp/tmpztwwafkf.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    if(dict.size() == 0)\n        return false;\n    int upper\
    \ = 0, lower = 0;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n\
    \        if(isupper(it->first[0]))\n            upper++;\n        else if(islower(it->first[0]))\n\
    \            lower++;\n        else\n            return false;\n    }\n    if(upper\
    \ == 0 || lower == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3euiysrd: /tmp/tmp3euiysrd.cpp:34: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqeebddat: /tmp/tmpqeebddat.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzh4zsief: /tmp/tmpzh4zsief.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_upper = true;\n    bool is_lower = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_upper\
    \ && !isupper(it->first[0])) is_upper = false;\n        if(is_lower && !islower(it->first[0]))\
    \ is_lower = false;\n    }\n    return is_upper || is_lower;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsm2uf148: /tmp/tmpsm2uf148.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::vector<std::string>\
    \ keys;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n        keys.push_back(it->first);\n\
    \    }\n    if (keys.size() == 0) {\n        return false;\n    }\n    bool is_lower\
    \ = islower(keys[0][0]);\n    for (auto key : keys) {\n        if (islower(key[0])\
    \ != is_lower) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7zb5_lt2: /tmp/tmp7zb5_lt2.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool lower = false;\n    bool upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ lower = true;\n        else upper = true;\n    }\n    return lower ^ upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvxnmuy3f: /tmp/tmpvxnmuy3f.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return (is_lower && !is_upper) || (!is_lower && is_upper);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmper262p8g: /tmp/tmper262p8g.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') {\n            all_upper = false;\n        }\
    \ else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            all_lower\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqpw4zg2u: /tmp/tmpqpw4zg2u.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbo1gcucr: /tmp/tmpbo1gcucr.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool isLower = true;\n    bool isUpper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            isUpper = false;\n        else if(isupper(it->first[0]))\n      \
    \      isLower = false;\n        else\n            return false;\n    }\n    return\
    \ isLower || isUpper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmphfh1fcd1: /tmp/tmphfh1fcd1.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_upper ^ is_lower;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwgsco_0v: /tmp/tmpwgsco_0v.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwoi9gtob: /tmp/tmpwoi9gtob.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc9wpm_oq: /tmp/tmpc9wpm_oq.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpypkj58i1: /tmp/tmpypkj58i1.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(; it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n    \
    \        is_upper = true;\n        else if(islower(it->first[0]))\n          \
    \  is_lower = true;\n        else\n            return false;\n    }\n    if(is_lower\
    \ && is_upper)\n        return false;\n    return true;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjp1j7kyt: /tmp/tmpjp1j7kyt.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpngsb33ee: /tmp/tmpngsb33ee.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ {\n    return false;\n  }\n  bool all_lower = true;\n  bool all_upper = true;\n\
    \  for (auto it = dict.begin(); it != dict.end(); ++it) {\n    if (it->first.size()\
    \ == 0) {\n      return false;\n    }\n    for (int i = 0; i < it->first.size();\
    \ ++i) {\n      if (islower(it->first[i])) {\n        all_upper = false;\n   \
    \   } else if (isupper(it->first[i])) {\n        all_lower = false;\n      } else\
    \ {\n        return false;\n      }\n    }\n  }\n  return all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  // your code\
    \ here\n  if(dict.size()==0)\n    return false;\n  bool flag=false;\n  for(auto\
    \ it=dict.begin();it!=dict.end();it++)\n  {\n    if(islower(it->first[0]))\n \
    \   {\n      flag=true;\n      break;\n    }\n  }\n  for(auto it=dict.begin();it!=dict.end();it++)\n\
    \  {\n    if(flag)\n    {\n      if(!islower(it->first[0]))\n        return false;\n\
    \    }\n    else\n    {\n      if(islower(it->first[0]))\n        return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp48ggeiz5: /tmp/tmp48ggeiz5.cpp:45: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvq1f0ce4: /tmp/tmpvq1f0ce4.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpszvrwmu2: /tmp/tmpszvrwmu2.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwfby4f89: /tmp/tmpwfby4f89.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfapqom7h: /tmp/tmpfapqom7h.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkegx533v: /tmp/tmpkegx533v.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx_87enkx: /tmp/tmpx_87enkx.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdair6fg2: /tmp/tmpdair6fg2.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    if(dict.size()==0)\n        return false;\n    int lower=0,upper=0;\n\
    \    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(isupper(it->first[0]))\n\
    \            upper++;\n        else\n            lower++;\n    }\n    if(lower==0\
    \ || upper==0)\n        return true;\n    return false;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe3tz52wz: /tmp/tmpe3tz52wz.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower_case = false;\n    bool is_upper_case\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) {\n            is_upper_case = true;\n        } else\
    \ {\n            is_lower_case = true;\n        }\n    }\n    return is_lower_case\
    \ ^ is_upper_case;\n}\nint main() {\n    auto candidate = check_dict_case;\n \
    \   assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpez9pks6_: /tmp/tmpez9pks6_.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp9uet3gr: /tmp/tmpp9uet3gr.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2052wjhh: /tmp/tmp2052wjhh.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  std::string key = it->first;\n        if(isupper(key[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwf45hu4e: /tmp/tmpwf45hu4e.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            is_upper = false;\n        if(!islower(it->first[0]))\n         \
    \   is_lower = false;\n    }\n    return is_lower || is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcr38uw2r: /tmp/tmpcr38uw2r.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool lower = false;\n    bool upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ lower = true;\n        else upper = true;\n    }\n    return lower ^ upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp64k9cdbq: /tmp/tmp64k9cdbq.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = true;\n    bool lower = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else\n            lower = false;\n    }\n\
    \    return upper || lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt2h_vcv7: /tmp/tmpt2h_vcv7.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6p0nks7f: /tmp/tmp6p0nks7f.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6qan13y1: /tmp/tmp6qan13y1.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return (is_lower && !is_upper) || (!is_lower && is_upper);\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc5waq3fw: /tmp/tmpc5waq3fw.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgs8ls7wq: /tmp/tmpgs8ls7wq.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_lower = islower(it->first[0]);\n    for(; it\
    \ != dict.end(); it++) {\n        if(islower(it->first[0]) != is_lower)\n    \
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmprinaznq5: /tmp/tmprinaznq5.cpp:25: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    std::map<std::string, std::string>::iterator it;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(it=dict.begin();\
    \ it!=dict.end(); it++) {\n        if(is_lower) {\n            if(!islower(it->first[0]))\n\
    \                is_lower = false;\n        }\n        if(is_upper) {\n      \
    \      if(!isupper(it->first[0]))\n                is_upper = false;\n       \
    \ }\n    }\n    if(is_lower || is_upper)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi2zyj2g5: /tmp/tmpi2zyj2g5.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0]))\n            all_upper = false;\n        if(!islower(it->first[0]))\n\
    \            all_lower = false;\n    }\n    return all_lower || all_upper;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu42fabz1: /tmp/tmpu42fabz1.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn0el2o9f: /tmp/tmpn0el2o9f.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcidygc4h: /tmp/tmpcidygc4h.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower\
    \ && !islower(it->first[0])) is_lower = false;\n        if(is_upper && !isupper(it->first[0]))\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8rb30wpm: /tmp/tmp8rb30wpm.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    if(is_lower && is_upper)\n\
    \        return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb6hg1xd6: /tmp/tmpb6hg1xd6.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(isupper(it->first[0]))\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(islower(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(isupper(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpaugv5syp: /tmp/tmpaugv5syp.cpp:46: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_upper = true;\n    bool all_lower = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_upper || all_lower;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq4mb79he: /tmp/tmpq4mb79he.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq8c3fyzr: /tmp/tmpq8c3fyzr.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower\
    \ && is_upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd0hnf07e: /tmp/tmpd0hnf07e.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool upper\
    \ = false;\n    bool lower = false;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n       \
    \     upper = true;\n        }\n        if (it->first[0] >= 'a' && it->first[0]\
    \ <= 'z') {\n            lower = true;\n        }\n    }\n    if (upper && lower)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2wdz5oj1: /tmp/tmp2wdz5oj1.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp38gdxo5z: /tmp/tmp38gdxo5z.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for (auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if (it->first.length() == 0) {\n            return\
    \ false;\n        }\n        if (isupper(it->first[0])) {\n            is_upper\
    \ = true;\n        } else if (islower(it->first[0])) {\n            is_lower =\
    \ true;\n        } else {\n            return false;\n        }\n    }\n    return\
    \ is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpye2k3ht6: /tmp/tmpye2k3ht6.cpp:34: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi7cjnkcn: /tmp/tmpi7cjnkcn.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_upper ^ is_lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr07sapze: /tmp/tmpr07sapze.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp71ggn0x3: /tmp/tmp71ggn0x3.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::map<std::string,\
    \ std::string>::iterator it;\n    bool all_lower = true;\n    bool all_upper =\
    \ true;\n    for (it = dict.begin(); it != dict.end(); it++) {\n        if (it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') {\n            all_upper = false;\n        }\
    \ else if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            all_lower\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4gzbtvyx: /tmp/tmp4gzbtvyx.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpssd6zj9z: /tmp/tmpssd6zj9z.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyc7v3ozt: /tmp/tmpyc7v3ozt.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n  if (dict.empty())\
    \ {\n    return false;\n  }\n  bool is_lower = false;\n  bool is_upper = false;\n\
    \  for (auto const& x : dict) {\n    if (isupper(x.first[0])) {\n      is_upper\
    \ = true;\n    } else {\n      is_lower = true;\n    }\n  }\n  return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz_io8b9j: /tmp/tmpz_io8b9j.cpp:31: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            lower = true;\n    }\n \
    \   return upper ^ lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgjgion7u: /tmp/tmpgjgion7u.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpoqn2end5: /tmp/tmpoqn2end5.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0g4xngqa: /tmp/tmp0g4xngqa.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpivalmhud: /tmp/tmpivalmhud.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjtjy5qid: /tmp/tmpjtjy5qid.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu1mxgjhp: /tmp/tmpu1mxgjhp.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6of9qilw: /tmp/tmp6of9qilw.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0xsn4rcs: /tmp/tmp0xsn4rcs.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe2taemjf: /tmp/tmpe2taemjf.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(is_lower == false && is_upper == false) {\n            if(islower(it->first[0]))\n\
    \                is_lower = true;\n            else if(isupper(it->first[0]))\n\
    \                is_upper = true;\n        }\n        else if(is_lower == true\
    \ && is_upper == false) {\n            if(isupper(it->first[0]))\n           \
    \     return false;\n        }\n        else if(is_lower == false && is_upper\
    \ == true) {\n            if(islower(it->first[0]))\n                return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxc5vwyxd: /tmp/tmpxc5vwyxd.cpp:39: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmptlvmu58w: /tmp/tmptlvmu58w.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    if(dict.size()==0)\n        return false;\n    bool flag=true;\n\
    \    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>=65\
    \ && it->first[0]<=90)\n        {\n            flag=false;\n            break;\n\
    \        }\n    }\n    if(flag)\n        return true;\n    flag=true;\n    for(auto\
    \ it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>=97 &&\
    \ it->first[0]<=122)\n        {\n            flag=false;\n            break;\n\
    \        }\n    }\n    if(flag)\n        return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7abjyyp0: /tmp/tmp7abjyyp0.cpp:44: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower\
    \ && !islower(it->first[0])) is_lower = false;\n        if(is_upper && !isupper(it->first[0]))\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk1t4kmt_: /tmp/tmpk1t4kmt_.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpebnc8ce6: /tmp/tmpebnc8ce6.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        if(islower(it->first[0])) is_lower = true;\n    }\n\
    \    return is_upper ^ is_lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqgndbh_p: /tmp/tmpqgndbh_p.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwo5c_3hy: /tmp/tmpwo5c_3hy.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmptmcs7gg1: /tmp/tmptmcs7gg1.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv0ojraw8: /tmp/tmpv0ojraw8.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_lower = false;\n            break;\n        }\n    }\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && isupper(it->first[0]))\n \
    \           return false;\n        if(!is_lower && islower(it->first[0]))\n  \
    \          return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf5uvrr05: /tmp/tmpf5uvrr05.cpp:34: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    for (auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        all_lower = all_lower && (it->first == std::string(it->first.size(),\
    \ std::tolower(it->first[0])));\n        all_upper = all_upper && (it->first ==\
    \ std::string(it->first.size(), std::toupper(it->first[0])));\n    }\n    return\
    \ all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdoarxddk: /tmp/tmpdoarxddk.cpp:25: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp15gm1ib9: /tmp/tmp15gm1ib9.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz818hfui: /tmp/tmpz818hfui.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    bool lower\
    \ = true;\n    bool upper = true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (islower(it->first[0])) {\n            upper = false;\n\
    \        } else if (isupper(it->first[0])) {\n            lower = false;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return lower\
    \ || upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpa3ifa6zq: /tmp/tmpa3ifa6zq.cpp:31: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool lower = false;\n    bool upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ lower = true;\n        else upper = true;\n    }\n    return !(lower && upper);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmptbhngomb: /tmp/tmptbhngomb.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    if(dict.size()==0)\n        return false;\n    int upper=0,lower=0;\n\
    \    for(auto i:dict)\n    {\n        if(isupper(i.first[0]))\n            upper++;\n\
    \        else\n            lower++;\n    }\n    if(upper==0 || lower==0)\n   \
    \     return true;\n    return false;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm5iuiq5j: /tmp/tmpm5iuiq5j.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfekv4vc8: /tmp/tmpfekv4vc8.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc6c2sppy: /tmp/tmpc6c2sppy.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0]))\n            all_upper = false;\n        if(!islower(it->first[0]))\n\
    \            all_lower = false;\n    }\n    return all_lower || all_upper;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuforx3w1: /tmp/tmpuforx3w1.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi3d33xbb: /tmp/tmpi3d33xbb.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    std::map<std::string,\
    \ std::string>::iterator it;\n    bool lower_case = true;\n    bool upper_case\
    \ = true;\n    for (it = dict.begin(); it != dict.end(); it++) {\n        if (islower(it->first[0]))\
    \ {\n            upper_case = false;\n        } else if (isupper(it->first[0]))\
    \ {\n            lower_case = false;\n        } else {\n            return false;\n\
    \        }\n    }\n    return lower_case || upper_case;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp68qwny1x: /tmp/tmp68qwny1x.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxhqmvmax: /tmp/tmpxhqmvmax.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpoy2y9mkw: /tmp/tmpoy2y9mkw.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower\
    \ && !is_upper) {\n            if(!isupper(it->first[0]))\n                return\
    \ false;\n        }\n        else if(!is_lower && is_upper) {\n            if(!islower(it->first[0]))\n\
    \                return false;\n        }\n        else {\n            if(islower(it->first[0]))\n\
    \                is_upper = false;\n            else if(isupper(it->first[0]))\n\
    \                is_lower = false;\n            else\n                return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp19mir0wa: /tmp/tmp19mir0wa.cpp:39: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj3u93edo: /tmp/tmpj3u93edo.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(; it != dict.end(); it++) {\n        if(islower(it->first[0]))\n    \
    \        is_lower = true;\n        else if(isupper(it->first[0]))\n          \
    \  is_upper = true;\n        else\n            return false;\n    }\n    if(is_lower\
    \ && is_upper)\n        return false;\n    return true;\n}\nint main() {\n   \
    \ auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfbqrp0ed: /tmp/tmpfbqrp0ed.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        is_lower =\
    \ is_lower && (it->first == tolower(it->first));\n        is_upper = is_upper\
    \ && (it->first == toupper(it->first));\n    }\n    return is_lower || is_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ijjyzg6.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp0ijjyzg6.cpp:17:53: error:\
    \ no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\
    \n   17 |         is_lower = is_lower && (it->first == tolower(it->first));\n\
    \      |                                              ~~~~~~~^~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/11/bits/basic_ios.h:37,\n                 from\
    \ /usr/include/c++/11/ios:44,\n                 from /usr/include/c++/11/istream:38,\n\
    \                 from /usr/include/c++/11/sstream:38,\n                 from\
    \ /usr/include/c++/11/complex:45,\n                 from /usr/include/c++/11/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0ijjyzg6.cpp:2:\n/usr/include/c++/11/bits/locale_facets.h:2676:5:\
    \ note: candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const\
    \ std::locale&)\u2019\n 2676 |     tolower(_CharT __c, const locale& __loc)\n\
    \      |     ^~~~~~~\n/usr/include/c++/11/bits/locale_facets.h:2676:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp0ijjyzg6.cpp:17:53:\
    \ note:   candidate expects 2 arguments, 1 provided\n   17 |         is_lower\
    \ = is_lower && (it->first == tolower(it->first));\n      |                  \
    \                            ~~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/11/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:35,\n\
    \                 from /tmp/tmp0ijjyzg6.cpp:2:\n/usr/include/ctype.h:122:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no\
    \ known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\n/tmp/tmp0ijjyzg6.cpp:18:53: error: no matching function\
    \ for call to \u2018toupper(const std::__cxx11::basic_string<char>&)\u2019\n \
    \  18 |  "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw9p53jfp: /tmp/tmpw9p53jfp.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3pj5btf6: /tmp/tmp3pj5btf6.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower)\
    \ {\n            for(int i = 0; i < it->first.length(); i++) {\n             \
    \   if(!islower(it->first[i])) {\n                    is_lower = false;\n    \
    \                break;\n                }\n            }\n        }\n       \
    \ if(is_upper) {\n            for(int i = 0; i < it->first.length(); i++) {\n\
    \                if(!isupper(it->first[i])) {\n                    is_upper =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n    }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    int lower = 0, upper = 0;\n    for(auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower++;\n        else if(isupper(it->first[0]))\n            upper++;\n\
    \        else\n            return false;\n    }\n    if(lower == dict.size() ||\
    \ upper == dict.size())\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6mwst9a2: /tmp/tmp6mwst9a2.cpp:33: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5z8ye8n6: /tmp/tmp5z8ye8n6.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tbool lower = false;\n\tbool upper = false;\n\
    \tfor (auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif (islower(it->first[0]))\
    \ {\n\t\t\tlower = true;\n\t\t}\n\t\telse if (isupper(it->first[0])) {\n\t\t\t\
    upper = true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (lower\
    \ && upper) {\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdp8y_q0n: /tmp/tmpdp8y_q0n.cpp:39: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        }\n        else {\n            is_lower\
    \ = true;\n        }\n    }\n    return is_upper ^ is_lower;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7p1ocrt6: /tmp/tmp7p1ocrt6.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyxi_8flz: /tmp/tmpyxi_8flz.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    bool is_lower=true;\n    bool is_upper=true;\n   \
    \ for(auto it=dict.begin();it!=dict.end();it++){\n        if(islower(it->first[0]))\n\
    \            is_upper=false;\n        else\n            is_lower=false;\n    }\n\
    \    return is_lower||is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzmgvmxcf: /tmp/tmpzmgvmxcf.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_lower = false;\n            break;\n        }\n    }\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && isupper(it->first[0]))\n \
    \           return false;\n        if(!is_lower && islower(it->first[0]))\n  \
    \          return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk_18jfsx: /tmp/tmpk_18jfsx.cpp:34: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg1z9utsf: /tmp/tmpg1z9utsf.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return (is_lower && !is_upper) || (!is_lower && is_upper);\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2mwjb45o: /tmp/tmp2mwjb45o.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower\
    \ && is_upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbmfjp2yc: /tmp/tmpbmfjp2yc.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0mpl93hn: /tmp/tmp0mpl93hn.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tbool is_upper = false;\n\tbool is_lower =\
    \ false;\n\tfor (auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif (isupper(it->first[0]))\
    \ {\n\t\t\tis_upper = true;\n\t\t}\n\t\tif (islower(it->first[0])) {\n\t\t\tis_lower\
    \ = true;\n\t\t}\n\t}\n\treturn (is_upper && is_lower) ? false : true;\n}\nint\
    \ main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyoc71fjs: /tmp/tmpyoc71fjs.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower = true;\n        else if(isupper(it->first[0]))\n         \
    \   upper = true;\n        else\n            return false;\n    }\n    return\
    \ (upper && lower) ? false : true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyx15tmul: /tmp/tmpyx15tmul.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto itr = dict.begin(); itr != dict.end(); itr++) {\n        if(islower(itr->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(itr->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpffjpvyy5: /tmp/tmpffjpvyy5.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool upper = false;\n    bool lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ upper = true;\n        if(islower(it->first[0])) lower = true;\n    }\n    return\
    \ (upper && lower) ? false : true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmd4rid8u: /tmp/tmpmd4rid8u.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp703x3i_s: /tmp/tmp703x3i_s.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqw7d75_6: /tmp/tmpqw7d75_6.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjxbbj1p9: /tmp/tmpjxbbj1p9.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt3fljv7z: /tmp/tmpt3fljv7z.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        if(islower(it->first[0])) is_lower = true;\n    }\n\
    \    return is_upper ^ is_lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp35gne3e3: /tmp/tmp35gne3e3.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = true;\n    bool lower = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            upper = false;\n        if(!islower(it->first[0]))\n            lower\
    \ = false;\n    }\n    return upper || lower;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7lna_15d: /tmp/tmp7lna_15d.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1s6xghe0: /tmp/tmp1s6xghe0.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n\tif (dict.size()\
    \ == 0)\n\t\treturn false;\n\tbool all_lower = true;\n\tbool all_upper = true;\n\
    \tfor (auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif (it->first.size()\
    \ == 0)\n\t\t\treturn false;\n\t\tif (islower(it->first[0]))\n\t\t\tall_upper\
    \ = false;\n\t\telse\n\t\t\tall_lower = false;\n\t}\n\treturn all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk7ak4q46: /tmp/tmpk7ak4q46.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(; it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n    \
    \        is_upper = true;\n        else\n            is_lower = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0tbcup9l: /tmp/tmp0tbcup9l.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_upper ^ is_lower;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmps6cz5xep: /tmp/tmps6cz5xep.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5m9ydt5o: /tmp/tmp5m9ydt5o.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(it->first.length() == 0)\n            return false;\n        if(!isupper(it->first[0]))\n\
    \            all_upper = false;\n        if(!islower(it->first[0]))\n        \
    \    all_lower = false;\n    }\n    return all_lower || all_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzt2cmv0j: /tmp/tmpzt2cmv0j.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_all_lower = true;\n    bool is_all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(it->first.size() == 0)\n            return false;\n        if(!isupper(it->first[0]))\n\
    \            is_all_upper = false;\n        if(!islower(it->first[0]))\n     \
    \       is_all_lower = false;\n    }\n    return is_all_lower || is_all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu6d_0dzd: /tmp/tmpu6d_0dzd.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp20w6x98h: /tmp/tmp20w6x98h.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_upper ^ is_lower;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt9r99_k6: /tmp/tmpt9r99_k6.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp01yq4g17: /tmp/tmp01yq4g17.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    std::map<std::string, std::string>::iterator it;\n    int\
    \ count_lower = 0;\n    int count_upper = 0;\n    for(it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) {\n            count_upper++;\n\
    \        }\n        else {\n            count_lower++;\n        }\n    }\n   \
    \ if(count_lower == 0 || count_upper == 0) {\n        return true;\n    }\n  \
    \  else {\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9i1s429m: /tmp/tmp9i1s429m.cpp:36: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_upper = isupper(it->first[0]);\n    for(it =\
    \ dict.begin(); it != dict.end(); it++) {\n        if(is_upper) {\n          \
    \  if(!isupper(it->first[0]))\n                return false;\n        }\n    \
    \    else {\n            if(!islower(it->first[0]))\n                return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1e1csdkc: /tmp/tmp1e1csdkc.cpp:34: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    bool is_lower = true;\n    bool is_upper = true;\n    for\
    \ (auto it = dict.begin(); it != dict.end(); it++) {\n        if (islower(it->first[0]))\
    \ {\n            is_upper = false;\n        } else if (isupper(it->first[0]))\
    \ {\n            is_lower = false;\n        } else {\n            return false;\n\
    \        }\n    }\n    return is_lower || is_upper;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi66mvwrf: /tmp/tmpi66mvwrf.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower)) {\n            all_lower = false;\n        }\n\
    \        if(!std::all_of(it->first.begin(), it->first.end(), ::isupper)) {\n \
    \           all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto i : dict) {\n        if(isupper(i.first[0]))\n      \
    \      is_upper = true;\n        else\n            is_lower = true;\n    }\n \
    \   return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2y8ktuot: /tmp/tmp2y8ktuot.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower\
    \ && is_upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnxtzvuys: /tmp/tmpnxtzvuys.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    // Write\
    \ your code here\n    if(dict.size()==0)\n        return false;\n    bool flag=true;\n\
    \    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>='A'\
    \ && it->first[0]<='Z')\n            flag=false;\n    }\n    if(flag)\n      \
    \  return true;\n    flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first[0]>='a' && it->first[0]<='z')\n            flag=false;\n\
    \    }\n    if(flag)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsb_9ox42: /tmp/tmpsb_9ox42.cpp:38: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    std::map<std::string, std::string>::iterator itr;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(itr=dict.begin();itr!=dict.end();itr++){\n\
    \        if(islower(itr->first[0]))\n            is_lower = true;\n        else\
    \ if(isupper(itr->first[0]))\n            is_upper = true;\n        else\n   \
    \         return false;\n    }\n    if(is_lower && is_upper)\n        return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiowfy8b8: /tmp/tmpiowfy8b8.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz780fric: /tmp/tmpz780fric.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool upper = false;\n    bool lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ upper = true;\n        if(islower(it->first[0])) lower = true;\n    }\n    return\
    \ upper ^ lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n   \
    \ assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt0njspxv: /tmp/tmpt0njspxv.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuldbr6pi: /tmp/tmpuldbr6pi.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            all_upper = false;\n\
    \        else if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n            all_lower\
    \ = false;\n        else\n            return false;\n    }\n    return all_lower\
    \ || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgvpa1ijq: /tmp/tmpgvpa1ijq.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0]))\n            all_upper = false;\n        if(!islower(it->first[0]))\n\
    \            all_lower = false;\n    }\n    return all_lower || all_upper;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmplmr11qy0: /tmp/tmplmr11qy0.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower = true;\n        else\n            upper = true;\n    }\n \
    \   return (upper && lower) ? false : true;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqi61q1hw: /tmp/tmpqi61q1hw.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpslzvcnd4: /tmp/tmpslzvcnd4.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool upper = false;\n    bool lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ upper = true;\n        if(islower(it->first[0])) lower = true;\n    }\n    return\
    \ upper ^ lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n   \
    \ assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2jy2gjz6: /tmp/tmp2jy2gjz6.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnkf7_gwa: /tmp/tmpnkf7_gwa.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z')\n            upper = true;\n        else if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n            lower = true;\n        else\n  \
    \          return false;\n    }\n    return upper ^ lower;\n}\nint main() {\n\
    \    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy8i5yn8r: /tmp/tmpy8i5yn8r.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool lower = false;\n    bool upper = false;\n    for(;\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            upper = true;\n\
    \        else\n            return false;\n    }\n    if(lower && upper)\n    \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpa9664web: /tmp/tmpa9664web.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first[0]>='a' && it->first[0]<='z')\n        {\n      \
    \      for(int i=1;i<it->first.length();i++)\n            {\n                if(it->first[i]<'a'\
    \ || it->first[i]>'z')\n                {\n                    flag=false;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    else if(it->first[0]>='A' && it->first[0]<='Z')\n        {\n            for(int\
    \ i=1;i<it->first.length();i++)\n            {\n                if(it->first[i]<'A'\
    \ || it->first[i]>'Z')\n                {\n                    flag=false;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    else\n        {\n            flag=false;\n            break;\n        }\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2os7e063: /tmp/tmp2os7e063.cpp:51: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            is_upper = false;\n        if(!islower(it->first[0]))\n         \
    \   is_lower = false;\n    }\n    return is_lower || is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9z95tjz1: /tmp/tmp9z95tjz1.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            lower = true;\n    }\n \
    \   return upper ^ lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5ree5i8h: /tmp/tmp5ree5i8h.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuwhly_dr: /tmp/tmpuwhly_dr.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return (is_lower && !is_upper) || (!is_lower && is_upper);\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjjth0feq: /tmp/tmpjjth0feq.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7mn2sxf3: /tmp/tmp7mn2sxf3.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!islower(it->first[0]))\
    \ is_lower = false;\n        if(!isupper(it->first[0])) is_upper = false;\n  \
    \  }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiw3mdw6x: /tmp/tmpiw3mdw6x.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            is_lower = true;\n\
    \        }\n        else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n  \
    \          is_upper = true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    if(is_lower && is_upper)\n        return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo4vzznvz: /tmp/tmpo4vzznvz.cpp:37: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy4s1gm1l: /tmp/tmpy4s1gm1l.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxoweso60: /tmp/tmpxoweso60.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            lower = true;\n    }\n \
    \   return upper ^ lower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo3rejcs1: /tmp/tmpo3rejcs1.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()==0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjg5u6p_o: /tmp/tmpjg5u6p_o.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0]))\n            all_upper = false;\n        if(!islower(it->first[0]))\n\
    \            all_lower = false;\n    }\n    return all_lower || all_upper;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8bu5nsvq: /tmp/tmp8bu5nsvq.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower)) {\n            all_lower = false;\n        }\n\
    \        if(!std::all_of(it->first.begin(), it->first.end(), ::isupper)) {\n \
    \           all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower)) {\n            all_lower = false;\n        }\n\
    \        if(!std::all_of(it->first.begin(), it->first.end(), ::isupper)) {\n \
    \           all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ is_upper = false;\n        if(!islower(it->first[0])) is_lower = false;\n  \
    \  }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7yy8t5b7: /tmp/tmp7yy8t5b7.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmprb53x6de: /tmp/tmprb53x6de.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower)) {\n            all_lower = false;\n        }\n\
    \        if(!std::all_of(it->first.begin(), it->first.end(), ::isupper)) {\n \
    \           all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool isUpper = false;\n    bool isLower =\
    \ false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            isUpper = true;\n        else if(islower(it->first[0]))\n       \
    \     isLower = true;\n        else\n            return false;\n    }\n    return\
    \ isUpper ^ isLower;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx3ewnrur: /tmp/tmpx3ewnrur.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) {\n            is_lower = true;\n        }\n    \
    \    else if(isupper(it->first[0])) {\n            is_upper = true;\n        }\n\
    \        else {\n            return false;\n        }\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp02a_usbn: /tmp/tmp02a_usbn.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1g98lh7d: /tmp/tmp1g98lh7d.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = false;\n    bool upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower = true;\n        else if(isupper(it->first[0]))\n         \
    \   upper = true;\n        else\n            return false;\n    }\n    return\
    \ lower ^ upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n   \
    \ assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfqr_idob: /tmp/tmpfqr_idob.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it;\n    bool flag = false;\n    for(it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(islower(it->first[0])) {\n            flag = true;\n         \
    \   break;\n        }\n    }\n    for(it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(flag) {\n            if(!islower(it->first[0]))\n            \
    \    return false;\n        }\n        else {\n            if(!isupper(it->first[0]))\n\
    \                return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx9jgl6dd: /tmp/tmpx9jgl6dd.cpp:40: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        std::string\
    \ key = it->first;\n        for(int i = 0; i < key.length(); i++) {\n        \
    \    if(!islower(key[i])) all_lower = false;\n            if(!isupper(key[i]))\
    \ all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n}\n\
    int main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9zcf39a0: /tmp/tmp9zcf39a0.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            lower = true;\n        }\n        else if(isupper(it->first[0]))\
    \ {\n            upper = true;\n        }\n        else {\n            return\
    \ false;\n        }\n    }\n    return upper ^ lower;\n}\nint main() {\n    auto\
    \ candidate = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp86esw3m8: /tmp/tmp86esw3m8.cpp:35: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool lower = false;\n    bool upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ lower = true;\n        else upper = true;\n    }\n    return lower ^ upper;\n\
    }\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpov2i7oft: /tmp/tmpov2i7oft.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!std::all_of(it->first.begin(), it->first.end(), ::islower))\n          \
    \  all_lower = false;\n        if(!std::all_of(it->first.begin(), it->first.end(),\
    \ ::isupper))\n            all_upper = false;\n    }\n    return all_lower ||\
    \ all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdk4i2_8z: /tmp/tmpdk4i2_8z.cpp:32: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ is_upper = false;\n        if(!islower(it->first[0])) is_lower = false;\n  \
    \  }\n    return is_lower || is_upper;\n}\nint main() {\n    auto candidate =\
    \ check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp811f_wc6: /tmp/tmp811f_wc6.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return !(is_lower\
    \ && is_upper);\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxfzteq8p: /tmp/tmpxfzteq8p.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbkzxfdrv: /tmp/tmpbkzxfdrv.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg6l3wmlp: /tmp/tmpg6l3wmlp.cpp:26: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate\
    \ = check_dict_case;\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmphcblts88: /tmp/tmphcblts88.cpp:27: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7p5vh092: /tmp/tmp7p5vh092.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else\n            lower = false;\n    }\n\
    \    return lower || upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"Name\", \"John\"\
    }, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n  \
    \  assert(candidate((std::map<std::string, std::string>({{\"fruit\", \"Orange\"\
    }, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmppd7os1e9: /tmp/tmppd7os1e9.cpp:30: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
    \ True if all keys are strings in lower \n// case or all keys are strings in upper\
    \ case, else return False.\n// The function should return False is the given dictionary\
    \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    bool check_dict_case(std::map<std::string, std::string> dict) {\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;\n}\nint main()\
    \ {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"\
    }, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"\
    Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
    \    assert(candidate((std::map<std::string, std::string>({{\"STATE\", \"NC\"\
    }, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
    \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
    \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6xifulgp: /tmp/tmp6xifulgp.cpp:29: int main(): Assertion `candidate((std::map<std::string,\
    \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"\
    }}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
