language: cpp
name: HumanEval_74_total_match
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1=0,l2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\
    \t{\n\t\tl1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\t{\n\t\t\
    l2+=lst2[i].size();\n\t}\n\tif(l1<l2)\n\t{\n\t\treturn lst1;\n\t}\n\telse\n\t\
    {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmph36dl6y2: /tmp/tmph36dl6y2.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++) {\n\t\tl1 += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tl2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\
    \t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpisksmfmv: /tmp/tmpisksmfmv.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1=0,count2=0;\n\tfor(int\
    \ i=0;i<lst1.size();i++)\n\t{\n\t\tcount1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\
    \t{\n\t\tcount2+=lst2[i].size();\n\t}\n\tif(count1<count2)\n\t{\n\t\treturn lst1;\n\
    \t}\n\telse\n\t{\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptgz9joyp: /tmp/tmptgz9joyp.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1=0,count2=0;\n\tfor(int\
    \ i=0;i<lst1.size();i++)\n\t{\n\t\tcount1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\
    \t{\n\t\tcount2+=lst2[i].size();\n\t}\n\tif(count1<count2)\n\t{\n\t\treturn lst1;\n\
    \t}\n\telse\n\t{\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmptgz9joyp: /tmp/tmptgz9joyp.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1=0,sum2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\
    \t{\n\t\tsum1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\t{\n\t\
    \tsum2+=lst2[i].size();\n\t}\n\tif(sum1<sum2)\n\t{\n\t\treturn lst1;\n\t}\n\t\
    else\n\t{\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpwapfu8fl: /tmp/tmpwapfu8fl.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1=0,sum2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\
    \t{\n\t\tsum1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\t{\n\t\
    \tsum2+=lst2[i].size();\n\t}\n\tif(sum1<sum2)\n\t{\n\t\treturn lst1;\n\t}\n\t\
    else\n\t{\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpwapfu8fl: /tmp/tmpwapfu8fl.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1=0,sum2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\
    \t{\n\t\tsum1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\t{\n\t\
    \tsum2+=lst2[i].size();\n\t}\n\tif(sum1<sum2)\n\t{\n\t\treturn lst1;\n\t}\n\t\
    else\n\t{\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpwapfu8fl: /tmp/tmpwapfu8fl.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1=0,l2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\
    \t{\n\t\tl1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\t{\n\t\t\
    l2+=lst2[i].size();\n\t}\n\tif(l1<l2)\n\t{\n\t\treturn lst1;\n\t}\n\telse if(l1>l2)\n\
    \t{\n\t\treturn lst2;\n\t}\n\telse\n\t{\n\t\treturn lst1;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint len1 = 0, len2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tlen1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tlen2 += lst2[i].size();\n\tif (len1 < len2)\n\t\t\
    return lst1;\n\telse if (len1 > len2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1=0,l2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\
    \t\tl1+=lst1[i].size();\n\tfor(int i=0;i<lst2.size();i++)\n\t\tl2+=lst2[i].size();\n\
    \tif(l1<l2)\n\t\treturn lst1;\n\telse if(l1>l2)\n\t\treturn lst2;\n\telse\n\t\t\
    return lst1;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++)\n\t\tl1 += lst1[i].size();\n\tfor (int i = 0; i <\
    \ lst2.size(); i++)\n\t\tl2 += lst2[i].size();\n\tif (l1 <= l2)\n\t\treturn lst1;\n\
    \telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1=0,count2=0;\n\tfor(int\
    \ i=0;i<lst1.size();i++)\n\t{\n\t\tcount1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\
    \t{\n\t\tcount2+=lst2[i].size();\n\t}\n\tif(count1<count2)\n\t\treturn lst1;\n\
    \telse if(count1>count2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint lst1_total = 0;\n\tint lst2_total\
    \ = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\
    \t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\
    \t}\n\tif (lst1_total < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn\
    \ lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpfratqx5y: /tmp/tmpfratqx5y.cpp:36: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1=0,count2=0;\n\tfor(int\
    \ i=0;i<lst1.size();i++)\n\t{\n\t\tcount1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\
    \t{\n\t\tcount2+=lst2[i].size();\n\t}\n\tif(count1<count2)\n\t{\n\t\treturn lst1;\n\
    \t}\n\telse if(count1>count2)\n\t{\n\t\treturn lst2;\n\t}\n\telse\n\t{\n\t\treturn\
    \ lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ == sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint lst1_total = 0;\n\tint lst2_total\
    \ = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\
    \t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\
    \t}\n\tif (lst1_total < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn\
    \ lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpfratqx5y: /tmp/tmpfratqx5y.cpp:36: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint lst1_total = 0;\n\tint lst2_total\
    \ = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\
    \t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\
    \t}\n\tif (lst1_total < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn\
    \ lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpfratqx5y: /tmp/tmpfratqx5y.cpp:36: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++) {\n\t\tl1 += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tl2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\
    \t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpisksmfmv: /tmp/tmpisksmfmv.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1=0,sum2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\
    \t{\n\t\tsum1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\t{\n\t\
    \tsum2+=lst2[i].size();\n\t}\n\tif(sum1<sum2)\n\t{\n\t\treturn lst1;\n\t}\n\t\
    else\n\t{\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpwapfu8fl: /tmp/tmpwapfu8fl.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tstd::vector<std::string> result;\n\
    \tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total < lst2_total)\
    \ {\n\t\treturn lst1;\n\t}\n\telse if (lst1_total > lst2_total) {\n\t\treturn\
    \ lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int\
    \ i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 <\
    \ count2)\n\t\treturn lst1;\n\telse if (count1 > count2)\n\t\treturn lst2;\n\t\
    else\n\t\treturn lst1;\n}\nint main() {\n    auto candidate = total_match;\n \
    \   assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\
    \tfor (int i = 0; i < lst1.size(); i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\
    \tfor (int i = 0; i < lst2.size(); i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\
    \tif (total1 > total2) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int\
    \ i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 ==\
    \ count2)\n\t\treturn lst1;\n\telse if (count1 < count2)\n\t\treturn lst1;\n\t\
    else\n\t\treturn lst2;\n}\nint main() {\n    auto candidate = total_match;\n \
    \   assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++) {\n\t\tl1 += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tl2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\
    \t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpisksmfmv: /tmp/tmpisksmfmv.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 == sum2)\n\t\t\
    return lst1;\n\tif (sum1 < sum2)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++)\n\t\tl1 += lst1[i].size();\n\tfor (int i = 0; i <\
    \ lst2.size(); i++)\n\t\tl2 += lst2[i].size();\n\tif (l1 > l2)\n\t\treturn lst2;\n\
    \telse\n\t\treturn lst1;\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\
    \tfor (int i = 0; i < lst1.size(); i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\
    \tfor (int i = 0; i < lst2.size(); i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\
    \tif (total1 < total2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmppuoaf7sk: /tmp/tmppuoaf7sk.cpp:36: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse if (count1 > count2) {\n\
    \t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++) {\n\t\tl1 += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tl2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\
    \t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpisksmfmv: /tmp/tmpisksmfmv.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse if (count1 > count2) {\n\
    \t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint lst1_total = 0;\n\tint lst2_total\
    \ = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\
    \t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\
    \t}\n\tif (lst1_total < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn\
    \ lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpfratqx5y: /tmp/tmpfratqx5y.cpp:36: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++)\n\t\tl1 += lst1[i].size();\n\tfor (int i = 0; i <\
    \ lst2.size(); i++)\n\t\tl2 += lst2[i].size();\n\tif (l1 < l2)\n\t\treturn lst1;\n\
    \telse if (l1 > l2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1=0,l2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\
    \t\tl1+=lst1[i].size();\n\tfor(int i=0;i<lst2.size();i++)\n\t\tl2+=lst2[i].size();\n\
    \tif(l1<l2)\n\t\treturn lst1;\n\telse if(l1>l2)\n\t\treturn lst2;\n\telse\n\t\t\
    return lst1;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int\
    \ i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 <\
    \ count2)\n\t\treturn lst1;\n\telse if (count1 > count2)\n\t\treturn lst2;\n\t\
    else\n\t\treturn lst1;\n}\nint main() {\n    auto candidate = total_match;\n \
    \   assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int\
    \ i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 <\
    \ count2)\n\t\treturn lst1;\n\telse if (count1 > count2)\n\t\treturn lst2;\n\t\
    else\n\t\treturn lst1;\n}\nint main() {\n    auto candidate = total_match;\n \
    \   assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1=0,count2=0;\n\tfor(int\
    \ i=0;i<lst1.size();i++)\n\t{\n\t\tcount1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\
    \t{\n\t\tcount2+=lst2[i].size();\n\t}\n\tif(count1<count2)\n\t{\n\t\treturn lst1;\n\
    \t}\n\telse if(count1>count2)\n\t{\n\t\treturn lst2;\n\t}\n\telse\n\t{\n\t\treturn\
    \ lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 == sum2)\n\t\t\
    return lst1;\n\telse if (sum1 < sum2)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 == sum2)\n\t\t\
    return lst1;\n\telse if (sum1 < sum2)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tfor (int j = 0; j < lst1[i].size(); j++)\
    \ {\n\t\t\tsum1++;\n\t\t}\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\t\
    for (int j = 0; j < lst2[i].size(); j++) {\n\t\t\tsum2++;\n\t\t}\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmplb491ydt: /tmp/tmplb491ydt.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++) {\n\t\tl1 += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tl2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\
    \t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpisksmfmv: /tmp/tmpisksmfmv.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++)\n\t\tl1 += lst1[i].size();\n\tfor (int i = 0; i <\
    \ lst2.size(); i++)\n\t\tl2 += lst2[i].size();\n\tif (l1 < l2)\n\t\treturn lst1;\n\
    \telse if (l1 > l2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int\
    \ i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 <\
    \ count2)\n\t\treturn lst1;\n\telse if (count1 > count2)\n\t\treturn lst2;\n\t\
    else\n\t\treturn lst1;\n}\nint main() {\n    auto candidate = total_match;\n \
    \   assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int\
    \ i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 <\
    \ count2)\n\t\treturn lst1;\n\telse if (count1 > count2)\n\t\treturn lst2;\n\t\
    else\n\t\treturn lst1;\n}\nint main() {\n    auto candidate = total_match;\n \
    \   assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++) {\n\t\tl1 += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tl2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\
    \t\treturn lst1;\n\t}\n\treturn lst2;\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp1__aiqgj: /tmp/tmp1__aiqgj.cpp:33: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++) {\n\t\tl1 += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tl2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\
    \t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpisksmfmv: /tmp/tmpisksmfmv.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int\
    \ i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 <\
    \ count2)\n\t\treturn lst1;\n\telse if (count1 > count2)\n\t\treturn lst2;\n\t\
    else\n\t\treturn lst1;\n}\nint main() {\n    auto candidate = total_match;\n \
    \   assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 == sum2)\n\t\t\
    return lst1;\n\telse if (sum1 < sum2)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint lst1_total = 0;\n\tint lst2_total\
    \ = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\
    \t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\
    \t}\n\tif (lst1_total < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn\
    \ lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpfratqx5y: /tmp/tmpfratqx5y.cpp:36: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ == sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (auto i : lst1)\n\t\tcount1 += i.size();\n\tfor (auto i : lst2)\n\t\tcount2\
    \ += i.size();\n\tif (count1 < count2)\n\t\treturn lst1;\n\telse if (count1 >\
    \ count2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint lst1_sum = 0;\n\tint lst2_sum\
    \ = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tlst1_sum += lst1[i].size();\n\
    \t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tlst2_sum += lst2[i].size();\n\
    \t}\n\tif (lst1_sum < lst2_sum) {\n\t\treturn lst1;\n\t}\n\telse if (lst1_sum\
    \ > lst2_sum) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 == sum2)\n\t\t\
    return lst1;\n\telse if (sum1 < sum2)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++)\n\t\tl1 += lst1[i].size();\n\tfor (int i = 0; i <\
    \ lst2.size(); i++)\n\t\tl2 += lst2[i].size();\n\tif (l1 < l2)\n\t\treturn lst1;\n\
    \telse if (l1 > l2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int\
    \ i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 ==\
    \ count2)\n\t\treturn lst1;\n\telse if (count1 < count2)\n\t\treturn lst1;\n\t\
    else\n\t\treturn lst2;\n}\nint main() {\n    auto candidate = total_match;\n \
    \   assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int\
    \ i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 <\
    \ count2)\n\t\treturn lst1;\n\telse if (count1 > count2)\n\t\treturn lst2;\n\t\
    else\n\t\treturn lst1;\n}\nint main() {\n    auto candidate = total_match;\n \
    \   assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1=0,sum2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\
    \t{\n\t\tsum1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\t{\n\t\
    \tsum2+=lst2[i].size();\n\t}\n\tif(sum1<sum2)\n\t{\n\t\treturn lst1;\n\t}\n\t\
    else\n\t{\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpwapfu8fl: /tmp/tmpwapfu8fl.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1=0,sum2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\
    \t{\n\t\tsum1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\t{\n\t\
    \tsum2+=lst2[i].size();\n\t}\n\tif(sum1<sum2)\n\t{\n\t\treturn lst1;\n\t}\n\t\
    else\n\t{\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpwapfu8fl: /tmp/tmpwapfu8fl.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse if (count1 > count2) {\n\
    \t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmp6uf37f82: /tmp/tmp6uf37f82.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int\
    \ i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 ==\
    \ count2)\n\t\treturn lst1;\n\telse if (count1 < count2)\n\t\treturn lst1;\n\t\
    else\n\t\treturn lst2;\n}\nint main() {\n    auto candidate = total_match;\n \
    \   assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 == sum2)\n\t\t\
    return lst1;\n\telse if (sum1 < sum2)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\t\
    for (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\t\
    if (count1 < count2) {\n\t\treturn lst1;\n\t}\n\telse if (count1 > count2) {\n\
    \t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto\
    \ candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int\
    \ i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 <\
    \ count2)\n\t\treturn lst1;\n\telse if (count1 > count2)\n\t\treturn lst2;\n\t\
    else\n\t\treturn lst1;\n}\nint main() {\n    auto candidate = total_match;\n \
    \   assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i\
    \ = 0; i < lst1.size(); i++) {\n\t\tl1 += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tl2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\
    \t\treturn lst1;\n\t}\n\telse if (l1 > l2) {\n\t\treturn lst2;\n\t}\n\telse {\n\
    \t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 == sum2)\n\t\t\
    return lst1;\n\telse if (sum1 < sum2)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint count1 = 0, count2 = 0;\n\tfor\
    \ (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int\
    \ i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 <\
    \ count2)\n\t\treturn lst1;\n\telse if (count1 > count2)\n\t\treturn lst2;\n\t\
    else\n\t\treturn lst1;\n}\nint main() {\n    auto candidate = total_match;\n \
    \   assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150809
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1=0,sum2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\
    \t{\n\t\tsum1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\t{\n\t\
    \tsum2+=lst2[i].size();\n\t}\n\tif(sum1<sum2)\n\t{\n\t\treturn lst1;\n\t}\n\t\
    else\n\t{\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpwapfu8fl: /tmp/tmpwapfu8fl.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmpnoa8esf6: /tmp/tmpnoa8esf6.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int\
    \ i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1\
    \ < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: Exception
  stderr: 'tmps466m1cc: /tmp/tmps466m1cc.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"hi",
    (std::string)"admin"})), (std::vector<std::string>({(std::string)"hI", (std::string)"hi",
    (std::string)"hii"}))) == (std::vector<std::string>({(std::string)"hi", (std::string)"admin"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660150810
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two lists of strings and returns the list that has \n// total number\
    \ of chars in the all strings of the list less than the other list.\n// if the\
    \ two lists have the same number of chars, return the first list.\n// Examples\n\
    // total_match([], []) \u279E []\n// total_match(['hi', 'admin'], ['hI', 'Hi'])\
    \ \u279E ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \ \u279E ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\
    \ \u279E ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5'])\
    \ \u279E ['4']\nstd::vector<std::string> total_match(std::vector<std::string>\
    \ lst1, std::vector<std::string> lst2) {\n\tint sum1 = 0, sum2 = 0;\n\tfor (int\
    \ i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0;\
    \ i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\tif (sum1 < sum2)\n\t\t\
    return lst1;\n\telse if (sum1 > sum2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n\
    }\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150810
