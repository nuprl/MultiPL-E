name: HumanEval_155_even_odd_count
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpleblt8y0: /tmp/tmpleblt8y0.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long even = 0,\
    \ odd = 0;\n    while(num != 0){\n        if(num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpym0y2iu6: /tmp/tmpym0y2iu6.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmphux9cg5c: /tmp/tmphux9cg5c.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp17uu55n6: /tmp/tmp17uu55n6.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\twhile (num !=\
    \ 0) {\n\t\tif (num % 2 == 0) even++;\n\t\telse odd++;\n\t\tnum /= 10;\n\t}\n\t\
    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpfztr_qew: /tmp/tmpfztr_qew.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::tuple<long, long> result;\n    std::get<0>(result)\
    \ = 0;\n    std::get<1>(result) = 0;\n    while (num != 0) {\n        if (num\
    \ % 2 == 0) {\n            std::get<0>(result)++;\n        } else {\n        \
    \    std::get<1>(result)++;\n        }\n        num /= 10;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpcgogqc3l: /tmp/tmpcgogqc3l.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpzzsz10ae: /tmp/tmpzzsz10ae.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::tuple<long, long> result;\n    long\
    \ even = 0, odd = 0;\n    while(num != 0) {\n        if(num % 2 == 0)\n      \
    \      even++;\n        else\n            odd++;\n        num /= 10;\n    }\n\
    \    result = std::make_tuple(even, odd);\n    return result;\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp1mm8on_m: /tmp/tmp1mm8on_m.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp82o1mtlv: /tmp/tmp82o1mtlv.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpem7o9eyo: /tmp/tmpem7o9eyo.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp_funmbub: /tmp/tmp_funmbub.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpsi1d_5pc: /tmp/tmpsi1d_5pc.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpnfr3f2ac: /tmp/tmpnfr3f2ac.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num % 2 == 0)\n            even++;\n        else\n           \
    \ odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmptecftgeq: /tmp/tmptecftgeq.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp838vx9y5: /tmp/tmp838vx9y5.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n \
    \   }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpjc4_7jip: /tmp/tmpjc4_7jip.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpd0hxi1t9: /tmp/tmpd0hxi1t9.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpuefis5ts: /tmp/tmpuefis5ts.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpdomq2j57: /tmp/tmpdomq2j57.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num%2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpr3v26uh7: /tmp/tmpr3v26uh7.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp7hjmnvx1: /tmp/tmp7hjmnvx1.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        int digit = num % 10;\n        if(digit % 2 == 0) {\n     \
    \       even++;\n        } else {\n            odd++;\n        }\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp5zw4knkp: /tmp/tmp5zw4knkp.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp_xymtbuw: /tmp/tmp_xymtbuw.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpsqyt6hwu: /tmp/tmpsqyt6hwu.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp8u2oe_j1: /tmp/tmp8u2oe_j1.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpyjtf19_i: /tmp/tmpyjtf19_i.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if((num % 10) % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmps3y1b71g: /tmp/tmps3y1b71g.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpvuoato5e: /tmp/tmpvuoato5e.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpb0_q4fgw: /tmp/tmpb0_q4fgw.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp7jez8wbo: /tmp/tmp7jez8wbo.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp7b4dwgqq: /tmp/tmp7b4dwgqq.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpbh6db7cg: /tmp/tmpbh6db7cg.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmptv5z9a2e: /tmp/tmptv5z9a2e.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    int digit = num % 10;\n    if (digit % 2 == 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpq6jsh2c2: /tmp/tmpq6jsh2c2.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpa19kuqi7: /tmp/tmpa19kuqi7.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpg0rizwwm: /tmp/tmpg0rizwwm.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp_6q1z0le: /tmp/tmp_6q1z0le.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpwkq13dje: /tmp/tmpwkq13dje.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmwsuntjo: /tmp/tmpmwsuntjo.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if((num % 10) % 2 == 0) {\n            even++;\n        } else\
    \ {\n            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp7bbpky32: /tmp/tmp7bbpky32.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpm46f34b7: /tmp/tmpm46f34b7.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp7mbydjvw: /tmp/tmp7mbydjvw.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    if (num <\
    \ 0) {\n        num = -num;\n    }\n    while (num > 0) {\n        if (num % 2\
    \ == 0) {\n            even++;\n        } else {\n            odd++;\n       \
    \ }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint\
    \ main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) ==\
    \ (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp774xc5aw: /tmp/tmp774xc5aw.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long even = 0,\
    \ odd = 0;\n    while(num != 0){\n        if(num % 2 == 0) even++;\n        else\
    \ odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmph47b_8au: /tmp/tmph47b_8au.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpvijkyii8: /tmp/tmpvijkyii8.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if((num % 10) % 2 == 0) {\n            even++;\n        } else\
    \ {\n            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpesq7fel3: /tmp/tmpesq7fel3.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmplkix88ox: /tmp/tmplkix88ox.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp6v6t2de6: /tmp/tmp6v6t2de6.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\twhile (num !=\
    \ 0) {\n\t\tif (num % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\
    \t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmppqm8l0tv: /tmp/tmppqm8l0tv.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n \
    \   }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmptwa02obc: /tmp/tmptwa02obc.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpu0knm5sx: /tmp/tmpu0knm5sx.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num !=\
    \ 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n \
    \   }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmprrp1xa9g: /tmp/tmprrp1xa9g.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmppcrrjb9b: /tmp/tmppcrrjb9b.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpikup9rb0: /tmp/tmpikup9rb0.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpmucni67m: /tmp/tmpmucni67m.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2 == 0) even++;\n        else odd++;\n        num /= 10;\n   \
    \ }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp_mb7q5lj: /tmp/tmp_mb7q5lj.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpptx9592i: /tmp/tmpptx9592i.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num !=\
    \ 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n \
    \   }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp0u9r72j1: /tmp/tmp0u9r72j1.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpc0smup8u: /tmp/tmpc0smup8u.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::tuple<long, long> result;\n    long\
    \ even = 0, odd = 0;\n    while(num != 0) {\n        int digit = num % 10;\n \
    \       if(digit % 2 == 0) {\n            even++;\n        } else {\n        \
    \    odd++;\n        }\n        num /= 10;\n    }\n    result = std::make_tuple(even,\
    \ odd);\n    return result;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpzj65ux80: /tmp/tmpzj65ux80.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2==0)\n            even++;\n        else\n            odd++;\n\
    \        num/=10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpfb3x4j2n: /tmp/tmpfb3x4j2n.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num) {\n\
    \    if (num % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpxgvs8azq: /tmp/tmpxgvs8azq.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpf07ph3th: /tmp/tmpf07ph3th.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num !=\
    \ 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n \
    \   }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpi2beplpz: /tmp/tmpi2beplpz.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpl13scddi: /tmp/tmpl13scddi.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmptthg369f: /tmp/tmptthg369f.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmppv6wmkw9: /tmp/tmppv6wmkw9.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp8dunur1t: /tmp/tmp8dunur1t.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    int digit = num % 10;\n    if (digit % 2 == 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmptiwy6dkt: /tmp/tmptiwy6dkt.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpualiz9ic: /tmp/tmpualiz9ic.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpmjj8osa6: /tmp/tmpmjj8osa6.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpyg198wj_: /tmp/tmpyg198wj_.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num % 2 == 0)\n            even++;\n        else\n           \
    \ odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpbklovj0j: /tmp/tmpbklovj0j.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpc20a8ruj: /tmp/tmpc20a8ruj.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmps06d4mmb: /tmp/tmps06d4mmb.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp0k9k5wn9: /tmp/tmp0k9k5wn9.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp1udu99et: /tmp/tmp1udu99et.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpozm6_xzj: /tmp/tmpozm6_xzj.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp5uq0lv91: /tmp/tmp5uq0lv91.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpjrtk8u4z: /tmp/tmpjrtk8u4z.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::tuple<long, long> result;\n    long\
    \ even_count = 0;\n    long odd_count = 0;\n    while (num != 0) {\n        if\
    \ (num % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n\
    \        }\n        num /= 10;\n    }\n    result = std::make_tuple(even_count,\
    \ odd_count);\n    return result;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpl6cun2xb: /tmp/tmpl6cun2xb.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmplk7sg7pw: /tmp/tmplk7sg7pw.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp_kadeh4c: /tmp/tmp_kadeh4c.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp318gif21: /tmp/tmp318gif21.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num%2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpz0h5cxzz: /tmp/tmpz0h5cxzz.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmppq3ouxik: /tmp/tmppq3ouxik.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long even = 0,\
    \ odd = 0;\n    while(num != 0){\n        if(num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpagw4q7bl: /tmp/tmpagw4q7bl.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num !=\
    \ 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n \
    \   }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpw22plyg3: /tmp/tmpw22plyg3.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp9lbu0_w_: /tmp/tmp9lbu0_w_.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp8kkqcy75: /tmp/tmp8kkqcy75.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num%2 == 0) even++;\n        else odd++;\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpzzs9j0ic: /tmp/tmpzzs9j0ic.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long even = 0,\
    \ odd = 0;\n    while(num != 0){\n        if(num % 2 == 0) even++;\n        else\
    \ odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpfjavxjy9: /tmp/tmpfjavxjy9.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if((num % 10) % 2 == 0) {\n            even++;\n        } else\
    \ {\n            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmphdd0wkx_: /tmp/tmphdd0wkx_.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpndp9knn_: /tmp/tmpndp9knn_.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpd59d_qos: /tmp/tmpd59d_qos.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpaw47fnjd: /tmp/tmpaw47fnjd.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num) {\n\
    \    if (num % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp69109s2v: /tmp/tmp69109s2v.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num) {\n\
    \    if (num % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpwy44ygfh: /tmp/tmpwy44ygfh.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpddoxatp_: /tmp/tmpddoxatp_.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp0m30_t4k: /tmp/tmp0m30_t4k.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if((num % 10) % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpbrugf2vx: /tmp/tmpbrugf2vx.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num) {\n\
    \    if (num % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmppmyq9rf6: /tmp/tmppmyq9rf6.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpoewxeoth: /tmp/tmpoewxeoth.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpflo_fej_: /tmp/tmpflo_fej_.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp22xagd1w: /tmp/tmp22xagd1w.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num) {\n\
    \    if (num % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp6cxmfa1m: /tmp/tmp6cxmfa1m.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp8xxjfo_y: /tmp/tmp8xxjfo_y.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even=0,odd=0;\n    while(num!=0){\n\
    \        if(num%2==0)\n            even++;\n        else\n            odd++;\n\
    \        num/=10;\n    }\n    return std::make_tuple(even,odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpblje524n: /tmp/tmpblje524n.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num) {\n\
    \    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n \
    \   num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n \
    \   auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpddu2qnj9: /tmp/tmpddu2qnj9.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp2vs4tb50: /tmp/tmp2vs4tb50.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpww39gx0a: /tmp/tmpww39gx0a.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpn19p_gz_: /tmp/tmpn19p_gz_.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n     \
    \       odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpwk4fhfxo: /tmp/tmpwk4fhfxo.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpj1dgzfqz: /tmp/tmpj1dgzfqz.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpzf381uf0: /tmp/tmpzf381uf0.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpwzl23dlh: /tmp/tmpwzl23dlh.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp5l6dt17c: /tmp/tmp5l6dt17c.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp7so9nooq: /tmp/tmp7so9nooq.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmprjy7sg8e: /tmp/tmprjy7sg8e.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    if (num <\
    \ 0) num *= -1;\n    while (num > 0) {\n        if (num % 2 == 0) even++;\n  \
    \      else odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmppblglk62: /tmp/tmppblglk62.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num > 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpyu_t5i2u: /tmp/tmpyu_t5i2u.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num % 2 == 0)\n            even++;\n        else\n           \
    \ odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpixh6n6zz: /tmp/tmpixh6n6zz.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpa2cs89c0: /tmp/tmpa2cs89c0.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num % 2 == 0)\n            even++;\n        else\n           \
    \ odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpki4g4_jc: /tmp/tmpki4g4_jc.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpnleu326g: /tmp/tmpnleu326g.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpf0kg8sy8: /tmp/tmpf0kg8sy8.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp0dq8sh7b: /tmp/tmp0dq8sh7b.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpdn7vv429: /tmp/tmpdn7vv429.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num >\
    \ 0) {\n    if (num % 2 == 0)\n      even++;\n    else\n      odd++;\n    num\
    \ /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp4e1yu2ky: /tmp/tmp4e1yu2ky.cpp:21: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num !=\
    \ 0) {\n    int digit = num % 10;\n    if (digit % 2 == 0)\n      even++;\n  \
    \  else\n      odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp9rabxsu6: /tmp/tmp9rabxsu6.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp8rps49hk: /tmp/tmp8rps49hk.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpj8bsd25t: /tmp/tmpj8bsd25t.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp9yed217s: /tmp/tmp9yed217s.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp06ocrefx: /tmp/tmp06ocrefx.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmt745_35: /tmp/tmpmt745_35.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpxy24ub9m: /tmp/tmpxy24ub9m.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if((num % 10) % 2 == 0) {\n            even++;\n        } else\
    \ {\n            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp3_bao1d6: /tmp/tmp3_bao1d6.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        int digit = num % 10;\n        if(digit % 2 == 0) {\n     \
    \       even++;\n        } else {\n            odd++;\n        }\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmps1xeio90: /tmp/tmps1xeio90.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp9omiqjck: /tmp/tmp9omiqjck.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num % 2 == 0)\n            even++;\n        else\n           \
    \ odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpc9xz5q7s: /tmp/tmpc9xz5q7s.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpv18umqvz: /tmp/tmpv18umqvz.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  return std::make_tuple(0, 0);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp9tom9_n8: /tmp/tmp9tom9_n8.cpp:12: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num) {\n\
    \    if (num % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpuxyl_yoc: /tmp/tmpuxyl_yoc.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp56qrxnsh: /tmp/tmp56qrxnsh.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp_mi5ijk0: /tmp/tmp_mi5ijk0.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp4_xvb70l: /tmp/tmp4_xvb70l.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmqu20vlr: /tmp/tmpmqu20vlr.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp853wuoek: /tmp/tmp853wuoek.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp4trf01ou: /tmp/tmp4trf01ou.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if((num % 10) % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp_56g2wq2: /tmp/tmp_56g2wq2.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp3g0t6bzj: /tmp/tmp3g0t6bzj.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if((num % 10) % 2 == 0) {\n            even++;\n        } else\
    \ {\n            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpoc0bqc6z: /tmp/tmpoc0bqc6z.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpkeijbvyn: /tmp/tmpkeijbvyn.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp7w_bxmpe: /tmp/tmp7w_bxmpe.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp2a1ws_fz: /tmp/tmp2a1ws_fz.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpq2jvh56_: /tmp/tmpq2jvh56_.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ > 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpnt0619db: /tmp/tmpnt0619db.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmps6bqsfkh: /tmp/tmps6bqsfkh.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp1ktse28o: /tmp/tmp1ktse28o.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp00hhtlay: /tmp/tmp00hhtlay.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpfeyqr8n2: /tmp/tmpfeyqr8n2.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> even_odd_count =\
    \ std::make_tuple(0, 0);\n  while (num != 0) {\n    if (num % 2 == 0) {\n    \
    \  std::get<0>(even_odd_count)++;\n    } else {\n      std::get<1>(even_odd_count)++;\n\
    \    }\n    num /= 10;\n  }\n  return even_odd_count;\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp56ru3wl_: /tmp/tmp56ru3wl_.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmps7ko7492: /tmp/tmps7ko7492.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpzpjgrptx: /tmp/tmpzpjgrptx.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if((num % 10) % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpqivzz47s: /tmp/tmpqivzz47s.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpzniyxtie: /tmp/tmpzniyxtie.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        int digit = num % 10;\n        if(digit % 2 == 0) {\n     \
    \       even++;\n        } else {\n            odd++;\n        }\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpc76_0yqm: /tmp/tmpc76_0yqm.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long even = 0,\
    \ odd = 0;\n    while(num){\n        if(num%2 == 0) even++;\n        else odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp5a3ki8k9: /tmp/tmp5a3ki8k9.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpy4rmejds: /tmp/tmpy4rmejds.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpr9ennks8: /tmp/tmpr9ennks8.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpo9l6uekl: /tmp/tmpo9l6uekl.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpofq6zu0b: /tmp/tmpofq6zu0b.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    if (num <\
    \ 0) num *= -1;\n    while (num > 0) {\n        if (num % 2 == 0) even++;\n  \
    \      else odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpg77_dih6: /tmp/tmpg77_dih6.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmrpm93jg: /tmp/tmpmrpm93jg.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num) {\n\
    \    if (num % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmptrbkah22: /tmp/tmptrbkah22.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmppms3d1h3: /tmp/tmppms3d1h3.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpdvqndxhe: /tmp/tmpdvqndxhe.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2 == 0) even++;\n        else odd++;\n        num /= 10;\n   \
    \ }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmponmcf98n: /tmp/tmponmcf98n.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp95ihfwy2: /tmp/tmp95ihfwy2.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmprh78u9bh: /tmp/tmprh78u9bh.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpd0wk3j_q: /tmp/tmpd0wk3j_q.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) even++;\n        else odd++;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpp6_tyc6l: /tmp/tmpp6_tyc6l.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n \
    \   }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp3xoq9jus: /tmp/tmp3xoq9jus.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num % 2 == 0)\n            even++;\n        else\n           \
    \ odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp3m_k30k7: /tmp/tmp3m_k30k7.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpwwuxnnoa: /tmp/tmpwwuxnnoa.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmdeej5vy: /tmp/tmpmdeej5vy.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    int digit = num % 10;\n    if (digit % 2 == 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpx2xss0rx: /tmp/tmpx2xss0rx.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpu979ejd9: /tmp/tmpu979ejd9.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp9jxj92_7: /tmp/tmp9jxj92_7.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpwu975142: /tmp/tmpwu975142.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp05861e9b: /tmp/tmp05861e9b.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp42vfdpe1: /tmp/tmp42vfdpe1.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num !=\
    \ 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n \
    \   }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpix9w5qpp: /tmp/tmpix9w5qpp.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp1xjh2qsb: /tmp/tmp1xjh2qsb.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long even = 0,\
    \ odd = 0;\n    while(num != 0){\n        if(num % 2 == 0) even++;\n        else\
    \ odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpypzl5qsi: /tmp/tmpypzl5qsi.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpq_mfb5qx: /tmp/tmpq_mfb5qx.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpftihyswr: /tmp/tmpftihyswr.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpdd0p8c5t: /tmp/tmpdd0p8c5t.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if((num % 10) % 2 == 0) even++;\n        else odd++;\n    \
    \    num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpws40eva2: /tmp/tmpws40eva2.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num) {\n\
    \    if (num % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpfds0gyxc: /tmp/tmpfds0gyxc.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
